

;
; ЩЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЛ
; К	This file is generated by The Interactive Disassembler (IDA)	    К
; К	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    К
; К			 Licensed to: Freeware version			    К
; ШЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭМ
;
; Input	MD5   :	53E19DDBB4DED2A9D5100ACA7FA96633

; File Name   :	Z:\home\george\DOS\CLYDE1D\CLYDE1.EXE
; Format      :	MS-DOS executable (EXE)
; Base Address:	0h Range: 0h-1AE10h Loaded length: 1AE10h
; Entry	Point :	0:0

		.386
		.model large

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg000		segment	byte public 'CODE' use16
		assume cs:seg000
		assume es:nothing, ss:seg070, ds:nothing, fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


		public start
start		proc near

; FUNCTION CHUNK AT 015A SIZE 00000018 BYTES

		sti
		mov	dx, seg	dseg
		mov	cs:word_172, dx
		mov	ah, 30h
		int	21h		; DOS -	GET DOS	VERSION
					; Return: AL = major version number (00h for DOS 1.x)

loc_D:
		mov	bp, ds:2
		mov	bx, ds:2Ch
		mov	ds, dx
		assume ds:dseg
		mov	word_14231, ax
		mov	word_1422F, es
		mov	word ptr dword_14229+2,	bx
		mov	word_14241, bp
		mov	word_14235, 0FFFFh
		call	sub_122
		les	di, dword_14229
		mov	ax, di
		mov	bx, ax
		mov	cx, 7FFFh

loc_3A:					; CODE XREF: start+62j
		cmp	word ptr es:[di], 3738h
		jnz	short loc_5A
		mov	dx, es:[di+2]
		cmp	dl, 3Dh	; '='
		jnz	short loc_5A
		and	dh, 0DFh
		inc	word_14235
		cmp	dh, 59h	; 'Y'
		jnz	short loc_5A
		inc	word_14235

loc_5A:					; CODE XREF: start+3Fj	start+48j ...
		repne scasb
		jcxz	short loc_A0
		inc	bx
		cmp	es:[di], al
		jnz	short loc_3A
		or	ch, 80h
		neg	cx

loc_69:					; DATA XREF: sub_45B+21r sub_45B+32r
		mov	word ptr dword_14229, cx

loc_6D:					; DATA XREF: sub_45B+10r
		mov	cx, 2

loc_70:					; DATA XREF: sub_45B+2Br
		shl	bx, cl
		add	bx, 10h
		and	bx, 0FFF0h
		mov	word_1422D, bx
		push	cs
		call	off_17E24
		mov	dx, ss
		sub	bp, dx
		mov	di, word_17D9E
		cmp	di, 100h
		jnb	short loc_97
		mov	di, 100h
		mov	word_17D9E, di

loc_97:					; CODE XREF: start+8Ej
		mov	cl, 4
		shr	di, cl
		inc	di
		cmp	bp, di
		jnb	short loc_A3

loc_A0:					; CODE XREF: start+5Cj
		jmp	loc_15A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_A3:					; CODE XREF: start+9Ej
		mov	bx, di
		add	bx, dx
		mov	word_14239, bx
		mov	word ptr dword_1423B+2,	bx
		mov	ax, word_1422F
		sub	bx, ax
		mov	es, ax
		mov	ah, 4Ah	; 'J'
		push	di
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		pop	di
		shl	di, cl
		mov	ss, dx
		mov	sp, di
		call	far ptr	sub_45B
		call	sub_559
		xor	ax, ax
		mov	es, cs:word_172
		mov	di, 3C7Ah
		mov	cx, 6BD0h
		sub	cx, di
		rep stosb
		push	cs
		call	off_17E28
		push	word_14227
		push	word_14225
		push	word_14223
		push	word_14221
		push	word_1421F
		call	sub_3DEF
		push	ax
		call	sub_122E6
start		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_101		proc near		; CODE XREF: start+16DP sub_122E6+2BP

arg_2		= byte ptr  4

		mov	ds, cs:word_172
		call	sub_13E
		push	cs
		call	off_17E26
		mov	bp, sp
		mov	ah, 4Ch	; 'L'
		mov	al, [bp+arg_2]
		int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
sub_101		endp			; AL = exit code

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		mov	cx, 0Eh
		nop
		mov	dx, 2Fh	; '/'
		jmp	short loc_161

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_122		proc near		; CODE XREF: start+2Cp
		push	ds
		mov	ax, 3500h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	word ptr dword_1421B, bx
		mov	word ptr dword_1421B+2,	es
		mov	ax, 2500h
		mov	dx, cs
		mov	ds, dx
		assume ds:seg000
		mov	dx, 119h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		assume ds:dseg
		retn
sub_122		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_13E		proc far		; CODE XREF: sub_101+5P
		push	ds
		mov	ax, 2500h
		lds	dx, dword_1421B
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		retf
sub_13E		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_14A		proc far		; CODE XREF: start+7Ep	sub_101+Bp
					; DATA XREF: ...
		mov	word_14235, 0
		retf
sub_14A		endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_152		proc near		; CODE XREF: start+166p
		mov	ah, 40h	; '@'
		mov	bx, 2
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		retn
sub_152		endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR start

loc_15A:				; CODE XREF: start:loc_A0j
					; seg000:02A8J	...
		mov	cx, 1Eh
		nop
		mov	dx, offset unk_141FD

loc_161:				; CODE XREF: seg000:0120j
		mov	ds, cs:word_172
		call	sub_152
		mov	ax, 3
		push	ax
		call	far ptr	sub_101
; END OF FUNCTION CHUNK	FOR start
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
word_172	dw 0			; DATA XREF: start+4w start+CEr ...

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_174		proc near		; CODE XREF: sub_1DF+68p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	bp
		mov	bp, sp

loc_177:				; CODE XREF: sub_174+1Bj
		les	bx, [bp+arg_0]
		cmp	byte ptr es:[bx], 0
		jz	short loc_195
		inc	word ptr [bp+arg_0]
		mov	al, es:[bx]
		les	bx, [bp+arg_4]
		inc	word ptr [bp+arg_4]
		cmp	al, es:[bx]
		jz	short loc_177
		xor	ax, ax
		jmp	short loc_198
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_195:				; CODE XREF: sub_174+Aj
		mov	ax, 1

loc_198:				; CODE XREF: sub_174+1Fj
		pop	bp
		retn	8
sub_174		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_19C		proc near		; CODE XREF: sub_1DF+6Fp
		mov	ax, 1130h
		mov	bh, 0
		mov	dl, 0FFh
		call	sub_1AF
		mov	al, dl
		inc	al
		mov	ah, 0
		retn
sub_19C		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_1AF		proc far		; CODE XREF: sub_19C+7P sub_1BE+3p ...
		push	si
		push	di
		mov	word_1AD62, bp
		int	10h		; - VIDEO -
		mov	bp, word_1AD62
		pop	di
		pop	si
		retf
sub_1AF		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_1BE		proc far		; CODE XREF: start+DEp
					; DATA XREF: dseg:off_17E28o
		mov	ah, 0Fh
		push	cs
		call	near ptr sub_1AF
		push	ax
		call	sub_1DF
		pop	cx
		mov	ah, 8
		mov	bh, 0
		push	cs
		call	near ptr sub_1AF
		and	ah, 7Fh
		mov	byte_17ABF, ah
		mov	byte_17ABE, ah
		retf
sub_1BE		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_1DF		proc far		; CODE XREF: sub_1BE+7P

arg_0		= byte ptr  6

		push	bp
		mov	bp, sp
		mov	al, [bp+arg_0]
		cmp	al, 3
		jbe	short loc_1EF
		cmp	al, 7
		jz	short loc_1EF
		mov	al, 3

loc_1EF:				; CODE XREF: sub_1DF+8j sub_1DF+Cj
		mov	byte_17AC0, al
		mov	ah, 0Fh
		push	cs
		call	near ptr sub_1AF
		mov	al, al
		cmp	al, byte_17AC0
		jz	short loc_212
		mov	al, byte_17AC0
		mov	ah, 0
		push	cs
		call	near ptr sub_1AF
		mov	ah, 0Fh
		push	cs
		call	near ptr sub_1AF
		mov	byte_17AC0, al

loc_212:				; CODE XREF: sub_1DF+1Fj
		mov	byte_17AC2, ah
		cmp	byte_17AC0, 3
		jbe	short loc_229
		cmp	byte_17AC0, 7
		jz	short loc_229
		mov	ax, 1
		jmp	short loc_22B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_229:				; CODE XREF: sub_1DF+3Cj sub_1DF+43j
		xor	ax, ax

loc_22B:				; CODE XREF: sub_1DF+48j
		mov	byte_17AC3, al
		mov	byte_17AC1, 19h
		cmp	byte_17AC0, 7
		jz	short loc_25A
		mov	dx, 0F000h
		mov	ax, 0FFEAh
		push	dx
		push	ax
		push	ds
		mov	ax, 390Bh
		push	ax
		call	sub_174
		or	ax, ax
		jnz	short loc_25A
		call	sub_19C
		or	ax, ax
		jnz	short loc_25A
		mov	ax, 1
		jmp	short loc_25C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_25A:				; CODE XREF: sub_1DF+59j sub_1DF+6Dj ...
		xor	ax, ax

loc_25C:				; CODE XREF: sub_1DF+79j
		mov	byte_17AC4, al
		cmp	byte_17AC0, 7
		jnz	short loc_26B
		mov	ax, 0B000h
		jmp	short loc_26E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_26B:				; CODE XREF: sub_1DF+85j
		mov	ax, 0B800h

loc_26E:				; CODE XREF: sub_1DF+8Aj
		mov	word_17AC7, ax
		mov	word_17AC5, 0
		mov	al, 0
		mov	byte ptr word_17ABA+1, al
		mov	byte ptr word_17ABA, al
		mov	al, byte_17AC2
		add	al, 0FFh
		mov	byte ptr word_17ABC, al
		mov	byte ptr word_17ABC+1, 18h
		pop	bp
		retf
sub_1DF		endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_28F:				; DATA XREF: dseg:3C6Ao
		mov	cx, 2Ch	; ','
		nop
		mov	dx, 3ADEh
		jmp	short loc_2A1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_298:				; DATA XREF: dseg:3C6Eo dseg:3C72o ...
		mov	cx, 2Bh	; '+'
		nop
		mov	dx, 3B0Ah
		jmp	short $+2

loc_2A1:				; CODE XREF: seg000:0296j
		mov	ah, 40h	; '@'
		mov	bx, 2
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		jmp	far ptr	loc_15A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		mov	cl, 3
		jmp	short loc_2BB

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_2B1		proc far		; CODE XREF: sub_70F7+C0P
					; sub_70F7+16AP ...
		mov	cl, 2
		jmp	short loc_2BB
sub_2B1		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_2B5		proc far		; CODE XREF: sub_707B+3AP
		mov	cl, 1
		jmp	short loc_2BB
sub_2B5		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_2B9		proc far		; CODE XREF: sub_3634+1D7P
					; sub_3634+252P ...

arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h

		xor	cx, cx

loc_2BB:				; CODE XREF: seg000:02AFj sub_2B1+2j ...
		push	bp
		push	si
		push	di
		mov	bp, sp
		mov	ax, [bp+arg_6]
		mov	dx, [bp+arg_8]
		mov	bx, [bp+arg_A]
		mov	bp, [bp+arg_C]
		xor	si, si
		test	cl, 1
		jnz	short loc_2F2
		or	dx, dx
		jns	short loc_2E0
		neg	dx
		neg	ax
		sbb	dx, si
		or	cl, 4

loc_2E0:				; CODE XREF: sub_2B9+1Cj
		or	bp, bp
		jns	short loc_2F2
		neg	bp
		neg	bx
		sbb	bp, si
		test	cl, 2
		jnz	short loc_2F2
		xor	cl, 4

loc_2F2:				; CODE XREF: sub_2B9+18j sub_2B9+29j ...
		mov	di, bp
		or	di, dx
		jnz	short loc_2FE
		div	bx
		xchg	si, dx
		jmp	short loc_31E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2FE:				; CODE XREF: sub_2B9+3Dj
		push	cx
		mov	cx, 20h	; ' '
		mov	di, si

loc_304:				; CODE XREF: sub_2B9:loc_31Bj
		shl	ax, 1
		rcl	dx, 1
		rcl	si, 1
		rcl	di, 1
		cmp	di, bp
		jb	short loc_31B
		ja	short loc_316
		cmp	si, bx
		jb	short loc_31B

loc_316:				; CODE XREF: sub_2B9+57j
		sub	si, bx
		sbb	di, bp
		inc	ax

loc_31B:				; CODE XREF: sub_2B9+55j sub_2B9+5Bj
		loop	loc_304
		pop	cx

loc_31E:				; CODE XREF: sub_2B9+43j
		test	cl, 2
		jz	short loc_326
		xchg	ax, si
		mov	dx, di

loc_326:				; CODE XREF: sub_2B9+68j
		test	cl, 4
		jz	short loc_332
		neg	dx
		neg	ax
		sbb	dx, 0

loc_332:				; CODE XREF: sub_2B9+70j
		pop	di
		pop	si
		pop	bp
		retf	8
sub_2B9		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_338		proc far		; CODE XREF: sub_10ED2+65P
		cmp	cx, 20h	; ' '
		jbe	short loc_342
		xor	ax, ax
		xor	dx, dx
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_342:				; CODE XREF: sub_338+3j sub_338+11j
		dec	cx
		jl	short locret_34B
		shl	ax, 1
		rcl	dx, 1
		jmp	short loc_342
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

locret_34B:				; CODE XREF: sub_338+Bj
		retf
sub_338		endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		cmp	cx, 20h	; ' '
		jbe	short loc_354
		mov	cx, 20h	; ' '

loc_354:				; CODE XREF: seg000:034Fj seg000:035Bj
		dec	cx
		jl	short locret_35D
		sar	dx, 1
		rcr	ax, 1
		jmp	short loc_354
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

locret_35D:				; CODE XREF: seg000:0355j
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		cmp	cx, 20h	; ' '
		jbe	short loc_368
		xor	ax, ax
		xor	dx, dx
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_368:				; CODE XREF: seg000:0361j seg000:036Fj
		dec	cx
		jl	short locret_371
		shr	dx, 1
		rcr	ax, 1
		jmp	short loc_368
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

locret_371:				; CODE XREF: seg000:0369j
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_372		proc far		; CODE XREF: sub_3634+2FEP
					; sub_707B+56P	...
		push	si
		xchg	ax, si
		xchg	ax, dx
		test	ax, ax
		jz	short loc_37B
		mul	bx

loc_37B:				; CODE XREF: sub_372+5j
		xchg	ax, cx
		test	ax, ax
		jz	short loc_384
		mul	si
		add	cx, ax

loc_384:				; CODE XREF: sub_372+Cj
		xchg	ax, si
		mul	bx
		add	dx, cx
		pop	si
		retf
sub_372		endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
strStackOverflow db 53h, 74h, 61h, 63h,	6Bh, 20h, 6Fh, 76h, 65h, 72h, 66h
		db 6Ch,	6Fh, 77h, 21h, 0Dh, 0Ah, 24h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


errStackOverflow proc near		; CODE XREF: sub_59D+9P sub_5C8+AP ...
		mov	ax, cs
		mov	ds, ax
		assume ds:seg000
		mov	dx, 38Bh
		mov	ah, 9
		int	21h		; DOS -	PRINT STRING
					; DS:DX	-> string terminated by	"$"
		mov	ax, 4C01h
		int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
errStackOverflow endp			; AL = exit code


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_3AD		proc far		; CODE XREF: sub_123F3+13P
					; sub_12481+1DP ...
		or	cx, cx
		jge	short loc_3BE
		not	bx
		not	cx
		add	bx, 1
		adc	cx, 0
		jmp	short loc_3EA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 2

loc_3BE:				; CODE XREF: sub_3AD+2j sub_3AD+3Bj
		add	ax, bx
		jnb	short loc_3C6
		add	dx, 1000h

loc_3C6:				; CODE XREF: sub_3AD+13j
		mov	ch, cl
		mov	cl, 4
		shl	ch, cl
		add	dh, ch
		mov	ch, al
		shr	ax, cl
		add	dx, ax
		mov	al, ch
		and	ax, 0Fh
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4
		jge	short loc_3EA
		not	bx
		not	cx
		add	bx, 1
		adc	cx, 0
		jmp	short loc_3BE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3EA:				; CODE XREF: sub_3AD+Ej sub_3AD+2Fj
		sub	ax, bx
		jnb	short loc_3F2
		sub	dx, 1000h

loc_3F2:				; CODE XREF: sub_3AD+3Fj
		mov	bh, cl
		mov	cl, 4
		shl	bh, cl
		xor	bl, bl
		sub	dx, bx
		mov	ch, al
		shr	ax, cl
		add	dx, ax
		mov	al, ch
		and	ax, 0Fh
		retf
sub_3AD		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_408		proc far		; CODE XREF: sub_123AC+11P
					; sub_123AC+26P ...
		push	cx
		mov	ch, al
		mov	cl, 4
		shr	ax, cl
		add	dx, ax
		mov	al, ch
		mov	ah, bl
		shr	bx, cl
		pop	cx
		add	cx, bx
		mov	bl, ah
		and	ax, 0Fh
		and	bx, 0Fh
		cmp	dx, cx
		jnz	short locret_429
		cmp	ax, bx

locret_429:				; CODE XREF: sub_408+1Dj
		retf
sub_408		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_42A		proc far		; CODE XREF: sub_1246C:loc_1247BP
		push	di
		mov	di, cx
		mov	ch, dh
		mov	cl, 4
		shl	dx, cl
		shr	ch, cl
		add	dx, ax
		adc	ch, 0
		mov	ax, di
		shl	di, cl
		shr	ah, cl
		add	bx, di
		adc	ah, 0
		sub	dx, bx
		sbb	ch, ah
		mov	al, ch
		cbw
		xchg	ax, dx
		pop	di
		retf
sub_42A		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_44F		proc near		; CODE XREF: thingThatEndsUpPrintingStr+2ECP
		jmp	dword ptr ds:3C6Ah
sub_44F		endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
dword_453	dd 0			; DATA XREF: sub_45Bw sub_45B+F9r ...
word_457	dw 0			; DATA XREF: sub_45B+Aw sub_45B+BEr
		db 2 dup(0)

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_45B		proc near		; CODE XREF: start+C2P

; FUNCTION CHUNK AT 0511 SIZE 00000048 BYTES

		pop	word ptr cs:dword_453
		pop	word ptr cs:dword_453+2
		mov	cs:word_457, ds
		cld
		mov	es, word ptr loc_6D+2
		assume es:nothing
		mov	si, 80h	; ''
		xor	ax, ax
		lods	byte ptr es:[si]
		inc	ax
		mov	bp, es
		xchg	dx, si
		xchg	ax, bx
		mov	si, word ptr loc_69
		add	si, 2
		mov	cx, 1
		cmp	byte ptr loc_70+1, 3
		jb	short loc_49E
		mov	es, word ptr loc_69+2
		assume es:nothing
		mov	di, si
		mov	cl, 7Fh	; ''
		xor	al, al
		repne scasb
		jcxz	short loc_511
		xor	cl, 7Fh

loc_49E:				; CODE XREF: sub_45B+30j
		sub	sp, 2
		mov	ax, 1
		add	ax, bx
		add	ax, cx
		and	ax, 0FFFEh
		mov	di, sp
		sub	di, ax
		jb	short loc_511
		mov	sp, di
		mov	ax, es
		mov	ds, ax
		assume ds:nothing
		mov	ax, ss
		mov	es, ax
		assume es:seg070
		push	cx
		dec	cx
		rep movsb
		xor	al, al
		stosb
		mov	ds, bp
		assume ds:nothing
		xchg	si, dx
		xchg	bx, cx
		mov	ax, bx
		mov	dx, ax
		inc	bx

loc_4CD:				; CODE XREF: sub_45B+88j sub_45B+8Cj
		call	sub_4E9
		ja	short loc_4D9

loc_4D2:				; CODE XREF: sub_45B+7Cj
		jb	short loc_516
		call	sub_4E9
		ja	short loc_4D2

loc_4D9:				; CODE XREF: sub_45B+75j
		cmp	al, 20h	; ' '
		jz	short loc_4E5
		cmp	al, 0Dh
		jz	short loc_4E5
		cmp	al, 9
		jnz	short loc_4CD

loc_4E5:				; CODE XREF: sub_45B+80j sub_45B+84j
		xor	al, al
		jmp	short loc_4CD
sub_45B		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4E9		proc near		; CODE XREF: sub_45B:loc_4CDp
					; sub_45B+79p
		or	ax, ax
		jz	short loc_4F4
		inc	dx
		stosb
		or	al, al
		jnz	short loc_4F4
		inc	bx

loc_4F4:				; CODE XREF: sub_4E9+2j sub_4E9+8j
		xchg	ah, al
		xor	al, al
		stc
		jcxz	short locret_510
		lodsb
		dec	cx
		sub	al, 22h	; '"'
		jz	short locret_510
		add	al, 22h	; '"'
		cmp	al, 5Ch	; '\'
		jnz	short loc_50E
		cmp	byte ptr [si], 22h ; '"'
		jnz	short loc_50E
		lodsb
		dec	cx

loc_50E:				; CODE XREF: sub_4E9+1Cj sub_4E9+21j
		or	si, si

locret_510:				; CODE XREF: sub_4E9+10j sub_4E9+16j
		retn
sub_4E9		endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_45B

loc_511:				; CODE XREF: sub_45B+3Ej sub_45B+54j ...
		jmp	far ptr	loc_15A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_516:				; CODE XREF: sub_45B:loc_4D2j
		pop	cx
		add	cx, dx
		mov	ds, cs:word_457
		assume ds:dseg
		mov	word_1421F, bx
		inc	bx
		add	bx, bx
		add	bx, bx
		mov	si, sp
		mov	bp, sp
		sub	bp, bx
		jb	short loc_511
		mov	sp, bp
		mov	word_14221, bp
		mov	word_14223, ss

loc_539:				; CODE XREF: sub_45B+EFj
		jcxz	short loc_54C
		mov	[bp+0],	si
		mov	word ptr [bp+2], ss
		add	bp, 4

loc_544:				; CODE XREF: sub_45B+EDj
		lods	byte ptr ss:[si]
		or	al, al
		loopne	loc_544
		jz	short loc_539

loc_54C:				; CODE XREF: sub_45B:loc_539j
		xor	ax, ax
		mov	[bp+0],	ax
		mov	[bp+2],	ax
		jmp	cs:dword_453
; END OF FUNCTION CHUNK	FOR sub_45B

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_559		proc far		; CODE XREF: start+C7P
		mov	es, word ptr dword_14229+2
		assume es:nothing
		xor	di, di
		push	es
		push	word_1422D
		call	sub_12C51
		add	sp, 2
		mov	bx, ax
		pop	es
		mov	word_14225, ax
		mov	word_14227, dx
		push	ds
		mov	ds, dx
		or	ax, dx
		jnz	short loc_582
		jmp	far ptr	loc_15A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_582:				; CODE XREF: sub_559+22j
		xor	ax, ax
		mov	cx, 0FFFFh

loc_587:				; CODE XREF: sub_559+3Bj
		mov	[bx], di
		mov	word ptr [bx+2], es

loc_58C:
		add	bx, 4

loc_58F:
		repne scasb
		cmp	es:[di], al
		jnz	short loc_587
		mov	[bx], ax
		mov	[bx+2],	ax
		pop	ds
		retf
sub_559		endp

seg000		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg001		segment	byte public 'CODE' use16
		assume cs:seg001
		;org 0Dh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_59D		proc far		; CODE XREF: sub_DE8+6C1p sub_DE8+778p ...

arg_0		= word ptr  6

		push	bp

loc_59E:
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_5AB
		call	far ptr	errStackOverflow

loc_5AB:				; CODE XREF: sub_59D+7j
		cmp	word_14A6C, 0FFFFh
		jnz	short loc_5C6
		mov	bx, [bp+arg_0]
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	byte ptr [bx+85Dh], 0C8h ; 'Ш'
		mov	ax, [bp+arg_0]
		mov	word_14A6C, ax

loc_5C6:				; CODE XREF: sub_59D+13j
		pop	bp
		retf
sub_59D		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_5C8		proc far		; CODE XREF: sub_DE8+206p sub_DE8+95Ep ...

arg_0		= word ptr  8

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_5D7
		call	far ptr	errStackOverflow

loc_5D7:				; CODE XREF: sub_5C8+8j
		mov	si, [bp+arg_0]
		cmp	word_14A6C, 0FFFFh
		jz	short loc_644
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+85Ch]
		mov	ah, 0
		cmp	ax, 1		; switch 2 cases
		ja	short loc_63D	; default
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_5FF[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_5FF		dw offset loc_603	; DATA XREF: sub_5C8+32r
		dw offset loc_621	; jump table for switch	statement
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_603:				; CODE XREF: sub_5C8+32j
					; DATA XREF: sub_5C8:off_5FFo
		mov	bx, word_14A6C	; case 0x0
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+85Eh]
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	[bx+862h], ax
		jmp	short loc_63D	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_621:				; CODE XREF: sub_5C8+32j
					; DATA XREF: sub_5C8:off_5FFo
		mov	bx, word_14A6C	; case 0x1
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+860h]
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	[bx+862h], ax

loc_63D:				; CODE XREF: sub_5C8+2Cj sub_5C8+57j
		call	sub_134DF	; default
		mov	sp, bp

loc_644:				; CODE XREF: sub_5C8+17j
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	byte ptr [bx+85Dh], 0C8h ; 'Ш'
		cmp	si, 5
		jnz	short loc_663
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	byte ptr [bx+85Dh], 1

loc_663:				; CODE XREF: sub_5C8+8Cj
		mov	word_14A6C, si
		pop	bp
		pop	si
		retf
sub_5C8		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_66A		proc far		; CODE XREF: sub_3DEF+A2p

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 0Ch
		cmp	word_17D9E, sp
		ja	short loc_67D
		call	far ptr	errStackOverflow

loc_67D:				; CODE XREF: sub_66A+Cj
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 11BCh
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	[bp+var_C], ax
		or	ax, ax
		jge	short loc_6A2
		push	ds
		mov	ax, 11C9h
		push	ax
		call	sub_6927
		add	sp, 4

loc_6A2:				; CODE XREF: sub_66A+29j
		xor	si, si
		jmp	short loc_6F2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6A6:				; CODE XREF: sub_66A+8Bj
		xor	dx, dx
		mov	ax, 180h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		mov	[bx+5F70h], dx
		mov	[bx+5F6Eh], ax
		or	dx, ax
		jnz	short loc_6D4
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_6D4:				; CODE XREF: sub_66A+5Bj
		mov	ax, 180h
		push	ax
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+5F70h]
		push	word ptr [bx+5F6Eh]
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		inc	si

loc_6F2:				; CODE XREF: sub_66A+3Aj
		cmp	si, 3
		jl	short loc_6A6
		xor	si, si
		jmp	short loc_747
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6FB:				; CODE XREF: sub_66A+E0j
		xor	dx, dx
		mov	ax, 60h	; '`'
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		mov	[bx+63DAh], dx
		mov	[bx+63D8h], ax
		or	dx, ax
		jnz	short loc_729
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_729:				; CODE XREF: sub_66A+B0j
		mov	ax, 60h	; '`'
		push	ax
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+63DAh]
		push	word ptr [bx+63D8h]
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		inc	si

loc_747:				; CODE XREF: sub_66A+8Fj
		cmp	si, 3
		jl	short loc_6FB
		xor	di, di
		jmp	short loc_7B8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_750:				; CODE XREF: sub_66A+151j
		xor	si, si
		jmp	short loc_7B2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_754:				; CODE XREF: sub_66A+14Bj
		xor	dx, dx
		mov	ax, 180h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	bx, di
		mov	cx, 5
		shl	bx, cl
		mov	cx, si
		shl	cx, 1
		shl	cx, 1
		add	bx, cx
		mov	[bx+5EC4h], dx
		mov	[bx+5EC2h], ax
		or	dx, ax
		jnz	short loc_78B
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_78B:				; CODE XREF: sub_66A+112j
		mov	ax, 180h
		push	ax
		mov	bx, di
		mov	cx, 5
		shl	bx, cl
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+5EC4h]
		push	word ptr [bx+5EC2h]
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		inc	si

loc_7B2:				; CODE XREF: sub_66A+E8j
		cmp	si, 8
		jl	short loc_754
		inc	di

loc_7B8:				; CODE XREF: sub_66A+E4j
		cmp	di, 4
		jl	short loc_750
		xor	di, di
		jmp	short loc_829
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7C1:				; CODE XREF: sub_66A+1C2j
		xor	si, si
		jmp	short loc_823
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7C5:				; CODE XREF: sub_66A+1BCj
		xor	dx, dx
		mov	ax, 60h	; '`'
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	bx, di
		mov	cx, 5
		shl	bx, cl
		mov	cx, si
		shl	cx, 1
		shl	cx, 1
		add	bx, cx
		mov	[bx+5E42h], dx
		mov	[bx+5E40h], ax
		or	dx, ax
		jnz	short loc_7FC
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_7FC:				; CODE XREF: sub_66A+183j
		mov	ax, 60h	; '`'
		push	ax
		mov	bx, di
		mov	cx, 5
		shl	bx, cl
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+5E42h]
		push	word ptr [bx+5E40h]
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		inc	si

loc_823:				; CODE XREF: sub_66A+159j
		cmp	si, 8
		jl	short loc_7C5
		inc	di

loc_829:				; CODE XREF: sub_66A+155j
		cmp	di, 4
		jl	short loc_7C1
		xor	di, di
		jmp	short loc_8A2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_832:				; CODE XREF: sub_66A+23Bj
		xor	si, si
		jmp	short loc_89C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_836:				; CODE XREF: sub_66A+235j
		xor	dx, dx
		mov	ax, 180h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		push	dx
		push	ax
		mov	ax, di
		mov	dx, 0Ch
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		pop	ax
		pop	dx
		mov	[bx+6006h], dx
		mov	[bx+6004h], ax
		or	dx, ax
		jnz	short loc_873
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_873:				; CODE XREF: sub_66A+1FAj
		mov	ax, 180h
		push	ax
		mov	ax, di
		mov	dx, 0Ch
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+6006h]
		push	word ptr [bx+6004h]
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		inc	si

loc_89C:				; CODE XREF: sub_66A+1CAj
		cmp	si, 3
		jl	short loc_836
		inc	di

loc_8A2:				; CODE XREF: sub_66A+1C6j
		cmp	di, 2
		jl	short loc_832
		xor	di, di
		jmp	short loc_91B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8AB:				; CODE XREF: sub_66A+2B4j
		xor	si, si
		jmp	short loc_915
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8AF:				; CODE XREF: sub_66A+2AEj
		xor	dx, dx
		mov	ax, 60h	; '`'
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		push	dx
		push	ax
		mov	ax, di
		mov	dx, 0Ch
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		pop	ax
		pop	dx
		mov	[bx+644Ch], dx
		mov	[bx+644Ah], ax
		or	dx, ax
		jnz	short loc_8EC
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_8EC:				; CODE XREF: sub_66A+273j
		mov	ax, 60h	; '`'
		push	ax
		mov	ax, di
		mov	dx, 0Ch
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+644Ch]
		push	word ptr [bx+644Ah]
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		inc	si

loc_915:				; CODE XREF: sub_66A+243j
		cmp	si, 3
		jl	short loc_8AF
		inc	di

loc_91B:				; CODE XREF: sub_66A+23Fj
		cmp	di, 2
		jl	short loc_8AB
		xor	di, di
		jmp	short loc_994
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_924:				; CODE XREF: sub_66A+32Dj
		xor	si, si
		jmp	short loc_98E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_928:				; CODE XREF: sub_66A+327j
		xor	dx, dx
		mov	ax, 180h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		push	dx
		push	ax
		mov	ax, di
		mov	dx, 18h
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		pop	ax
		pop	dx
		mov	[bx+611Eh], dx
		mov	[bx+611Ch], ax
		or	dx, ax
		jnz	short loc_965
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_965:				; CODE XREF: sub_66A+2ECj
		mov	ax, 180h
		push	ax
		mov	ax, di
		mov	dx, 18h
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+611Eh]
		push	word ptr [bx+611Ch]
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		inc	si

loc_98E:				; CODE XREF: sub_66A+2BCj
		cmp	si, 6
		jl	short loc_928
		inc	di

loc_994:				; CODE XREF: sub_66A+2B8j
		cmp	di, 2
		jl	short loc_924
		xor	di, di
		jmp	short loc_A0D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_99D:				; CODE XREF: sub_66A+3A6j
		xor	si, si
		jmp	short loc_A07
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9A1:				; CODE XREF: sub_66A+3A0j
		xor	dx, dx
		mov	ax, 60h	; '`'
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		push	dx
		push	ax
		mov	ax, di
		mov	dx, 18h
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		pop	ax
		pop	dx
		mov	[bx+660Ch], dx
		mov	[bx+660Ah], ax
		or	dx, ax
		jnz	short loc_9DE
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_9DE:				; CODE XREF: sub_66A+365j
		mov	ax, 60h	; '`'
		push	ax
		mov	ax, di
		mov	dx, 18h
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+660Ch]
		push	word ptr [bx+660Ah]
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		inc	si

loc_A07:				; CODE XREF: sub_66A+335j
		cmp	si, 6
		jl	short loc_9A1
		inc	di

loc_A0D:				; CODE XREF: sub_66A+331j
		cmp	di, 2
		jl	short loc_99D
		xor	dx, dx
		mov	ax, 180h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word_197DC, dx
		mov	word_197DA, ax
		or	dx, ax
		jnz	short loc_A39
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_A39:				; CODE XREF: sub_66A+3C0j
		mov	ax, 180h
		push	ax
		push	word_197DC
		push	word_197DA
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		xor	dx, dx
		mov	ax, 0A2Ch
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word_19E90, dx
		mov	word_19E8E, ax
		or	dx, ax
		jnz	short loc_A77
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_A77:				; CODE XREF: sub_66A+3FEj
		mov	ax, 0A2Ch
		push	ax
		push	word_19E90
		push	word_19E8E
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		xor	dx, dx
		mov	ax, 0F8h ; 'ј'
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word_1803E, dx
		mov	word_1803C, ax
		or	dx, ax
		jnz	short loc_AB5
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_AB5:				; CODE XREF: sub_66A+43Cj
		mov	ax, 0F8h ; 'ј'
		push	ax
		push	word_1803E
		push	word_1803C
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		xor	dx, dx
		mov	ax, 26Ch
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word_18048, dx
		mov	word_18046, ax
		or	dx, ax
		jnz	short loc_AF3
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_AF3:				; CODE XREF: sub_66A+47Aj
		mov	ax, 26Ch
		push	ax
		push	word_18048
		push	word_18046
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		xor	dx, dx
		mov	ax, 15Ch
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word_1813E, dx
		mov	word_1813C, ax
		or	dx, ax
		jnz	short loc_B31
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_B31:				; CODE XREF: sub_66A+4B8j
		mov	ax, 15Ch
		push	ax
		push	word_1813E
		push	word_1813C
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		xor	dx, dx
		mov	ax, 210h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word_197D8, dx
		mov	word_197D6, ax
		or	dx, ax
		jnz	short loc_B6F
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_B6F:				; CODE XREF: sub_66A+4F6j
		mov	ax, 210h
		push	ax
		push	word_197D8
		push	word_197D6
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		xor	dx, dx
		mov	ax, 118h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word_197AA, dx
		mov	word_197A8, ax
		or	dx, ax
		jnz	short loc_BAD
		push	ds
		mov	ax, 11E2h
		push	ax
		call	sub_6927
		add	sp, 4

loc_BAD:				; CODE XREF: sub_66A+534j
		mov	ax, 118h
		push	ax
		push	word_197AA
		push	word_197A8
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		push	[bp+var_C]
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 11F5h
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	[bp+var_C], ax
		mov	ax, 16h
		push	ax
		push	ds
		mov	ax, 6434h
		push	ax
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		xor	ax, ax
		push	ax
		push	word_1A5F6
		push	word_1A5F4
		push	[bp+var_C]
		call	sub_12B32
		add	sp, 8
		xor	dx, dx
		mov	ax, 7D00h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_8], dx
		mov	[bp+var_A], ax
		or	ax, dx
		jnz	short loc_C32
		push	ds
		mov	ax, 1202h
		push	ax
		call	sub_6927
		add	sp, 4

loc_C32:				; CODE XREF: sub_66A+5B9j
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_4], dx
		mov	[bp+var_6], ax
		or	ax, dx
		jnz	short loc_C58
		push	ds
		mov	ax, 1223h
		push	ax
		call	sub_6927
		add	sp, 4

loc_C58:				; CODE XREF: sub_66A+5DFj
		push	word_1A600
		push	[bp+var_8]
		push	[bp+var_A]
		push	[bp+var_C]
		call	sub_12FF7
		add	sp, 8
		cmp	byte_1A606, 0
		jz	short loc_CBD
		mov	ax, 7D01h
		push	ax
		push	[bp+var_4]
		push	[bp+var_6]
		push	word_1A600
		push	[bp+var_8]
		push	[bp+var_A]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_2], ax
		cmp	ax, 7D00h
		jz	short loc_CA5
		push	ds
		mov	ax, 1245h
		push	ax
		call	sub_6927
		add	sp, 4

loc_CA5:				; CODE XREF: sub_66A+62Cj
		mov	ax, 7D00h
		push	ax
		push	[bp+var_4]
		push	[bp+var_6]
		push	[bp+var_8]
		push	[bp+var_A]
		call	copyCastleStuff
		add	sp, 0Ah

loc_CBD:				; CODE XREF: sub_66A+608j
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		push	[bp+var_8]
		push	[bp+var_A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		push	[bp+var_4]
		push	[bp+var_6]
		call	sub_12481
		add	sp, 4
		push	[bp+var_8]
		push	[bp+var_A]
		call	sub_12481
		add	sp, 4
		push	[bp+var_C]
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		call	sub_4540
		add	sp, 4
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_66A		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_D27		proc far		; CODE XREF: sub_DE8+349p
					; sub_23BE+323p
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_D35
		call	far ptr	errStackOverflow

loc_D35:				; CODE XREF: sub_D27+7j
		cmp	byte_149D4, 0
		jz	short loc_D95
		mov	bx, word_19E86
		shl	bx, 1
		mov	bx, [bx+842h]
		shl	bx, 1
		shl	bx, 1
		mov	ax, word_1A596
		add	ax, 2
		mov	cx, 5
		shl	ax, cl
		add	bx, ax
		push	word ptr [bx+5E42h]
		push	word ptr [bx+5E40h]
		mov	bx, word_19E86
		shl	bx, 1
		mov	bx, [bx+842h]
		shl	bx, 1
		shl	bx, 1
		mov	ax, word_1A596
		add	ax, 2
		shl	ax, cl
		add	bx, ax
		push	word ptr [bx+5EC4h]
		push	word ptr [bx+5EC2h]
		mov	ax, word_1A5A8
		add	ax, 8
		push	ax
		mov	ax, word_1A5A6
		inc	ax
		push	ax
		call	sub_4A9D
		add	sp, 0Ch
		jmp	short loc_DE6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D95:				; CODE XREF: sub_D27+13j
		mov	bx, word_19E86
		shl	bx, 1
		mov	bx, [bx+842h]
		shl	bx, 1
		shl	bx, 1
		mov	ax, word_1A596
		mov	cx, 5
		shl	ax, cl
		add	bx, ax
		push	word ptr [bx+5E42h]
		push	word ptr [bx+5E40h]
		mov	bx, word_19E86
		shl	bx, 1
		mov	bx, [bx+842h]
		shl	bx, 1
		shl	bx, 1
		mov	ax, word_1A596
		shl	ax, cl
		add	bx, ax
		push	word ptr [bx+5EC4h]
		push	word ptr [bx+5EC2h]
		mov	ax, word_1A5A8
		add	ax, 8
		push	ax
		mov	ax, word_1A5A6
		inc	ax
		push	ax
		call	sub_4A9D
		add	sp, 0Ch

loc_DE6:				; CODE XREF: sub_D27+6Cj
		pop	bp
		retf
sub_D27		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_DE8		proc far		; CODE XREF: sub_3DEF+1E1p

var_30		= word ptr -30h
var_2D		= byte ptr -2Dh
var_2C		= byte ptr -2Ch
var_2B		= word ptr -2Bh
var_29		= byte ptr -29h
var_28		= byte ptr -28h
var_27		= word ptr -27h
var_25		= byte ptr -25h
var_24		= byte ptr -24h
var_23		= byte ptr -23h
var_22		= word ptr -22h
var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_1C		= word ptr -1Ch
var_1A		= word ptr -1Ah
var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_B		= byte ptr -0Bh
var_A		= byte ptr -0Ah
var_9		= byte ptr -9
var_8		= byte ptr -8
var_7		= byte ptr -7
var_6		= byte ptr -6
var_5		= byte ptr -5
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 30h
		cmp	word_17D9E, sp
		ja	short loc_DFB
		call	far ptr	errStackOverflow

loc_DFB:				; CODE XREF: sub_DE8+Cj
		mov	[bp+var_2], 0
		mov	[bp+var_4], 0
		mov	word_19E8A, 0
		mov	word_19E88, 0
		call	sub_68C6
		push	word_197A2
		call	sub_11BBC
		inc	sp
		inc	sp
		mov	word_1A622, 0
		mov	word_14942, 50h	; 'P'
		mov	[bp+var_16], 0
		mov	[bp+var_24], 0
		mov	[bp+var_14], 0
		mov	[bp+var_23], 0
		mov	word_1A596, 0
		mov	word_19E86, 0Ah
		mov	word_197A6, 0
		mov	word_1A13A, 0
		mov	word_1A5F2, 0
		mov	byte_149E2, 0
		mov	word_1A13C, 0
		mov	word_149E4, 0
		xor	di, di
		mov	si, di
		jmp	short loc_E84
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E74:				; CODE XREF: sub_DE8+9Fj
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	word ptr [bx+6466h], 0
		inc	si

loc_E84:				; CODE XREF: sub_DE8+8Aj
		cmp	si, 32h	; '2'
		jl	short loc_E74

loc_E89:				; CODE XREF: sub_DE8+1506j
					; sub_DE8+159Fj ...
		cmp	[bp+var_24], 0
		jz	short loc_E92
		jmp	loc_239A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E92:				; CODE XREF: sub_DE8+A5j
		cmp	byte_18044, 0
		jnz	short loc_E9C
		jmp	loc_F44
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E9C:				; CODE XREF: sub_DE8+AFj
		call	sub_7D5D
		mov	ax, word_18234
		cmp	ax, word_14968
		jge	short loc_EB3
		xor	di, di
		mov	byte_149D1, 1
		jmp	short loc_EB8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EB3:				; CODE XREF: sub_DE8+C0j
		mov	byte_149D1, 0

loc_EB8:				; CODE XREF: sub_DE8+C9j
		mov	ax, word_18234
		cmp	ax, word_1496A
		jle	short loc_ECA
		xor	di, di
		mov	byte_149D2, 1
		jmp	short loc_ECF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_ECA:				; CODE XREF: sub_DE8+D7j
		mov	byte_149D2, 0

loc_ECF:				; CODE XREF: sub_DE8+E0j
		mov	ax, word_197E2
		cmp	ax, word_1496C
		jge	short loc_EE1
		xor	di, di
		mov	byte_149D6, 1
		jmp	short loc_EEB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EE1:				; CODE XREF: sub_DE8+EEj
		mov	byte_149D6, 0
		mov	byte_149DB, 0

loc_EEB:				; CODE XREF: sub_DE8+F7j
		cmp	word_1496E, 0
		jnz	short loc_F15
		cmp	byte_17E3A, 0
		jz	short loc_F02
		xor	di, di
		mov	byte_149D3, 1
		jmp	short loc_F0C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F02:				; CODE XREF: sub_DE8+10Fj
		mov	byte_149D3, 0
		mov	byte_149E0, 0

loc_F0C:				; CODE XREF: sub_DE8+118j
		cmp	byte_1A104, 0
		jnz	short loc_F36
		jmp	short loc_F3F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F15:				; CODE XREF: sub_DE8+108j
		cmp	byte_1A104, 0
		jz	short loc_F25
		xor	di, di
		mov	byte_149D3, 1
		jmp	short loc_F2F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F25:				; CODE XREF: sub_DE8+132j
		mov	byte_149D3, 0
		mov	byte_149E0, 0

loc_F2F:				; CODE XREF: sub_DE8+13Bj
		cmp	byte_17E3A, 0
		jz	short loc_F3F

loc_F36:				; CODE XREF: sub_DE8+129j
		xor	di, di
		mov	byte_149D4, 1
		jmp	short loc_F44
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F3F:				; CODE XREF: sub_DE8+12Bj sub_DE8+14Cj
		mov	byte_149D4, 0

loc_F44:				; CODE XREF: sub_DE8+B1j sub_DE8+155j
		mov	al, 0
		mov	[bp+var_8], al
		mov	[bp+var_7], al
		mov	[bp+var_A], al
		mov	[bp+var_9], al
		mov	[bp+var_B], al
		mov	al, 0
		mov	[bp+var_5], al
		mov	[bp+var_6], al
		cmp	word_197A2, 8
		jge	short loc_F6B
		call	sub_615A
		jmp	short loc_F77
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F6B:				; CODE XREF: sub_DE8+17Aj
		cmp	word_197A2, 8
		jl	short loc_F77
		call	sub_62E4

loc_F77:				; CODE XREF: sub_DE8+181j sub_DE8+188j
		mov	al, byte_19FFE
		mov	ah, 0
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	al, byte_1841B
		mov	ah, 0
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		cmp	byte_19FFE, 0
		jnz	short loc_F9D
		mov	ax, 1
		jmp	short loc_F9F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F9D:				; CODE XREF: sub_DE8+1AEj
		xor	ax, ax

loc_F9F:				; CODE XREF: sub_DE8+1B3j
		mov	byte_19FFE, al
		cmp	byte_1841B, 0
		jnz	short loc_FAE
		mov	ax, 1
		jmp	short loc_FB0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FAE:				; CODE XREF: sub_DE8+1BFj
		xor	ax, ax

loc_FB0:				; CODE XREF: sub_DE8+1C4j
		mov	byte_1841B, al
		cmp	word_1A5BA, 0Ah
		jle	short loc_FC4
		mov	word_1A5BA, 0
		dec	word_19E84

loc_FC4:				; CODE XREF: sub_DE8+1D0j
		cmp	word_19E84, 0
		jge	short loc_FF3
		call	sub_10379
		mov	byte_1841A, 1
		mov	word_19E84, 0
		cmp	byte_1A7C8, 0
		jnz	short loc_FF3
		cmp	byte_18141, 2
		jz	short loc_FF3
		mov	ax, 7
		push	ax
		push	cs
		call	near ptr sub_5C8
		inc	sp
		inc	sp

loc_FF3:				; CODE XREF: sub_DE8+1E1j sub_DE8+1F8j ...
		call	sub_6989
		cmp	byte_1A1B8, 0
		jnz	short loc_101A
		cmp	byte_1872E, 0
		jnz	short loc_101A
		call	sub_12FD1
		mov	bx, 32h	; '2'
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_101A
		mov	byte_1872E, 1

loc_101A:				; CODE XREF: sub_DE8+215j sub_DE8+21Cj ...
		mov	al, byte_1872E
		mov	ah, 0
		dec	ax
		cmp	ax, 4		; switch 5 cases
		ja	short loc_1054	; default
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_102E[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_102E	dw offset loc_103F	; DATA XREF: sub_DE8+241r
		dw offset loc_1038	; jump table for switch	statement
		dw offset loc_1038
		dw offset loc_103F
		dw offset loc_104A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1038:				; CODE XREF: sub_DE8+241j
					; DATA XREF: sub_DE8:off_102Eo
		mov	byte_18140, 2	; case 0x1
		jmp	short loc_1044
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_103F:				; CODE XREF: sub_DE8+241j
					; DATA XREF: sub_DE8:off_102Eo
		mov	byte_18140, 1	; case 0x0

loc_1044:				; CODE XREF: sub_DE8+255j
		inc	byte_1872E
		jmp	short loc_1054	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_104A:				; CODE XREF: sub_DE8+241j
					; DATA XREF: sub_DE8:off_102Eo
		mov	byte_18140, 0	; case 0x4
		mov	byte_1872E, 0

loc_1054:				; CODE XREF: sub_DE8+23Bj sub_DE8+260j
		cmp	byte_1841A, 0	; default
		jnz	short loc_105E
		jmp	loc_10FA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_105E:				; CODE XREF: sub_DE8+271j
		call	sub_4B81
		mov	al, byte_1841A
		mov	ah, 0
		cmp	ax, 0Bh		; switch 12 cases
		ja	short loc_10A0	; default
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_1076[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_1076	dw offset loc_109A	; DATA XREF: sub_DE8+289r
		dw offset loc_109A	; jump table for switch	statement
		dw offset loc_1094
		dw offset loc_1094
		dw offset loc_108E
		dw offset loc_108E
		dw offset loc_108E
		dw offset loc_108E
		dw offset loc_1094
		dw offset loc_1094
		dw offset loc_109A
		dw offset loc_109A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_108E:				; CODE XREF: sub_DE8+289j
					; DATA XREF: sub_DE8:off_1076o
		mov	[bp+var_25], 2	; case 0x4
		jmp	short loc_10A4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1094:				; CODE XREF: sub_DE8+289j
					; DATA XREF: sub_DE8:off_1076o
		mov	[bp+var_25], 1	; case 0x2
		jmp	short loc_10A4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_109A:				; CODE XREF: sub_DE8+289j
					; DATA XREF: sub_DE8:off_1076o
		mov	[bp+var_25], 0	; case 0x0
		jmp	short loc_10A4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10A0:				; CODE XREF: sub_DE8+283j
		mov	[bp+var_25], 3	; default

loc_10A4:				; CODE XREF: sub_DE8+2AAj sub_DE8+2B0j ...
		cmp	[bp+var_25], 3
		jnb	short loc_10E4
		mov	al, [bp+var_25]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+63DAh]
		push	word ptr [bx+63D8h]
		mov	al, [bp+var_25]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+5F70h]
		push	word ptr [bx+5F6Eh]
		mov	ax, word_1A5A8
		add	ax, 8
		push	ax
		mov	ax, word_1A5A6
		inc	ax
		push	ax
		call	sub_4A9D
		add	sp, 0Ch

loc_10E4:				; CODE XREF: sub_DE8+2C0j
		inc	byte_1841A
		cmp	byte_1841A, 32h	; '2'
		ja	short loc_10F2
		jmp	loc_22D8	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10F2:				; CODE XREF: sub_DE8+305j
		mov	[bp+var_14], 0
		jmp	loc_239A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10FA:				; CODE XREF: sub_DE8+273j
		cmp	byte_149E1, 0
		jz	short loc_1104
		jmp	loc_2206
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1104:				; CODE XREF: sub_DE8+317j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		call	sub_4B81
		cmp	byte_149E2, 0
		jnz	short loc_1137
		push	cs
		call	near ptr sub_D27
		jmp	loc_11EE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1137:				; CODE XREF: sub_DE8+346j
		cmp	word_1A13C, 0
		jnz	short loc_114A
		cmp	byte_149E2, 1
		jnz	short loc_114A
		call	sub_103B6

loc_114A:				; CODE XREF: sub_DE8+354j sub_DE8+35Bj
		mov	ax, word_1A596
		mov	dx, 18h
		mul	dx
		mov	bx, ax
		mov	ax, word_1A13C
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+660Ch]
		push	word ptr [bx+660Ah]
		mov	ax, word_1A596
		mov	dx, 18h
		mul	dx
		mov	bx, ax
		mov	ax, word_1A13C
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+611Eh]
		push	word ptr [bx+611Ch]
		mov	ax, word_1A5A8
		add	ax, 8
		push	ax
		mov	ax, word_1A5A6
		inc	ax
		push	ax
		call	sub_4A9D
		add	sp, 0Ch
		inc	word_1A13C
		cmp	byte_149D1, 0
		jnz	short loc_11A6
		cmp	byte_149D2, 0
		jz	short loc_11C0

loc_11A6:				; CODE XREF: sub_DE8+3B5j
		cmp	word_1A13C, 5
		jle	short loc_11C0
		mov	byte_149E2, 0
		mov	word_1A13C, 0
		mov	word_149E4, 0
		xor	di, di

loc_11C0:				; CODE XREF: sub_DE8+3BCj sub_DE8+3C3j
		cmp	byte_149D3, 0
		jnz	short loc_11CE
		cmp	byte_149D4, 0
		jz	short loc_11E1

loc_11CE:				; CODE XREF: sub_DE8+3DDj
		mov	byte_149E2, 0
		mov	word_1A13C, 0
		mov	word_149E4, 0
		xor	di, di

loc_11E1:				; CODE XREF: sub_DE8+3E4j
		cmp	word_1A13C, 5
		jle	short loc_11EE
		mov	word_1A13C, 5

loc_11EE:				; CODE XREF: sub_DE8+34Cj sub_DE8+3FEj
		xor	ax, ax
		mov	[bp+var_E], ax
		mov	word_1A5F2, ax
		cmp	byte_149D3, 0
		jz	short loc_1258
		cmp	byte_149E0, 0
		jnz	short loc_1258
		cmp	word_1A13A, ax
		jnz	short loc_1258
		cmp	word_197A6, ax
		jnz	short loc_1258
		cmp	byte_149D3, 0
		jz	short loc_121B
		mov	[bp+var_8], 1

loc_121B:				; CODE XREF: sub_DE8+42Dj
		mov	byte_149E0, 1
		xor	di, di
		mov	ax, word_1A5A8
		cmp	ax, word_14942
		jz	short loc_123D
		cmp	word_1A5AC, di
		jz	short loc_123D
		mov	ax, word_1A5B0
		add	ax, 0FFF6h
		cmp	ax, word_1A5AC
		jnz	short loc_1258

loc_123D:				; CODE XREF: sub_DE8+441j sub_DE8+447j
		mov	[bp+var_E], 1
		mov	word_197A6, 1
		mov	word_183A0, 0
		mov	word_19E86, 0Bh
		dec	word_19E84

loc_1258:				; CODE XREF: sub_DE8+413j sub_DE8+41Aj ...
		cmp	[bp+var_E], 0
		jz	short loc_1261
		jmp	loc_12F0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1261:				; CODE XREF: sub_DE8+474j
		xor	ax, ax
		mov	[bp+var_10], ax
		mov	[bp+var_12], ax
		cmp	word_1A596, 1
		jnz	short loc_1287
		push	ss
		lea	ax, [bp+var_2B]
		push	ax
		push	ss
		lea	ax, [bp+var_27]
		push	ax
		call	sub_A08D
		add	sp, 8
		mov	[bp+var_2C], al
		jmp	short loc_129C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1287:				; CODE XREF: sub_DE8+486j
		push	ss
		lea	ax, [bp+var_2B]
		push	ax
		push	ss
		lea	ax, [bp+var_27]
		push	ax
		call	sub_9F9A
		add	sp, 8
		mov	[bp+var_2C], al

loc_129C:				; CODE XREF: sub_DE8+49Dj
		cmp	byte ptr [bp+var_2B], 0
		jz	short loc_12B5
		cmp	word_1A596, 1
		jnz	short loc_12B0
		mov	[bp+var_12], 1
		jmp	short loc_12B5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12B0:				; CODE XREF: sub_DE8+4BFj
		mov	[bp+var_10], 1

loc_12B5:				; CODE XREF: sub_DE8+4B8j sub_DE8+4C6j
		cmp	byte_149D2, 0
		jz	short loc_12C1
		mov	[bp+var_12], 0

loc_12C1:				; CODE XREF: sub_DE8+4D2j
		cmp	byte_149D1, 0
		jnz	short loc_12CB
		jmp	loc_12D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12CB:				; CODE XREF: sub_DE8+4DEj
		mov	[bp+var_10], 0

loc_12D0:				; CODE XREF: sub_DE8+4E0j
		cmp	byte_149D2, 0
		jnz	short loc_12F0
		cmp	byte_149D1, 0
		jnz	short loc_12F0
		cmp	[bp+var_12], 0
		jnz	short loc_12EA
		cmp	[bp+var_10], 0
		jz	short loc_12F0

loc_12EA:				; CODE XREF: sub_DE8+4FAj
		mov	word_19E86, 0Ah

loc_12F0:				; CODE XREF: sub_DE8+476j sub_DE8+4EDj ...
		cmp	byte_149D2, 0
		jz	short loc_12FB
		mov	[bp+var_9], 1

loc_12FB:				; CODE XREF: sub_DE8+50Dj
		cmp	byte_149D1, 0
		jz	short loc_1306
		mov	[bp+var_A], 1

loc_1306:				; CODE XREF: sub_DE8+518j
		cmp	byte_149D2, 0
		jnz	short loc_1313
		cmp	[bp+var_10], 0
		jz	short loc_1388

loc_1313:				; CODE XREF: sub_DE8+523j
		xor	di, di
		inc	word_1A5A6
		call	sub_9C58
		or	ax, ax
		jz	short loc_1326
		dec	word_1A5A6

loc_1326:				; CODE XREF: sub_DE8+538j
		mov	word_1A596, 0
		cmp	word_197A6, 0
		jz	short loc_1336
		jmp	loc_1427
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1336:				; CODE XREF: sub_DE8+549j
		cmp	word_1A13A, 0
		jz	short loc_1340
		jmp	loc_1427
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1340:				; CODE XREF: sub_DE8+553j
		cmp	byte_149D2, 0
		jnz	short loc_134A
		jmp	loc_1427
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_134A:				; CODE XREF: sub_DE8+55Dj
		inc	word_19E86
		cmp	word_19E86, 0Ah
		jl	short loc_1371
		mov	word_19E86, 0
		cmp	byte_1A13E, 0
		jz	short loc_136D
		mov	ax, 32h	; '2'
		push	ax
		call	sub_134B3
		inc	sp
		inc	sp

loc_136D:				; CODE XREF: sub_DE8+578j
		mov	[bp+var_23], 1

loc_1371:				; CODE XREF: sub_DE8+56Bj
		cmp	word_19E86, 5
		jz	short loc_137B
		jmp	loc_140D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_137B:				; CODE XREF: sub_DE8+58Ej
		cmp	byte_1A13E, 0
		jnz	short loc_1385
		jmp	loc_1409
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1385:				; CODE XREF: sub_DE8+598j
		jmp	loc_13FE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1388:				; CODE XREF: sub_DE8+529j
		cmp	byte_149D1, 0
		jnz	short loc_1398
		cmp	[bp+var_12], 0
		jnz	short loc_1398
		jmp	loc_1413
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1398:				; CODE XREF: sub_DE8+5A5j sub_DE8+5ABj
		xor	di, di
		dec	word_1A5A6
		call	sub_9D17
		or	ax, ax
		jz	short loc_13AB
		inc	word_1A5A6

loc_13AB:				; CODE XREF: sub_DE8+5BDj
		mov	word_1A596, 1
		cmp	word_197A6, 0
		jz	short loc_13BB
		jmp	loc_1427
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13BB:				; CODE XREF: sub_DE8+5CEj
		cmp	word_1A13A, 0
		jnz	short loc_1427
		cmp	byte_149D1, 0
		jz	short loc_1427
		inc	word_19E86
		cmp	word_19E86, 0Ah
		jl	short loc_13F0
		mov	word_19E86, 0
		cmp	byte_1A13E, 0
		jz	short loc_13EC
		mov	ax, 32h	; '2'
		push	ax
		call	sub_134B3
		inc	sp
		inc	sp

loc_13EC:				; CODE XREF: sub_DE8+5F7j
		mov	[bp+var_23], 1

loc_13F0:				; CODE XREF: sub_DE8+5EAj
		cmp	word_19E86, 5
		jnz	short loc_140D
		cmp	byte_1A13E, 0
		jz	short loc_1409

loc_13FE:				; CODE XREF: sub_DE8:loc_1385j
		mov	ax, 32h	; '2'
		push	ax
		call	sub_134B3
		inc	sp
		inc	sp

loc_1409:				; CODE XREF: sub_DE8+59Aj sub_DE8+614j
		mov	[bp+var_23], 1

loc_140D:				; CODE XREF: sub_DE8+590j sub_DE8+60Dj
		inc	word_1A5BA
		jmp	short loc_1427
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1413:				; CODE XREF: sub_DE8+5ADj
		cmp	word_197A6, 0
		jnz	short loc_1427
		cmp	word_1A13A, 0
		jnz	short loc_1427
		mov	word_19E86, 0Ah

loc_1427:				; CODE XREF: sub_DE8+54Bj sub_DE8+555j ...
		cmp	word_197A6, 0
		jnz	short loc_1431
		jmp	loc_14AE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1431:				; CODE XREF: sub_DE8+644j
		mov	ax, word_1A5A8
		mov	[bp+var_30], ax
		mov	bx, word_183A0
		shl	bx, 1
		mov	ax, [bx+826h]
		add	word_1A5A8, ax
		inc	word_183A0
		cmp	word_183A0, 7
		jle	short loc_145C
		mov	word_197A6, 0
		mov	word_1A5F2, 1

loc_145C:				; CODE XREF: sub_DE8+666j
		cmp	word_1A596, 1
		jnz	short loc_146D
		call	sub_9EB2
		mov	[bp+var_2D], al
		jmp	short loc_1475
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_146D:				; CODE XREF: sub_DE8+679j
		call	sub_9DDA
		mov	[bp+var_2D], al

loc_1475:				; CODE XREF: sub_DE8+683j
		cmp	[bp+var_2D], 0
		jz	short loc_14AE
		cmp	[bp+var_2D], 2
		jnz	short loc_1487
		mov	ax, [bp+var_30]
		mov	word_1A5A8, ax

loc_1487:				; CODE XREF: sub_DE8+697j
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		mov	cx, 4
		shl	ax, cl
		mov	word_1A5A8, ax
		mov	word_197A6, 0
		mov	word_1A5F2, 1
		mov	ax, 1
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_14AE:				; CODE XREF: sub_DE8+646j sub_DE8+691j
		cmp	word_1A13A, 0
		jnz	short loc_14B8
		jmp	loc_1565
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_14B8:				; CODE XREF: sub_DE8+6CBj
		cmp	word_18040, 6
		jge	short loc_14D3
		mov	bx, word_18040
		shl	bx, 1
		mov	ax, [bx+836h]
		add	word_1A5A8, ax
		inc	word_18040
		jmp	short loc_14DC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_14D3:				; CODE XREF: sub_DE8+6D5j
		add	word_1A5A8, 10h
		inc	word_149E4

loc_14DC:				; CODE XREF: sub_DE8+6E9j
		cmp	word_1A596, 1
		jnz	short loc_14FA
		push	ss
		lea	ax, [bp+var_2B]
		push	ax
		push	ss
		lea	ax, [bp+var_27]
		push	ax
		call	sub_A08D
		add	sp, 8
		mov	[bp+var_2C], al
		jmp	short loc_150F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_14FA:				; CODE XREF: sub_DE8+6F9j
		push	ss
		lea	ax, [bp+var_2B]
		push	ax
		push	ss
		lea	ax, [bp+var_27]
		push	ax
		call	sub_9F9A
		add	sp, 8
		mov	[bp+var_2C], al

loc_150F:				; CODE XREF: sub_DE8+710j
		cmp	[bp+var_2C], 0
		jz	short loc_1565
		mov	word_1A13A, 0
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		mov	cx, 4
		shl	ax, cl
		mov	word_1A5A8, ax
		cmp	byte ptr [bp+var_27], 0
		jz	short loc_1536
		sub	word_1A5A8, bx

loc_1536:				; CODE XREF: sub_DE8+748j
		cmp	word_149E4, 5
		jle	short loc_1547
		mov	byte_149E2, 1
		sub	word_19E84, 0Ah

loc_1547:				; CODE XREF: sub_DE8+753j
		mov	word_149E4, 0
		cmp	byte_18141, 2
		jnz	short loc_155B
		cmp	byte_149E2, 0
		jnz	short loc_1565

loc_155B:				; CODE XREF: sub_DE8+76Aj
		mov	ax, 1
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_1565:				; CODE XREF: sub_DE8+6CDj sub_DE8+72Bj ...
		cmp	di, 64h	; 'd'
		jl	short loc_1595
		cmp	word_1A13A, 0
		jnz	short loc_1578
		cmp	byte_149E2, 0
		jz	short loc_157C

loc_1578:				; CODE XREF: sub_DE8+787j
		xor	di, di
		jmp	short loc_1596
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_157C:				; CODE XREF: sub_DE8+78Ej
		cmp	di, 64h	; 'd'
		jnz	short loc_158B
		mov	ax, 1
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_158B:				; CODE XREF: sub_DE8+797j
		mov	byte_149E2, 2
		mov	di, 65h	; 'e'
		jmp	short loc_1596
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1595:				; CODE XREF: sub_DE8+780j
		inc	di

loc_1596:				; CODE XREF: sub_DE8+792j sub_DE8+7ABj
		cmp	word_197A6, 0
		jz	short loc_15A0
		jmp	loc_1614
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_15A0:				; CODE XREF: sub_DE8+7B3j
		cmp	word_1A13A, 0
		jnz	short loc_1614
		cmp	word_1A596, 1
		jnz	short loc_15C5
		push	ss
		lea	ax, [bp+var_2B]
		push	ax
		push	ss
		lea	ax, [bp+var_27]
		push	ax
		call	sub_A08D
		add	sp, 8
		mov	[bp+var_2C], al
		jmp	short loc_15DA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_15C5:				; CODE XREF: sub_DE8+7C4j
		push	ss
		lea	ax, [bp+var_2B]
		push	ax
		push	ss
		lea	ax, [bp+var_27]
		push	ax
		call	sub_9F9A
		add	sp, 8
		mov	[bp+var_2C], al

loc_15DA:				; CODE XREF: sub_DE8+7DBj
		cmp	[bp+var_2C], 0
		jnz	short loc_1603
		mov	word_1A13A, 1
		cmp	word_1A5F2, 0
		jz	short loc_15F5
		mov	word_18040, 0
		jmp	short loc_15FB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_15F5:				; CODE XREF: sub_DE8+803j
		mov	word_18040, 6

loc_15FB:				; CODE XREF: sub_DE8+80Bj
		mov	word_19E86, 0Ch
		jmp	short loc_1614
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1603:				; CODE XREF: sub_DE8+7F6j
		cmp	word_1A5F2, 0
		jz	short loc_1614
		mov	ax, 1
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_1614:				; CODE XREF: sub_DE8+7B5j sub_DE8+7BDj ...
		cmp	byte_149D4, 0
		jnz	short loc_161E
		jmp	loc_17D9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_161E:				; CODE XREF: sub_DE8+831j
		cmp	word_197A6, 0
		jz	short loc_1628
		jmp	loc_17D9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1628:				; CODE XREF: sub_DE8+83Bj
		cmp	word_1A13A, 0
		jz	short loc_1632
		jmp	loc_17D9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1632:				; CODE XREF: sub_DE8+845j
		mov	[bp+var_7], 1
		xor	di, di
		mov	byte_149E2, 0
		mov	word_1A13C, di
		mov	word_149E4, di
		mov	byte ptr [bp+var_27+1],	0
		cmp	word_1A596, 1
		jnz	short loc_1662
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A83B
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_1672
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1662:				; CODE XREF: sub_DE8+866j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A79E
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_1672:				; CODE XREF: sub_DE8+878j
		cmp	byte ptr [bp+var_2B+1],	0
		jnz	short loc_167B
		jmp	loc_174B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_167B:				; CODE XREF: sub_DE8+88Ej
		mov	byte ptr [bp+var_27+1],	1
		les	bx, dword_18398
		add	bx, [bp+var_22]
		mov	al, es:[bx]
		mov	[bp+var_28], al
		mov	al, [bp+var_28]
		cmp	al, byte_1A7FA
		jnb	short loc_1698
		jmp	loc_174B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1698:				; CODE XREF: sub_DE8+8ABj
		mov	al, [bp+var_28]
		cmp	al, byte_1A7FB
		jbe	short loc_16A4
		jmp	loc_174B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_16A4:				; CODE XREF: sub_DE8+8B7j
		xor	si, si
		mov	[bp+var_1C], 0FFFFh
		jmp	short loc_16C3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_16AD:				; CODE XREF: sub_DE8+8DEj
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		cmp	word ptr [bx+6466h], 0
		jnz	short loc_16C2
		mov	[bp+var_1C], si
		jmp	short loc_16C8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_16C2:				; CODE XREF: sub_DE8+8D3j
		inc	si

loc_16C3:				; CODE XREF: sub_DE8+8C3j
		cmp	si, 32h	; '2'
		jl	short loc_16AD

loc_16C8:				; CODE XREF: sub_DE8+8D8j
		cmp	[bp+var_1C], 0FFFFh
		jnz	short loc_16D1
		jmp	loc_174B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_16D1:				; CODE XREF: sub_DE8+8E4j
		xor	si, si
		mov	[bp+var_18], si
		jmp	short loc_1700
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_16D8:				; CODE XREF: sub_DE8+91Bj
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		cmp	word ptr [bx+6466h], 0
		jz	short loc_16FF
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, [bx+6464h]
		cmp	ax, [bp+var_22]
		jnz	short loc_16FF
		mov	[bp+var_18], 1

loc_16FF:				; CODE XREF: sub_DE8+8FEj sub_DE8+910j
		inc	si

loc_1700:				; CODE XREF: sub_DE8+8EEj
		cmp	si, 32h	; '2'
		jl	short loc_16D8
		cmp	[bp+var_18], 0
		jnz	short loc_174B
		mov	al, [bp+var_28]
		push	ax
		mov	ax, [bp+var_1C]
		mov	dx, 6
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+6468h], al
		mov	ax, [bp+var_22]
		push	ax
		mov	ax, [bp+var_1C]
		mov	dx, 6
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+6464h], ax
		mov	ax, [bp+var_1C]
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	word ptr [bx+6466h], 78h ; 'x'
		mov	ax, 8
		push	ax
		push	cs
		call	near ptr sub_5C8
		inc	sp
		inc	sp

loc_174B:				; CODE XREF: sub_DE8+890j sub_DE8+8ADj ...
		cmp	byte ptr [bp+var_27+1],	0
		jz	short loc_1754
		jmp	loc_17D9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1754:				; CODE XREF: sub_DE8+967j
		cmp	word_1A596, 1
		jnz	short loc_176D
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A981
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_177D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_176D:				; CODE XREF: sub_DE8+971j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A8D6
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_177D:				; CODE XREF: sub_DE8+983j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_17D9
		xor	si, si
		mov	[bp+var_1A], 0FFFFh
		jmp	short loc_179D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_178C:				; CODE XREF: sub_DE8+9B8j
		mov	bx, si
		shl	bx, 1
		cmp	word ptr [bx+4488h], 0
		jnz	short loc_179C
		mov	[bp+var_1A], si
		jmp	short loc_17A2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_179C:				; CODE XREF: sub_DE8+9ADj
		inc	si

loc_179D:				; CODE XREF: sub_DE8+9A2j
		cmp	si, 0Ah
		jl	short loc_178C

loc_17A2:				; CODE XREF: sub_DE8+9B2j
		cmp	[bp+var_1A], 0FFFFh
		jz	short loc_17D9
		xor	si, si
		mov	[bp+var_18], si
		jmp	short loc_17C2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_17AF:				; CODE XREF: sub_DE8+9DDj
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+4488h]
		cmp	ax, [bp+var_22]
		jnz	short loc_17C1
		mov	[bp+var_18], 1

loc_17C1:				; CODE XREF: sub_DE8+9D2j
		inc	si

loc_17C2:				; CODE XREF: sub_DE8+9C5j
		cmp	si, 0Ah
		jl	short loc_17AF
		cmp	[bp+var_18], 0
		jnz	short loc_17D9
		mov	ax, [bp+var_22]
		mov	bx, [bp+var_1A]
		shl	bx, 1
		mov	[bx+4488h], ax

loc_17D9:				; CODE XREF: sub_DE8+833j sub_DE8+83Dj ...
		cmp	byte_149D6, 0
		jnz	short loc_17E3
		jmp	loc_1B97
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_17E3:				; CODE XREF: sub_DE8+9F6j
		cmp	byte_149DB, 0
		jz	short loc_17ED
		jmp	loc_1B97
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_17ED:				; CODE XREF: sub_DE8+A00j
		cmp	word_197A6, 0
		jz	short loc_17F7
		jmp	loc_1B97
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_17F7:				; CODE XREF: sub_DE8+A0Aj
		cmp	word_1A13A, 0
		jz	short loc_1801
		jmp	loc_1B97
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1801:				; CODE XREF: sub_DE8+A14j
		mov	[bp+var_B], 1
		mov	byte_149DB, 1
		xor	di, di
		mov	byte_149E2, 0
		mov	word_1A13C, di
		mov	word_149E4, di
		mov	si, di
		jmp	short loc_184D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_181D:				; CODE XREF: sub_DE8+A68j
		cmp	word_1A596, 1
		jnz	short loc_182E
		call	sub_B871
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_1836
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_182E:				; CODE XREF: sub_DE8+A3Aj
		call	sub_B794
		mov	byte ptr [bp+var_2B+1],	al

loc_1836:				; CODE XREF: sub_DE8+A44j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_184C
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		dec	ax
		push	ax
		call	sub_ED95
		inc	sp
		inc	sp
		jmp	short loc_1852
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_184C:				; CODE XREF: sub_DE8+A52j
		inc	si

loc_184D:				; CODE XREF: sub_DE8+A33j
		cmp	si, 0Ah
		jl	short loc_181D

loc_1852:				; CODE XREF: sub_DE8+A62j
		cmp	word_1A596, 1
		jnz	short loc_186B
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A6B6
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_187B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_186B:				; CODE XREF: sub_DE8+A6Fj
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A5D2
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_187B:				; CODE XREF: sub_DE8+A81j
		cmp	byte ptr [bp+var_2B+1],	0
		jnz	short loc_1884
		jmp	loc_19A0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1884:				; CODE XREF: sub_DE8+A97j
		call	sub_11865
		mov	word_19E86, 0Ah
		sub	byte ptr [bp+var_2B+1],	0C8h ; 'Ш'
		mov	byte_149E1, 1
		mov	word_197A4, 0
		mov	ax, word_1A5A6
		mov	word_1A5A4, ax
		mov	ax, word_1A5A8
		mov	word_1A080, ax
		mov	ax, word_1A5AA
		mov	word_19E82, ax
		mov	ax, word_1A5AC
		mov	word_1A514, ax
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+3E8Ah]
		shl	ax, 1
		mov	[bp+var_20], ax
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+3E8Ch]
		mov	[bp+var_1E], ax
		mov	ax, [bp+var_20]
		add	ax, 0FFEEh
		mov	word_1A5AA, ax
		or	ax, ax
		jge	short loc_18EF
		mov	word_1A5AA, 0

loc_18EF:				; CODE XREF: sub_DE8+AFFj
		mov	ax, word_1A5AE
		shl	ax, 1
		add	ax, 0FFDAh
		cmp	ax, word_1A5AA
		jge	short loc_1908
		mov	ax, word_1A5AE
		shl	ax, 1
		add	ax, 0FFDAh
		mov	word_1A5AA, ax

loc_1908:				; CODE XREF: sub_DE8+B13j
		mov	ax, [bp+var_20]
		sub	ax, word_1A5AA
		mov	word_1A5A6, ax
		cmp	word_1A596, 1
		jnz	short loc_191D
		dec	word_1A5A6

loc_191D:				; CODE XREF: sub_DE8+B2Fj
		mov	ax, [bp+var_1E]
		push	ax
		mov	ax, word_14942
		mov	bx, 10h
		cwd
		idiv	bx
		pop	dx
		sub	dx, ax
		mov	word_1A5AC, dx
		or	dx, dx
		jge	short loc_193B
		mov	word_1A5AC, 0

loc_193B:				; CODE XREF: sub_DE8+B4Bj
		mov	ax, word_1A5B0
		add	ax, 0FFF6h
		cmp	ax, word_1A5AC
		jge	short loc_1950
		mov	ax, word_1A5B0
		add	ax, 0FFF6h
		mov	word_1A5AC, ax

loc_1950:				; CODE XREF: sub_DE8+B5Dj
		mov	ax, [bp+var_1E]
		sub	ax, word_1A5AC
		mov	cx, 4
		shl	ax, cl
		mov	word_1A5A8, ax
		mov	ax, word_1A5A6
		mov	word_197AC, ax
		mov	ax, word_1A5A8
		mov	word_1831A, ax
		mov	ax, word_1A5AA
		mov	word_18646, ax
		mov	ax, word_1A5AC
		mov	word_19FFC, ax
		mov	ax, word_19E82
		mov	word_1A5AA, ax
		mov	ax, word_1A514
		mov	word_1A5AC, ax
		mov	ax, word_1A5A4
		mov	word_1A5A6, ax
		mov	ax, word_1A080
		mov	word_1A5A8, ax
		cmp	byte_18141, 0
		jnz	short loc_19A0
		mov	ax, 2
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_19A0:				; CODE XREF: sub_DE8+A99j sub_DE8+BACj
		cmp	word_1A596, 1
		jnz	short loc_19B9
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A236
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_19C9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_19B9:				; CODE XREF: sub_DE8+BBDj
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A184
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_19C9:				; CODE XREF: sub_DE8+BCFj
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	al, es:[bx]
		mov	[bp+var_28], al
		cmp	byte ptr [bp+var_2B+1],	0
		jnz	short loc_19DF
		jmp	loc_1B97
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_19DF:				; CODE XREF: sub_DE8+BF2j
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		add	bx, 0FF88h
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+614Eh], 0
		jz	short loc_19F7
		jmp	loc_1B97
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_19F7:				; CODE XREF: sub_DE8+C0Aj
		sub	byte ptr [bp+var_2B+1],	78h ; 'x'
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+614Dh], 1
		jnz	short loc_1A1F
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	byte ptr [bx+614Dh], 2
		jmp	short loc_1A2F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1A1F:				; CODE XREF: sub_DE8+C23j
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	byte ptr [bx+614Dh], 1

loc_1A2F:				; CODE XREF: sub_DE8+C35j
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+614Dh], 1
		jz	short loc_1A44
		jmp	loc_1AD2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1A44:				; CODE XREF: sub_DE8+C57j
		mov	al, [bp+var_28]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		mov	al, [bx+4285h]
		mov	[bp+var_29], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5632h], 1
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Ch]
		mov	dl, byte ptr [bp+var_2B+1]
		mov	dh, 0
		mov	bx, dx
		shl	bx, 1
		shl	bx, 1
		mov	dl, [bx+614Ch]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+563Fh], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 3
		jz	short loc_1ACF
		jmp	loc_1B77
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1ACF:				; CODE XREF: sub_DE8+CE2j
		jmp	loc_1B5A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1AD2:				; CODE XREF: sub_DE8+C59j
		mov	al, [bp+var_28]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		mov	al, [bx+4284h]
		mov	[bp+var_29], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5632h], 0
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Dh]
		mov	dl, byte ptr [bp+var_2B+1]
		mov	dh, 0
		mov	bx, dx
		shl	bx, 1
		shl	bx, 1
		mov	dl, [bx+614Ch]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+563Fh], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 3
		jnz	short loc_1B77

loc_1B5A:				; CODE XREF: sub_DE8:loc_1ACFj
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5638h], 1

loc_1B77:				; CODE XREF: sub_DE8+CE4j sub_DE8+D70j
		mov	ax, 3
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp
		mov	al, [bp+var_29]
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	es:[bx], al
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_1B97:				; CODE XREF: sub_DE8+9F8j sub_DE8+A02j ...
		cmp	byte_149D7, 0
		jz	short loc_1BCE
		cmp	byte_149D8, 0
		jnz	short loc_1BCE
		mov	byte_149D8, 1
		inc	byte_1493E
		mov	si, 7D0h
		jmp	short loc_1BC3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1BB3:				; CODE XREF: sub_DE8+DDFj
		cmp	byte_1A13E, 0
		jz	short loc_1BC2
		push	si
		call	sub_134B3
		inc	sp
		inc	sp

loc_1BC2:				; CODE XREF: sub_DE8+DD0j
		dec	si

loc_1BC3:				; CODE XREF: sub_DE8+DC9j
		cmp	si, 190h
		jg	short loc_1BB3
		call	sub_134DF

loc_1BCE:				; CODE XREF: sub_DE8+DB4j sub_DE8+DBBj
		cmp	byte_149D9, 0
		jz	short loc_1C0C
		cmp	byte_149DA, 0
		jnz	short loc_1C0C
		mov	byte_149DA, 1
		cmp	byte_1493E, 0
		jz	short loc_1C0C
		dec	byte_1493E
		mov	si, 190h
		jmp	short loc_1C01
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1BF1:				; CODE XREF: sub_DE8+E1Dj
		cmp	byte_1A13E, 0
		jz	short loc_1C00
		push	si
		call	sub_134B3
		inc	sp
		inc	sp

loc_1C00:				; CODE XREF: sub_DE8+E0Ej
		inc	si

loc_1C01:				; CODE XREF: sub_DE8+E07j
		cmp	si, 7D0h
		jl	short loc_1BF1
		call	sub_134DF

loc_1C0C:				; CODE XREF: sub_DE8+DEBj sub_DE8+DF2j ...
		cmp	byte_149DC, 0
		jz	short loc_1C2F
		cmp	byte_149DE, 0
		jnz	short loc_1C2F
		mov	byte_149DE, 1
		mov	[bp+var_6], 1
		cmp	word_14942, 70h	; 'p'
		jge	short loc_1C2F
		add	word_14942, 10h

loc_1C2F:				; CODE XREF: sub_DE8+E29j sub_DE8+E30j ...
		cmp	byte_149DD, 0
		jz	short loc_1C52
		cmp	byte_149DF, 0
		jnz	short loc_1C52
		mov	byte_149DF, 1
		mov	[bp+var_5], 1
		cmp	word_14942, 30h	; '0'
		jle	short loc_1C52
		sub	word_14942, 10h

loc_1C52:				; CODE XREF: sub_DE8+E4Cj sub_DE8+E53j ...
		cmp	byte_149D5, 0
		jnz	short loc_1C5C
		jmp	loc_1D0C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1C5C:				; CODE XREF: sub_DE8+E6Fj sub_DE8+EBAj ...
		call	sub_134DF
		call	sub_6901
		call	sub_8904
		mov	si, ax
		cmp	si, 1
		jnz	short loc_1C7F
		call	sub_103EC
		mov	[bp+var_14], 3
		jmp	loc_239A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1C7F:				; CODE XREF: sub_DE8+E88j
		cmp	si, 2
		jnz	short loc_1C8C
		mov	[bp+var_14], 1
		jmp	loc_239A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1C8C:				; CODE XREF: sub_DE8+E9Aj
		cmp	si, 3
		jnz	short loc_1CA4
		cmp	byte_1A13E, 0
		jnz	short loc_1C9D
		mov	ax, 1
		jmp	short loc_1C9F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1C9D:				; CODE XREF: sub_DE8+EAEj
		xor	ax, ax

loc_1C9F:				; CODE XREF: sub_DE8+EB3j
		mov	byte_1A13E, al
		jmp	short loc_1C5C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1CA4:				; CODE XREF: sub_DE8+EA7j
		cmp	si, 4
		jnz	short loc_1CBC
		cmp	byte_19E8C, 0
		jnz	short loc_1CB5
		mov	ax, 1
		jmp	short loc_1CB7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1CB5:				; CODE XREF: sub_DE8+EC6j
		xor	ax, ax

loc_1CB7:				; CODE XREF: sub_DE8+ECBj
		mov	byte_19E8C, al
		jmp	short loc_1C5C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1CBC:				; CODE XREF: sub_DE8+EBFj
		cmp	si, 5
		jnz	short loc_1CC9
		call	sub_9B11
		jmp	loc_1C5C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1CC9:				; CODE XREF: sub_DE8+ED7j
		cmp	si, 6
		jnz	short loc_1CE2
		cmp	byte_18044, 0
		jnz	short loc_1CDA
		mov	ax, 1
		jmp	short loc_1CDC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1CDA:				; CODE XREF: sub_DE8+EEBj
		xor	ax, ax

loc_1CDC:				; CODE XREF: sub_DE8+EF0j
		mov	byte_18044, al
		jmp	loc_1C5C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1CE2:				; CODE XREF: sub_DE8+EE4j
		cmp	si, 7
		jnz	short loc_1CF5
		mov	ax, 4
		push	ax
		call	sub_7F60
		inc	sp
		inc	sp
		jmp	loc_1C5C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1CF5:				; CODE XREF: sub_DE8+EFDj
		cmp	si, 8
		jnz	short loc_1D02
		call	sub_BAEF
		jmp	loc_1C5C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1D02:				; CODE XREF: sub_DE8+F10j
		call	sub_68C6
		call	sub_F7C1

loc_1D0C:				; CODE XREF: sub_DE8+E71j
		cmp	[bp+var_16], 0
		jz	short loc_1D17
		call	sub_134DF

loc_1D17:				; CODE XREF: sub_DE8+F28j
		cmp	word_1A596, 1
		jnz	short loc_1D30
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_AB80
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_1D40
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1D30:				; CODE XREF: sub_DE8+F34j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_AA28
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_1D40:				; CODE XREF: sub_DE8+F46j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_1D84
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	byte ptr es:[bx], 1
		cmp	byte_1A13E, 0
		jz	short loc_1D76
		cmp	byte_18141, 0
		jnz	short loc_1D76
		call	sub_12FD1
		mov	bx, 7D0h
		cwd
		idiv	bx
		add	dx, 1B58h
		push	dx
		call	sub_134B3
		inc	sp
		inc	sp

loc_1D76:				; CODE XREF: sub_DE8+F6Ej sub_DE8+F75j
		mov	[bp+var_16], 1
		inc	word_1A51A
		call	sub_117EC

loc_1D84:				; CODE XREF: sub_DE8+F5Cj
		cmp	word_1A596, 1
		jnz	short loc_1D9D
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_AE34
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_1DAD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1D9D:				; CODE XREF: sub_DE8+FA1j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_ACDC
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_1DAD:				; CODE XREF: sub_DE8+FB3j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_1DE4
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	byte ptr es:[bx], 1
		les	bx, dword_1839C
		add	bx, [bp+var_22]
		mov	byte ptr es:[bx], 0
		cmp	byte_18141, 0
		jnz	short loc_1DDA
		mov	ax, 5
		push	ax
		push	cs
		call	near ptr sub_5C8
		inc	sp
		inc	sp

loc_1DDA:				; CODE XREF: sub_DE8+FE6j
		add	word_19E84, 0Ah
		call	sub_1182E

loc_1DE4:				; CODE XREF: sub_DE8+FC9j
		cmp	word_1A596, 1
		jnz	short loc_1DFD
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_B120
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_1E0D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1DFD:				; CODE XREF: sub_DE8+1001j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_AF90
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_1E0D:				; CODE XREF: sub_DE8+1013j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_1E38
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	byte ptr es:[bx], 1
		les	bx, dword_1839C
		add	bx, [bp+var_22]
		mov	byte ptr es:[bx], 0
		mov	byte_14941, 32h	; '2'
		mov	byte_1A1B8, 1
		call	sub_10429

loc_1E38:				; CODE XREF: sub_DE8+1029j
		cmp	word_1A596, 1
		jnz	short loc_1E49
		call	sub_9D17
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_1E51
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1E49:				; CODE XREF: sub_DE8+1055j
		call	sub_9C58
		mov	byte ptr [bp+var_2B+1],	al

loc_1E51:				; CODE XREF: sub_DE8+105Fj
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_1E5D
		mov	word_19E84, 0FFFFh

loc_1E5D:				; CODE XREF: sub_DE8+106Dj
		cmp	word_1A596, 1
		jnz	short loc_1E6E
		call	sub_A45B
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_1E76
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1E6E:				; CODE XREF: sub_DE8+107Aj
		call	sub_A2EC
		mov	byte ptr [bp+var_2B+1],	al

loc_1E76:				; CODE XREF: sub_DE8+1084j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_1E82
		mov	word_19E84, 0FFFFh

loc_1E82:				; CODE XREF: sub_DE8+1092j
		cmp	word_1A596, 1
		jnz	short loc_1E93
		call	sub_B3D1
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_1E9B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1E93:				; CODE XREF: sub_DE8+109Fj
		call	sub_B2B4
		mov	byte ptr [bp+var_2B+1],	al

loc_1E9B:				; CODE XREF: sub_DE8+10A9j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_1EA7
		mov	word_19E84, 0FFFFh

loc_1EA7:				; CODE XREF: sub_DE8+10B7j
		cmp	word_1A596, 1
		jnz	short loc_1EB8
		call	sub_B641
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_1EC0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1EB8:				; CODE XREF: sub_DE8+10C4j
		call	sub_B4F2
		mov	byte ptr [bp+var_2B+1],	al

loc_1EC0:				; CODE XREF: sub_DE8+10CEj
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_1ED5
		sub	word_19E84, 5
		mov	ax, 9
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_1ED5:				; CODE XREF: sub_DE8+10DCj
		cmp	word_1A596, 1
		jnz	short loc_1EEE
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A236
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_1EFE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1EEE:				; CODE XREF: sub_DE8+10F2j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A184
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_1EFE:				; CODE XREF: sub_DE8+1104j
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	al, es:[bx]
		mov	[bp+var_28], al
		cmp	byte ptr [bp+var_2B+1],	0
		jnz	short loc_1F14
		jmp	loc_2130
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1F14:				; CODE XREF: sub_DE8+1127j
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		add	bx, 0FF88h
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+614Eh], 0
		jnz	short loc_1F2C
		jmp	loc_2130
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1F2C:				; CODE XREF: sub_DE8+113Fj
		sub	byte ptr [bp+var_2B+1],	78h ; 'x'
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Dh]
		mov	dl, byte ptr [bp+var_2B+1]
		mov	dh, 0
		mov	bx, dx
		shl	bx, 1
		shl	bx, 1
		cmp	al, [bx+614Fh]
		jnz	short loc_1F53
		jmp	loc_2130
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1F53:				; CODE XREF: sub_DE8+1166j
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+614Dh], 1
		jnz	short loc_1F77
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	byte ptr [bx+614Dh], 2
		jmp	short loc_1F87
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1F77:				; CODE XREF: sub_DE8+117Bj
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	byte ptr [bx+614Dh], 1

loc_1F87:				; CODE XREF: sub_DE8+118Dj
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+614Dh], 1
		jz	short loc_1F9C
		jmp	loc_2053
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1F9C:				; CODE XREF: sub_DE8+11AFj
		mov	al, [bp+var_28]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		mov	al, [bx+4285h]
		mov	[bp+var_29], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5632h], 1
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Ch]
		mov	dl, byte ptr [bp+var_2B+1]
		mov	dh, 0
		mov	bx, dx
		shl	bx, 1
		shl	bx, 1
		mov	dl, [bx+614Ch]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+563Fh], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 3
		jnz	short loc_2041
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5638h], 10h

loc_2041:				; CODE XREF: sub_DE8+123Aj
		mov	byte_14940, 1
		cmp	byte_18141, 0
		jz	short loc_2050
		jmp	loc_210E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2050:				; CODE XREF: sub_DE8+1263j
		jmp	loc_2104
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2053:				; CODE XREF: sub_DE8+11B1j
		mov	al, [bp+var_28]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		mov	al, [bx+4284h]
		mov	[bp+var_29], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5632h], 0
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Dh]
		mov	dl, byte ptr [bp+var_2B+1]
		mov	dh, 0
		mov	bx, dx
		shl	bx, 1
		shl	bx, 1
		mov	dl, [bx+614Ch]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+563Fh], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 3
		jnz	short loc_20F8
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5638h], 10h

loc_20F8:				; CODE XREF: sub_DE8+12F1j
		mov	byte_14940, 1
		cmp	byte_18141, 0
		jnz	short loc_210E

loc_2104:				; CODE XREF: sub_DE8:loc_2050j
		mov	ax, 3
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_210E:				; CODE XREF: sub_DE8+1265j
					; sub_DE8+131Aj
		mov	al, [bp+var_29]
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	es:[bx], al
		cmp	byte_18141, 0
		jnz	short loc_212B
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_212B:				; CODE XREF: sub_DE8+1338j
		call	sub_118ED

loc_2130:				; CODE XREF: sub_DE8+1129j
					; sub_DE8+1141j ...
		cmp	word_1A5AA, 1CEh
		jnz	short loc_214C
		cmp	word_1A5AC, 0AAh ; 'Њ'
		jnz	short loc_214C
		cmp	byte_1A51C, 0
		jnz	short loc_214C
		mov	byte_1A51C, 1

loc_214C:				; CODE XREF: sub_DE8+134Ej
					; sub_DE8+1356j ...
		cmp	byte_1A51C, 0
		jz	short loc_2181
		cmp	byte_1A51C, 1
		jnz	short loc_215F
		mov	byte_14941, 28h	; '('

loc_215F:				; CODE XREF: sub_DE8+1370j
		cmp	byte_1A51C, 5Ah	; 'Z'
		jnz	short loc_217D
		cmp	byte_1A1B8, 0
		jz	short loc_2175
		mov	[bp+var_14], 4
		jmp	loc_239A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2175:				; CODE XREF: sub_DE8+1383j
		mov	[bp+var_14], 2
		jmp	loc_239A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_217D:				; CODE XREF: sub_DE8+137Cj
		inc	byte_1A51C

loc_2181:				; CODE XREF: sub_DE8+1369j
		cmp	word_1A5A6, 14h
		jle	short loc_21A0
		mov	ax, word_1A5AE
		shl	ax, 1
		add	ax, 0FFDAh
		cmp	ax, word_1A5AA
		jle	short loc_21A0
		inc	word_1A5AA
		mov	word_1A5A6, 14h

loc_21A0:				; CODE XREF: sub_DE8+139Ej
					; sub_DE8+13ACj
		cmp	word_1A5A6, 0Eh
		jge	short loc_21B8
		cmp	word_1A5AA, 0
		jle	short loc_21B8
		dec	word_1A5AA
		mov	word_1A5A6, 0Eh

loc_21B8:				; CODE XREF: sub_DE8+13BDj
					; sub_DE8+13C4j
		cmp	word_197A6, 0
		jnz	short loc_21DF
		cmp	word_1A13A, 0
		jnz	short loc_21DF
		mov	ax, word_1A5A8
		cmp	ax, word_14942
		jge	short loc_21DF
		cmp	word_1A5AC, 0
		jle	short loc_21DF
		dec	word_1A5AC
		add	word_1A5A8, 10h

loc_21DF:				; CODE XREF: sub_DE8+13D5j
					; sub_DE8+13DCj ...
		mov	ax, word_1A5A8
		cmp	ax, word_14942
		jg	short loc_21EB
		jmp	loc_22D8	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_21EB:				; CODE XREF: sub_DE8+13FEj
		mov	ax, word_1A5B0
		add	ax, 0FFF6h
		cmp	ax, word_1A5AC
		jg	short loc_21FA
		jmp	loc_22D8	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_21FA:				; CODE XREF: sub_DE8+140Dj
		inc	word_1A5AC
		sub	word_1A5A8, 10h
		jmp	loc_22D8	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2206:				; CODE XREF: sub_DE8+319j
		call	sub_4B81
		cmp	byte_149E1, 6
		jb	short loc_2219
		cmp	byte_149E1, 0Bh
		jbe	short loc_2263

loc_2219:				; CODE XREF: sub_DE8+1428j
		mov	ax, word_1A596
		mov	dx, 0Ch
		mul	dx
		mov	bx, ax
		mov	ax, word_197A4
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+644Ch]
		push	word ptr [bx+644Ah]
		mov	ax, word_1A596
		mov	dx, 0Ch
		mul	dx
		mov	bx, ax
		mov	ax, word_197A4
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+6006h]
		push	word ptr [bx+6004h]
		mov	ax, word_1A5A8
		add	ax, 8
		push	ax
		mov	ax, word_1A5A6
		inc	ax
		push	ax
		call	sub_4A9D
		add	sp, 0Ch

loc_2263:				; CODE XREF: sub_DE8+142Fj
		inc	byte_149E1
		mov	al, byte_149E1
		mov	ah, 0
		sub	ax, 2
		cmp	ax, 0Eh		; switch 15 cases
		ja	short loc_22D8	; default
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_227D[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_227D	dw offset loc_22C3	; DATA XREF: sub_DE8+1490r
		dw offset loc_22D8	; jump table for switch	statement
		dw offset loc_229B
		dw offset loc_22D8
		dw offset loc_22D8
		dw offset loc_22D8
		dw offset loc_22D8
		dw offset loc_22D8
		dw offset loc_22A3
		dw offset loc_22D8
		dw offset loc_22C3
		dw offset loc_22D8
		dw offset loc_22CB
		dw offset loc_22D8
		dw offset loc_22D3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_229B:				; CODE XREF: sub_DE8+1490j
					; DATA XREF: sub_DE8:off_227Do
		mov	word_197A4, 2	; case 0x2
		jmp	short loc_22D8	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_22A3:				; CODE XREF: sub_DE8+1490j
					; DATA XREF: sub_DE8:off_227Do
		mov	word_197A4, 2	; case 0x8
		mov	ax, word_197AC
		mov	word_1A5A6, ax
		mov	ax, word_1831A
		mov	word_1A5A8, ax
		mov	ax, word_18646
		mov	word_1A5AA, ax
		mov	ax, word_19FFC
		mov	word_1A5AC, ax
		jmp	short loc_22D8	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_22C3:				; CODE XREF: sub_DE8+1490j
					; DATA XREF: sub_DE8:off_227Do
		mov	word_197A4, 1	; case 0x0
		jmp	short loc_22D8	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_22CB:				; CODE XREF: sub_DE8+1490j
					; DATA XREF: sub_DE8:off_227Do
		mov	word_197A4, 0	; case 0xC
		jmp	short loc_22D8	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_22D3:				; CODE XREF: sub_DE8+1490j
					; DATA XREF: sub_DE8:off_227Do
		mov	byte_149E1, 0	; case 0xE

loc_22D8:				; CODE XREF: sub_DE8+307j
					; sub_DE8+1400j ...
		cmp	[bp+var_23], 0	; default
		jz	short loc_22E7
		call	sub_134DF
		mov	[bp+var_23], 0

loc_22E7:				; CODE XREF: sub_DE8+14F4j
		cmp	word_14326, 0
		jnz	short loc_22F1
		jmp	loc_E89
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_22F1:				; CODE XREF: sub_DE8+1504j
		les	bx, dword_1A1BC
		add	bx, word_1A622
		mov	byte ptr es:[bx], 0
		cmp	[bp+var_B], 0
		jz	short loc_230F
		mov	bx, word ptr dword_1A1BC
		add	bx, word_1A622
		or	byte ptr es:[bx], 1

loc_230F:				; CODE XREF: sub_DE8+1519j
		cmp	[bp+var_9], 0
		jz	short loc_2321
		les	bx, dword_1A1BC
		add	bx, word_1A622
		or	byte ptr es:[bx], 2

loc_2321:				; CODE XREF: sub_DE8+152Bj
		cmp	[bp+var_A], 0
		jz	short loc_2333
		les	bx, dword_1A1BC
		add	bx, word_1A622
		or	byte ptr es:[bx], 4

loc_2333:				; CODE XREF: sub_DE8+153Dj
		cmp	[bp+var_7], 0
		jz	short loc_2345
		les	bx, dword_1A1BC
		add	bx, word_1A622
		or	byte ptr es:[bx], 8

loc_2345:				; CODE XREF: sub_DE8+154Fj
		cmp	[bp+var_8], 0
		jz	short loc_2357
		les	bx, dword_1A1BC
		add	bx, word_1A622
		or	byte ptr es:[bx], 10h

loc_2357:				; CODE XREF: sub_DE8+1561j
		cmp	[bp+var_6], 0
		jz	short loc_2369
		les	bx, dword_1A1BC
		add	bx, word_1A622
		or	byte ptr es:[bx], 20h

loc_2369:				; CODE XREF: sub_DE8+1573j
		cmp	[bp+var_5], 0
		jz	short loc_237B
		les	bx, dword_1A1BC
		add	bx, word_1A622
		or	byte ptr es:[bx], 40h

loc_237B:				; CODE XREF: sub_DE8+1585j
		inc	word_1A622
		cmp	word_1A622, 7D00h
		jge	short loc_238A
		jmp	loc_E89
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_238A:				; CODE XREF: sub_DE8+159Dj
		push	ds
		mov	ax, 125Ah
		push	ax
		call	sub_6927
		add	sp, 4
		jmp	loc_E89
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_239A:				; CODE XREF: sub_DE8+A7j sub_DE8+30Fj	...
		call	sub_134DF
		cmp	word_14326, 0
		jz	short loc_23AB
		call	sub_75D8

loc_23AB:				; CODE XREF: sub_DE8+15BCj
		call	sub_6901
		call	sub_11C80
		mov	ax, [bp+var_14]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_DE8		endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_23BE	proc far		; CODE XREF: sub_3DEF+4BBp

var_30		= word ptr -30h
var_2D		= byte ptr -2Dh
var_2C		= byte ptr -2Ch
var_2B		= word ptr -2Bh
var_29		= byte ptr -29h
var_28		= byte ptr -28h
var_27		= word ptr -27h
var_25		= byte ptr -25h
var_24		= byte ptr -24h
var_23		= byte ptr -23h
var_22		= word ptr -22h
var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_1C		= word ptr -1Ch
var_1A		= word ptr -1Ah
var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_B		= byte ptr -0Bh
var_A		= byte ptr -0Ah
var_9		= byte ptr -9
var_8		= byte ptr -8
var_7		= byte ptr -7
var_6		= byte ptr -6
var_5		= byte ptr -5
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 30h
		cmp	word_17D9E, sp
		ja	short loc_23D1
		call	far ptr	errStackOverflow

loc_23D1:				; CODE XREF: sub_23BE+Cj
		mov	[bp+var_2], 0
		mov	[bp+var_4], 0
		call	sub_11BBC
		call	sub_68C6
		mov	[bp+var_14], 0
		mov	word_14942, 50h	; 'P'
		mov	[bp+var_18], 0
		mov	[bp+var_24], 0
		mov	[bp+var_16], 0
		mov	[bp+var_23], 0
		mov	word_1A596, 0
		mov	word_19E86, 0Ah
		mov	word_197A6, 0
		mov	word_1A13A, 0
		mov	word_1A5F2, 0
		mov	byte_149E2, 0
		mov	word_1A13C, 0
		mov	word_149E4, 0
		xor	si, si
		jmp	short loc_2445
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2435:				; CODE XREF: sub_23BE+8Aj
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	word ptr [bx+6466h], 0
		inc	si

loc_2445:				; CODE XREF: sub_23BE+75j
		cmp	si, 32h	; '2'
		jl	short loc_2435

loc_244A:				; CODE XREF: sub_23BE+124Fj
					; sub_23BE+125Bj
		cmp	[bp+var_24], 0
		jz	short loc_2453
		jmp	loc_361C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2453:				; CODE XREF: sub_23BE+90j sub_23BE+A5j
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		cmp	dx, word_19E8A
		jnz	short loc_2465
		cmp	ax, word_19E88
		jz	short loc_2453

loc_2465:				; CODE XREF: sub_23BE+9Fj
		mov	dx, word_19E8A
		mov	ax, word_19E88
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	al, 0
		mov	byte_149D4, al
		mov	[bp+var_8], al
		mov	[bp+var_7], al
		mov	[bp+var_A], al
		mov	[bp+var_9], al
		mov	[bp+var_B], al
		mov	al, 0
		mov	[bp+var_5], al
		mov	[bp+var_6], al
		les	bx, dword_1A1BC
		add	bx, [bp+var_14]
		test	byte ptr es:[bx], 1
		jz	short loc_249F
		mov	[bp+var_B], 1

loc_249F:				; CODE XREF: sub_23BE+DBj
		les	bx, dword_1A1BC
		add	bx, [bp+var_14]
		test	byte ptr es:[bx], 2
		jz	short loc_24B0
		mov	[bp+var_9], 1

loc_24B0:				; CODE XREF: sub_23BE+ECj
		les	bx, dword_1A1BC
		add	bx, [bp+var_14]
		test	byte ptr es:[bx], 4
		jz	short loc_24C1
		mov	[bp+var_A], 1

loc_24C1:				; CODE XREF: sub_23BE+FDj
		les	bx, dword_1A1BC
		add	bx, [bp+var_14]
		test	byte ptr es:[bx], 8
		jz	short loc_24D7
		mov	[bp+var_7], 1
		mov	byte_149D4, 1

loc_24D7:				; CODE XREF: sub_23BE+10Ej
		les	bx, dword_1A1BC
		add	bx, [bp+var_14]
		test	byte ptr es:[bx], 10h
		jz	short loc_24E8
		mov	[bp+var_8], 1

loc_24E8:				; CODE XREF: sub_23BE+124j
		les	bx, dword_1A1BC
		add	bx, [bp+var_14]
		test	byte ptr es:[bx], 20h
		jz	short loc_24F9
		mov	[bp+var_6], 1

loc_24F9:				; CODE XREF: sub_23BE+135j
		les	bx, dword_1A1BC
		add	bx, [bp+var_14]
		test	byte ptr es:[bx], 40h
		jz	short loc_250A
		mov	[bp+var_5], 1

loc_250A:				; CODE XREF: sub_23BE+146j
		inc	[bp+var_14]
		mov	ax, [bp+var_14]
		cmp	ax, word_1A622
		jl	short loc_2519
		jmp	loc_361C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2519:				; CODE XREF: sub_23BE+156j
		cmp	word_197A2, 8
		jge	short loc_2527
		call	sub_615A
		jmp	short loc_2533
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2527:				; CODE XREF: sub_23BE+160j
		cmp	word_197A2, 8
		jl	short loc_2533
		call	sub_62E4

loc_2533:				; CODE XREF: sub_23BE+167j
					; sub_23BE+16Ej
		mov	al, byte_19FFE
		mov	ah, 0
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	al, byte_1841B
		mov	ah, 0
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		cmp	byte_19FFE, 0
		jnz	short loc_2559
		mov	ax, 1
		jmp	short loc_255B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2559:				; CODE XREF: sub_23BE+194j
		xor	ax, ax

loc_255B:				; CODE XREF: sub_23BE+199j
		mov	byte_19FFE, al
		cmp	byte_1841B, 0
		jnz	short loc_256A
		mov	ax, 1
		jmp	short loc_256C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_256A:				; CODE XREF: sub_23BE+1A5j
		xor	ax, ax

loc_256C:				; CODE XREF: sub_23BE+1AAj
		mov	byte_1841B, al
		cmp	byte_1A1B8, 0
		jnz	short loc_2591
		cmp	byte_1872E, 0
		jnz	short loc_2591
		call	sub_12FD1
		mov	bx, 32h	; '2'
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_2591
		mov	byte_1872E, 1

loc_2591:				; CODE XREF: sub_23BE+1B6j
					; sub_23BE+1BDj ...
		mov	al, byte_1872E
		mov	ah, 0
		dec	ax
		cmp	ax, 4		; switch 5 cases
		ja	short loc_25CB	; default
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_25A5[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_25A5	dw offset loc_25B6	; DATA XREF: sub_23BE+1E2r
		dw offset loc_25AF	; jump table for switch	statement
		dw offset loc_25AF
		dw offset loc_25B6
		dw offset loc_25C1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_25AF:				; CODE XREF: sub_23BE+1E2j
					; DATA XREF: sub_23BE:off_25A5o
		mov	byte_18140, 2	; case 0x1
		jmp	short loc_25BB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_25B6:				; CODE XREF: sub_23BE+1E2j
					; DATA XREF: sub_23BE:off_25A5o
		mov	byte_18140, 1	; case 0x0

loc_25BB:				; CODE XREF: sub_23BE+1F6j
		inc	byte_1872E
		jmp	short loc_25CB	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_25C1:				; CODE XREF: sub_23BE+1E2j
					; DATA XREF: sub_23BE:off_25A5o
		mov	byte_18140, 0	; case 0x4
		mov	byte_1872E, 0

loc_25CB:				; CODE XREF: sub_23BE+1DCj
					; sub_23BE+201j
		cmp	word_1A5BA, 0Ah	; default
		jle	short loc_25DC
		mov	word_1A5BA, 0
		dec	word_19E84

loc_25DC:				; CODE XREF: sub_23BE+212j
		cmp	word_19E84, 0
		jge	short loc_25FF
		mov	byte_1841A, 1
		mov	word_19E84, 0
		cmp	byte_1A7C8, 0
		jnz	short loc_25FF
		mov	ax, 7
		push	ax
		push	cs
		call	near ptr sub_5C8
		inc	sp
		inc	sp

loc_25FF:				; CODE XREF: sub_23BE+223j
					; sub_23BE+235j
		call	sub_6989
		cmp	byte_1841A, 0
		jnz	short loc_260E
		jmp	loc_26AA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_260E:				; CODE XREF: sub_23BE+24Bj
		call	sub_4B81
		mov	al, byte_1841A
		mov	ah, 0
		cmp	ax, 0Bh		; switch 12 cases
		ja	short loc_2650	; default
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_2626[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_2626	dw offset loc_264A	; DATA XREF: sub_23BE+263r
		dw offset loc_264A	; jump table for switch	statement
		dw offset loc_2644
		dw offset loc_2644
		dw offset loc_263E
		dw offset loc_263E
		dw offset loc_263E
		dw offset loc_263E
		dw offset loc_2644
		dw offset loc_2644
		dw offset loc_264A
		dw offset loc_264A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_263E:				; CODE XREF: sub_23BE+263j
					; DATA XREF: sub_23BE:off_2626o
		mov	[bp+var_25], 2	; case 0x4
		jmp	short loc_2654
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2644:				; CODE XREF: sub_23BE+263j
					; DATA XREF: sub_23BE:off_2626o
		mov	[bp+var_25], 1	; case 0x2
		jmp	short loc_2654
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_264A:				; CODE XREF: sub_23BE+263j
					; DATA XREF: sub_23BE:off_2626o
		mov	[bp+var_25], 0	; case 0x0
		jmp	short loc_2654
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2650:				; CODE XREF: sub_23BE+25Dj
		mov	[bp+var_25], 3	; default

loc_2654:				; CODE XREF: sub_23BE+284j
					; sub_23BE+28Aj ...
		cmp	[bp+var_25], 3
		jnb	short loc_2694
		mov	al, [bp+var_25]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+63DAh]
		push	word ptr [bx+63D8h]
		mov	al, [bp+var_25]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+5F70h]
		push	word ptr [bx+5F6Eh]
		mov	ax, word_1A5A8
		add	ax, 8
		push	ax
		mov	ax, word_1A5A6
		inc	ax
		push	ax
		call	sub_4A9D
		add	sp, 0Ch

loc_2694:				; CODE XREF: sub_23BE+29Aj
		inc	byte_1841A
		cmp	byte_1841A, 32h	; '2'
		ja	short loc_26A2
		jmp	loc_3607	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_26A2:				; CODE XREF: sub_23BE+2DFj
		mov	[bp+var_16], 0
		jmp	loc_361C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_26AA:				; CODE XREF: sub_23BE+24Dj
		cmp	byte_149E1, 0
		jz	short loc_26B4
		jmp	loc_3535
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_26B4:				; CODE XREF: sub_23BE+2F1j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		call	sub_4B81
		cmp	byte_149E2, 0
		jnz	short loc_26E7
		push	cs
		call	near ptr sub_D27
		jmp	loc_2796
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_26E7:				; CODE XREF: sub_23BE+320j
		cmp	word_1A13C, 0
		jnz	short loc_26FA
		cmp	byte_149E2, 1
		jnz	short loc_26FA
		call	sub_103B6

loc_26FA:				; CODE XREF: sub_23BE+32Ej
					; sub_23BE+335j
		mov	ax, word_1A596
		mov	dx, 18h
		mul	dx
		mov	bx, ax
		mov	ax, word_1A13C
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+660Ch]
		push	word ptr [bx+660Ah]
		mov	ax, word_1A596
		mov	dx, 18h
		mul	dx
		mov	bx, ax
		mov	ax, word_1A13C
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+611Eh]
		push	word ptr [bx+611Ch]
		mov	ax, word_1A5A8
		add	ax, 8
		push	ax
		mov	ax, word_1A5A6
		inc	ax
		push	ax
		call	sub_4A9D
		add	sp, 0Ch
		inc	word_1A13C
		cmp	[bp+var_A], 0
		jnz	short loc_2754
		cmp	[bp+var_9], 0
		jz	short loc_276C

loc_2754:				; CODE XREF: sub_23BE+38Ej
		cmp	word_1A13C, 5
		jle	short loc_276C
		mov	byte_149E2, 0
		mov	word_1A13C, 0
		mov	word_149E4, 0

loc_276C:				; CODE XREF: sub_23BE+394j
					; sub_23BE+39Bj
		cmp	[bp+var_8], 0
		jnz	short loc_2778
		cmp	[bp+var_7], 0
		jz	short loc_2789

loc_2778:				; CODE XREF: sub_23BE+3B2j
		mov	byte_149E2, 0
		mov	word_1A13C, 0
		mov	word_149E4, 0

loc_2789:				; CODE XREF: sub_23BE+3B8j
		cmp	word_1A13C, 5
		jle	short loc_2796
		mov	word_1A13C, 5

loc_2796:				; CODE XREF: sub_23BE+326j
					; sub_23BE+3D0j
		xor	ax, ax
		mov	[bp+var_E], ax
		mov	word_1A5F2, ax
		cmp	[bp+var_8], 0
		jz	short loc_27E7
		cmp	word_1A13A, ax
		jnz	short loc_27E7
		cmp	word_197A6, ax
		jnz	short loc_27E7
		mov	ax, word_1A5A8
		cmp	ax, word_14942
		jz	short loc_27CC
		cmp	word_1A5AC, 0
		jz	short loc_27CC
		mov	ax, word_1A5B0
		add	ax, 0FFF6h
		cmp	ax, word_1A5AC
		jnz	short loc_27E7

loc_27CC:				; CODE XREF: sub_23BE+3F9j
					; sub_23BE+400j
		mov	[bp+var_E], 1
		mov	word_197A6, 1
		mov	word_183A0, 0
		mov	word_19E86, 0Bh
		dec	word_19E84

loc_27E7:				; CODE XREF: sub_23BE+3E4j
					; sub_23BE+3EAj ...
		cmp	[bp+var_E], 0
		jz	short loc_27F0
		jmp	loc_2878
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_27F0:				; CODE XREF: sub_23BE+42Dj
		xor	ax, ax
		mov	[bp+var_10], ax
		mov	[bp+var_12], ax
		cmp	word_1A596, 1
		jnz	short loc_2816
		push	ss
		lea	ax, [bp+var_2B]
		push	ax
		push	ss
		lea	ax, [bp+var_27]
		push	ax
		call	sub_A08D
		add	sp, 8
		mov	[bp+var_2C], al
		jmp	short loc_282B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2816:				; CODE XREF: sub_23BE+43Fj
		push	ss
		lea	ax, [bp+var_2B]
		push	ax
		push	ss
		lea	ax, [bp+var_27]
		push	ax
		call	sub_9F9A
		add	sp, 8
		mov	[bp+var_2C], al

loc_282B:				; CODE XREF: sub_23BE+456j
		cmp	byte ptr [bp+var_2B], 0
		jz	short loc_2844
		cmp	word_1A596, 1
		jnz	short loc_283F
		mov	[bp+var_12], 1
		jmp	short loc_2844
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_283F:				; CODE XREF: sub_23BE+478j
		mov	[bp+var_10], 1

loc_2844:				; CODE XREF: sub_23BE+471j
					; sub_23BE+47Fj
		cmp	[bp+var_9], 0
		jz	short loc_284F
		mov	[bp+var_12], 0

loc_284F:				; CODE XREF: sub_23BE+48Aj
		cmp	[bp+var_A], 0
		jz	short loc_285A
		mov	[bp+var_10], 0

loc_285A:				; CODE XREF: sub_23BE+495j
		cmp	[bp+var_9], 0
		jnz	short loc_2878
		cmp	[bp+var_A], 0
		jnz	short loc_2878
		cmp	[bp+var_12], 0
		jnz	short loc_2872
		cmp	[bp+var_10], 0
		jz	short loc_2878

loc_2872:				; CODE XREF: sub_23BE+4ACj
		mov	word_19E86, 0Ah

loc_2878:				; CODE XREF: sub_23BE+42Fj
					; sub_23BE+4A0j ...
		cmp	[bp+var_9], 0
		jnz	short loc_2884
		cmp	[bp+var_10], 0
		jz	short loc_28F6

loc_2884:				; CODE XREF: sub_23BE+4BEj
		inc	word_1A5A6
		call	sub_9C58
		or	ax, ax
		jz	short loc_2895
		dec	word_1A5A6

loc_2895:				; CODE XREF: sub_23BE+4D1j
		mov	word_1A596, 0
		cmp	word_197A6, 0
		jz	short loc_28A5
		jmp	loc_299D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_28A5:				; CODE XREF: sub_23BE+4E2j
		cmp	word_1A13A, 0
		jz	short loc_28AF
		jmp	loc_299D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_28AF:				; CODE XREF: sub_23BE+4ECj
		cmp	[bp+var_9], 0
		jnz	short loc_28B8
		jmp	loc_299D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_28B8:				; CODE XREF: sub_23BE+4F5j
		inc	word_19E86
		cmp	word_19E86, 0Ah
		jl	short loc_28DF
		mov	word_19E86, 0
		cmp	byte_1A13E, 0
		jz	short loc_28DB
		mov	ax, 32h	; '2'
		push	ax
		call	sub_134B3
		inc	sp
		inc	sp

loc_28DB:				; CODE XREF: sub_23BE+510j
		mov	[bp+var_23], 1

loc_28DF:				; CODE XREF: sub_23BE+503j
		cmp	word_19E86, 5
		jz	short loc_28E9
		jmp	loc_2983
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_28E9:				; CODE XREF: sub_23BE+526j
		cmp	byte_1A13E, 0
		jnz	short loc_28F3
		jmp	loc_297F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_28F3:				; CODE XREF: sub_23BE+530j
		jmp	loc_2974
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_28F6:				; CODE XREF: sub_23BE+4C4j
		cmp	[bp+var_A], 0
		jnz	short loc_2905
		cmp	[bp+var_12], 0
		jnz	short loc_2905
		jmp	loc_2989
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2905:				; CODE XREF: sub_23BE+53Cj
					; sub_23BE+542j
		dec	word_1A5A6
		call	sub_9D17
		or	ax, ax
		jz	short loc_2916
		inc	word_1A5A6

loc_2916:				; CODE XREF: sub_23BE+552j
		mov	word_1A596, 1
		cmp	word_197A6, 0
		jz	short loc_2926
		jmp	loc_299D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2926:				; CODE XREF: sub_23BE+563j
		cmp	word_1A13A, 0
		jz	short loc_2930
		jmp	loc_299D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2930:				; CODE XREF: sub_23BE+56Dj
		cmp	[bp+var_A], 0
		jnz	short loc_2939
		jmp	loc_299D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2939:				; CODE XREF: sub_23BE+576j
		inc	word_19E86
		cmp	word_19E86, 0Ah
		jl	short loc_2960
		mov	word_19E86, 0
		cmp	byte_1A13E, 0
		jz	short loc_295C
		mov	ax, 32h	; '2'
		push	ax
		call	sub_134B3
		inc	sp
		inc	sp

loc_295C:				; CODE XREF: sub_23BE+591j
		mov	[bp+var_23], 1

loc_2960:				; CODE XREF: sub_23BE+584j
		cmp	word_19E86, 5
		jz	short loc_296A
		jmp	loc_2983
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_296A:				; CODE XREF: sub_23BE+5A7j
		cmp	byte_1A13E, 0
		jnz	short loc_2974
		jmp	loc_297F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2974:				; CODE XREF: sub_23BE:loc_28F3j
					; sub_23BE+5B1j
		mov	ax, 32h	; '2'
		push	ax
		call	sub_134B3
		inc	sp
		inc	sp

loc_297F:				; CODE XREF: sub_23BE+532j
					; sub_23BE+5B3j
		mov	[bp+var_23], 1

loc_2983:				; CODE XREF: sub_23BE+528j
					; sub_23BE+5A9j
		inc	word_1A5BA
		jmp	short loc_299D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2989:				; CODE XREF: sub_23BE+544j
		cmp	word_197A6, 0
		jnz	short loc_299D
		cmp	word_1A13A, 0
		jnz	short loc_299D
		mov	word_19E86, 0Ah

loc_299D:				; CODE XREF: sub_23BE+4E4j
					; sub_23BE+4EEj ...
		cmp	word_197A6, 0
		jnz	short loc_29A7
		jmp	loc_2A24
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_29A7:				; CODE XREF: sub_23BE+5E4j
		mov	ax, word_1A5A8
		mov	[bp+var_30], ax
		mov	bx, word_183A0
		shl	bx, 1
		mov	ax, [bx+826h]
		add	word_1A5A8, ax
		inc	word_183A0
		cmp	word_183A0, 7
		jle	short loc_29D2
		mov	word_197A6, 0
		mov	word_1A5F2, 1

loc_29D2:				; CODE XREF: sub_23BE+606j
		cmp	word_1A596, 1
		jnz	short loc_29E3
		call	sub_9EB2
		mov	[bp+var_2D], al
		jmp	short loc_29EB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_29E3:				; CODE XREF: sub_23BE+619j
		call	sub_9DDA
		mov	[bp+var_2D], al

loc_29EB:				; CODE XREF: sub_23BE+623j
		cmp	[bp+var_2D], 0
		jz	short loc_2A24
		cmp	[bp+var_2D], 2
		jnz	short loc_29FD
		mov	ax, [bp+var_30]
		mov	word_1A5A8, ax

loc_29FD:				; CODE XREF: sub_23BE+637j
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		mov	cx, 4
		shl	ax, cl
		mov	word_1A5A8, ax
		mov	word_197A6, 0
		mov	word_1A5F2, 1
		mov	ax, 1
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_2A24:				; CODE XREF: sub_23BE+5E6j
					; sub_23BE+631j
		cmp	word_1A13A, 0
		jnz	short loc_2A2E
		jmp	loc_2ADB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2A2E:				; CODE XREF: sub_23BE+66Bj
		cmp	word_18040, 6
		jge	short loc_2A49
		mov	bx, word_18040
		shl	bx, 1
		mov	ax, [bx+836h]
		add	word_1A5A8, ax
		inc	word_18040
		jmp	short loc_2A52
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2A49:				; CODE XREF: sub_23BE+675j
		add	word_1A5A8, 10h
		inc	word_149E4

loc_2A52:				; CODE XREF: sub_23BE+689j
		cmp	word_1A596, 1
		jnz	short loc_2A70
		push	ss
		lea	ax, [bp+var_2B]
		push	ax
		push	ss
		lea	ax, [bp+var_27]
		push	ax
		call	sub_A08D
		add	sp, 8
		mov	[bp+var_2C], al
		jmp	short loc_2A85
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2A70:				; CODE XREF: sub_23BE+699j
		push	ss
		lea	ax, [bp+var_2B]
		push	ax
		push	ss
		lea	ax, [bp+var_27]
		push	ax
		call	sub_9F9A
		add	sp, 8
		mov	[bp+var_2C], al

loc_2A85:				; CODE XREF: sub_23BE+6B0j
		cmp	[bp+var_2C], 0
		jz	short loc_2ADB
		mov	word_1A13A, 0
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		mov	cx, 4
		shl	ax, cl
		mov	word_1A5A8, ax
		cmp	byte ptr [bp+var_27], 0
		jz	short loc_2AAC
		sub	word_1A5A8, bx

loc_2AAC:				; CODE XREF: sub_23BE+6E8j
		cmp	word_149E4, 5
		jle	short loc_2ABD
		mov	byte_149E2, 1
		sub	word_19E84, 0Ah

loc_2ABD:				; CODE XREF: sub_23BE+6F3j
		mov	word_149E4, 0
		cmp	byte_18141, 2
		jnz	short loc_2AD1
		cmp	byte_149E2, 0
		jnz	short loc_2ADB

loc_2AD1:				; CODE XREF: sub_23BE+70Aj
		mov	ax, 1
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_2ADB:				; CODE XREF: sub_23BE+66Dj
					; sub_23BE+6CBj ...
		cmp	word_197A6, 0
		jz	short loc_2AE5
		jmp	loc_2B59
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2AE5:				; CODE XREF: sub_23BE+722j
		cmp	word_1A13A, 0
		jnz	short loc_2B59
		cmp	word_1A596, 1
		jnz	short loc_2B0A
		push	ss
		lea	ax, [bp+var_2B]
		push	ax
		push	ss
		lea	ax, [bp+var_27]
		push	ax
		call	sub_A08D
		add	sp, 8
		mov	[bp+var_2C], al
		jmp	short loc_2B1F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2B0A:				; CODE XREF: sub_23BE+733j
		push	ss
		lea	ax, [bp+var_2B]
		push	ax
		push	ss
		lea	ax, [bp+var_27]
		push	ax
		call	sub_9F9A
		add	sp, 8
		mov	[bp+var_2C], al

loc_2B1F:				; CODE XREF: sub_23BE+74Aj
		cmp	[bp+var_2C], 0
		jnz	short loc_2B48
		mov	word_1A13A, 1
		cmp	word_1A5F2, 0
		jz	short loc_2B3A
		mov	word_18040, 0
		jmp	short loc_2B40
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2B3A:				; CODE XREF: sub_23BE+772j
		mov	word_18040, 6

loc_2B40:				; CODE XREF: sub_23BE+77Aj
		mov	word_19E86, 0Ch
		jmp	short loc_2B59
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2B48:				; CODE XREF: sub_23BE+765j
		cmp	word_1A5F2, 0
		jz	short loc_2B59
		mov	ax, 1
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_2B59:				; CODE XREF: sub_23BE+724j
					; sub_23BE+72Cj ...
		cmp	[bp+var_7], 0
		jnz	short loc_2B62
		jmp	loc_2CEC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2B62:				; CODE XREF: sub_23BE+79Fj
		mov	byte ptr [bp+var_27+1],	0
		cmp	word_1A596, 1
		jnz	short loc_2B7F
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A83B
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_2B8F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2B7F:				; CODE XREF: sub_23BE+7ADj
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A79E
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_2B8F:				; CODE XREF: sub_23BE+7BFj
		cmp	byte ptr [bp+var_2B+1],	0
		jnz	short loc_2B98
		jmp	loc_2C63
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2B98:				; CODE XREF: sub_23BE+7D5j
		mov	byte ptr [bp+var_27+1],	1
		les	bx, dword_18398
		add	bx, [bp+var_22]
		mov	al, es:[bx]
		mov	[bp+var_28], al
		mov	al, [bp+var_28]
		cmp	al, byte_1A7FA
		jnb	short loc_2BB5
		jmp	loc_2C63
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2BB5:				; CODE XREF: sub_23BE+7F2j
		mov	al, [bp+var_28]
		cmp	al, byte_1A7FB
		jbe	short loc_2BC1
		jmp	loc_2C63
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2BC1:				; CODE XREF: sub_23BE+7FEj
		xor	si, si
		mov	[bp+var_1C], 0FFFFh
		jmp	short loc_2BE0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2BCA:				; CODE XREF: sub_23BE+825j
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		cmp	word ptr [bx+6466h], 0
		jnz	short loc_2BDF
		mov	[bp+var_1C], si
		jmp	short loc_2BE5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2BDF:				; CODE XREF: sub_23BE+81Aj
		inc	si

loc_2BE0:				; CODE XREF: sub_23BE+80Aj
		cmp	si, 32h	; '2'
		jl	short loc_2BCA

loc_2BE5:				; CODE XREF: sub_23BE+81Fj
		cmp	[bp+var_1C], 0FFFFh
		jnz	short loc_2BEE
		jmp	loc_2C63
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2BEE:				; CODE XREF: sub_23BE+82Bj
		xor	si, si
		mov	di, si
		jmp	short loc_2C1A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2BF4:				; CODE XREF: sub_23BE+85Fj
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		cmp	word ptr [bx+6466h], 0
		jz	short loc_2C19
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, [bx+6464h]
		cmp	ax, [bp+var_22]
		jnz	short loc_2C19
		mov	di, 1

loc_2C19:				; CODE XREF: sub_23BE+844j
					; sub_23BE+856j
		inc	si

loc_2C1A:				; CODE XREF: sub_23BE+834j
		cmp	si, 32h	; '2'
		jl	short loc_2BF4
		or	di, di
		jnz	short loc_2C63
		mov	al, [bp+var_28]
		push	ax
		mov	ax, [bp+var_1C]
		mov	dx, 6
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+6468h], al
		mov	ax, [bp+var_22]
		push	ax
		mov	ax, [bp+var_1C]
		mov	dx, 6
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+6464h], ax
		mov	ax, [bp+var_1C]
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	word ptr [bx+6466h], 78h ; 'x'
		mov	ax, 8
		push	ax
		push	cs
		call	near ptr sub_5C8
		inc	sp
		inc	sp

loc_2C63:				; CODE XREF: sub_23BE+7D7j
					; sub_23BE+7F4j ...
		cmp	byte ptr [bp+var_27+1],	0
		jz	short loc_2C6C
		jmp	loc_2CEC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2C6C:				; CODE XREF: sub_23BE+8A9j
		cmp	word_1A596, 1
		jnz	short loc_2C85
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A981
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_2C95
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2C85:				; CODE XREF: sub_23BE+8B3j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A8D6
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_2C95:				; CODE XREF: sub_23BE+8C5j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_2CEC
		xor	si, si
		mov	[bp+var_1A], 0FFFFh
		jmp	short loc_2CB5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2CA4:				; CODE XREF: sub_23BE+8FAj
		mov	bx, si
		shl	bx, 1
		cmp	word ptr [bx+4488h], 0
		jnz	short loc_2CB4
		mov	[bp+var_1A], si
		jmp	short loc_2CBA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2CB4:				; CODE XREF: sub_23BE+8EFj
		inc	si

loc_2CB5:				; CODE XREF: sub_23BE+8E4j
		cmp	si, 0Ah
		jl	short loc_2CA4

loc_2CBA:				; CODE XREF: sub_23BE+8F4j
		cmp	[bp+var_1A], 0FFFFh
		jz	short loc_2CEC
		xor	si, si
		mov	di, si
		jmp	short loc_2CD7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2CC6:				; CODE XREF: sub_23BE+91Cj
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+4488h]
		cmp	ax, [bp+var_22]
		jnz	short loc_2CD6
		mov	di, 1

loc_2CD6:				; CODE XREF: sub_23BE+913j
		inc	si

loc_2CD7:				; CODE XREF: sub_23BE+906j
		cmp	si, 0Ah
		jl	short loc_2CC6
		or	di, di
		jnz	short loc_2CEC
		mov	ax, [bp+var_22]
		mov	bx, [bp+var_1A]
		shl	bx, 1
		mov	[bx+4488h], ax

loc_2CEC:				; CODE XREF: sub_23BE+7A1j
					; sub_23BE+8ABj ...
		cmp	[bp+var_B], 0
		jnz	short loc_2CF5
		jmp	loc_3073
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2CF5:				; CODE XREF: sub_23BE+932j
		xor	si, si
		jmp	short loc_2D29
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2CF9:				; CODE XREF: sub_23BE+96Ej
		cmp	word_1A596, 1
		jnz	short loc_2D0A
		call	sub_B871
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_2D12
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2D0A:				; CODE XREF: sub_23BE+940j
		call	sub_B794
		mov	byte ptr [bp+var_2B+1],	al

loc_2D12:				; CODE XREF: sub_23BE+94Aj
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_2D28
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		dec	ax
		push	ax
		call	sub_F026
		inc	sp
		inc	sp
		jmp	short loc_2D2E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2D28:				; CODE XREF: sub_23BE+958j
		inc	si

loc_2D29:				; CODE XREF: sub_23BE+939j
		cmp	si, 0Ah
		jl	short loc_2CF9

loc_2D2E:				; CODE XREF: sub_23BE+968j
		cmp	word_1A596, 1
		jnz	short loc_2D47
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A6B6
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_2D57
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2D47:				; CODE XREF: sub_23BE+975j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A5D2
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_2D57:				; CODE XREF: sub_23BE+987j
		cmp	byte ptr [bp+var_2B+1],	0
		jnz	short loc_2D60
		jmp	loc_2E7C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2D60:				; CODE XREF: sub_23BE+99Dj
		call	sub_11865
		mov	word_19E86, 0Ah
		sub	byte ptr [bp+var_2B+1],	0C8h ; 'Ш'
		mov	byte_149E1, 1
		mov	word_197A4, 0
		mov	ax, word_1A5A6
		mov	word_1A5A4, ax
		mov	ax, word_1A5A8
		mov	word_1A080, ax
		mov	ax, word_1A5AA
		mov	word_19E82, ax
		mov	ax, word_1A5AC
		mov	word_1A514, ax
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+3E8Ah]
		shl	ax, 1
		mov	[bp+var_20], ax
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+3E8Ch]
		mov	[bp+var_1E], ax
		mov	ax, [bp+var_20]
		add	ax, 0FFEEh
		mov	word_1A5AA, ax
		or	ax, ax
		jge	short loc_2DCB
		mov	word_1A5AA, 0

loc_2DCB:				; CODE XREF: sub_23BE+A05j
		mov	ax, word_1A5AE
		shl	ax, 1
		add	ax, 0FFDAh
		cmp	ax, word_1A5AA
		jge	short loc_2DE4
		mov	ax, word_1A5AE
		shl	ax, 1
		add	ax, 0FFDAh
		mov	word_1A5AA, ax

loc_2DE4:				; CODE XREF: sub_23BE+A19j
		mov	ax, [bp+var_20]
		sub	ax, word_1A5AA
		mov	word_1A5A6, ax
		cmp	word_1A596, 1
		jnz	short loc_2DF9
		dec	word_1A5A6

loc_2DF9:				; CODE XREF: sub_23BE+A35j
		mov	ax, [bp+var_1E]
		push	ax
		mov	ax, word_14942
		mov	bx, 10h
		cwd
		idiv	bx
		pop	dx
		sub	dx, ax
		mov	word_1A5AC, dx
		or	dx, dx
		jge	short loc_2E17
		mov	word_1A5AC, 0

loc_2E17:				; CODE XREF: sub_23BE+A51j
		mov	ax, word_1A5B0
		add	ax, 0FFF6h
		cmp	ax, word_1A5AC
		jge	short loc_2E2C
		mov	ax, word_1A5B0
		add	ax, 0FFF6h
		mov	word_1A5AC, ax

loc_2E2C:				; CODE XREF: sub_23BE+A63j
		mov	ax, [bp+var_1E]
		sub	ax, word_1A5AC
		mov	cx, 4
		shl	ax, cl
		mov	word_1A5A8, ax
		mov	ax, word_1A5A6
		mov	word_197AC, ax
		mov	ax, word_1A5A8
		mov	word_1831A, ax
		mov	ax, word_1A5AA
		mov	word_18646, ax
		mov	ax, word_1A5AC
		mov	word_19FFC, ax
		mov	ax, word_19E82
		mov	word_1A5AA, ax
		mov	ax, word_1A514
		mov	word_1A5AC, ax
		mov	ax, word_1A5A4
		mov	word_1A5A6, ax
		mov	ax, word_1A080
		mov	word_1A5A8, ax
		cmp	byte_18141, 0
		jnz	short loc_2E7C
		mov	ax, 2
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_2E7C:				; CODE XREF: sub_23BE+99Fj
					; sub_23BE+AB2j
		cmp	word_1A596, 1
		jnz	short loc_2E95
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A236
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_2EA5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2E95:				; CODE XREF: sub_23BE+AC3j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A184
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_2EA5:				; CODE XREF: sub_23BE+AD5j
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	al, es:[bx]
		mov	[bp+var_28], al
		cmp	byte ptr [bp+var_2B+1],	0
		jnz	short loc_2EBB
		jmp	loc_3073
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2EBB:				; CODE XREF: sub_23BE+AF8j
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		add	bx, 0FF88h
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+614Eh], 0
		jz	short loc_2ED3
		jmp	loc_3073
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2ED3:				; CODE XREF: sub_23BE+B10j
		sub	byte ptr [bp+var_2B+1],	78h ; 'x'
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+614Dh], 1
		jnz	short loc_2EFB
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	byte ptr [bx+614Dh], 2
		jmp	short loc_2F0B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2EFB:				; CODE XREF: sub_23BE+B29j
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	byte ptr [bx+614Dh], 1

loc_2F0B:				; CODE XREF: sub_23BE+B3Bj
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+614Dh], 1
		jz	short loc_2F20
		jmp	loc_2FAE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2F20:				; CODE XREF: sub_23BE+B5Dj
		mov	al, [bp+var_28]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		mov	al, [bx+4285h]
		mov	[bp+var_29], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5632h], 1
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Ch]
		mov	dl, byte ptr [bp+var_2B+1]
		mov	dh, 0
		mov	bx, dx
		shl	bx, 1
		shl	bx, 1
		mov	dl, [bx+614Ch]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+563Fh], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 3
		jz	short loc_2FAB
		jmp	loc_3053
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2FAB:				; CODE XREF: sub_23BE+BE8j
		jmp	loc_3036
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_2FAE:				; CODE XREF: sub_23BE+B5Fj
		mov	al, [bp+var_28]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		mov	al, [bx+4284h]
		mov	[bp+var_29], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5632h], 0
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Dh]
		mov	dl, byte ptr [bp+var_2B+1]
		mov	dh, 0
		mov	bx, dx
		shl	bx, 1
		shl	bx, 1
		mov	dl, [bx+614Ch]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+563Fh], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 3
		jnz	short loc_3053

loc_3036:				; CODE XREF: sub_23BE:loc_2FABj
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5638h], 1

loc_3053:				; CODE XREF: sub_23BE+BEAj
					; sub_23BE+C76j
		mov	ax, 3
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp
		mov	al, [bp+var_29]
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	es:[bx], al
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_3073:				; CODE XREF: sub_23BE+934j
					; sub_23BE+AFAj ...
		cmp	[bp+var_6], 0
		jz	short loc_3085
		cmp	word_14942, 70h	; 'p'
		jge	short loc_3085
		add	word_14942, 10h

loc_3085:				; CODE XREF: sub_23BE+CB9j
					; sub_23BE+CC0j
		cmp	[bp+var_5], 0
		jz	short loc_3097
		cmp	word_14942, 30h	; '0'
		jle	short loc_3097
		sub	word_14942, 10h

loc_3097:				; CODE XREF: sub_23BE+CCBj
					; sub_23BE+CD2j
		cmp	byte_149D5, 0
		jz	short loc_30A1
		jmp	loc_361C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_30A1:				; CODE XREF: sub_23BE+CDEj
		cmp	[bp+var_18], 0
		jz	short loc_30AC
		call	sub_134DF

loc_30AC:				; CODE XREF: sub_23BE+CE7j
		cmp	word_1A596, 1
		jnz	short loc_30C5
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_AB80
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_30D5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_30C5:				; CODE XREF: sub_23BE+CF3j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_AA28
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_30D5:				; CODE XREF: sub_23BE+D05j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_3119
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	byte ptr es:[bx], 1
		cmp	byte_1A13E, 0
		jz	short loc_310B
		cmp	byte_18141, 0
		jnz	short loc_310B
		call	sub_12FD1
		mov	bx, 7D0h
		cwd
		idiv	bx
		add	dx, 1B58h
		push	dx
		call	sub_134B3
		inc	sp
		inc	sp

loc_310B:				; CODE XREF: sub_23BE+D2Dj
					; sub_23BE+D34j
		mov	[bp+var_18], 1
		inc	word_1A51A
		call	sub_117EC

loc_3119:				; CODE XREF: sub_23BE+D1Bj
		cmp	word_1A596, 1
		jnz	short loc_3132
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_AE34
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_3142
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3132:				; CODE XREF: sub_23BE+D60j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_ACDC
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_3142:				; CODE XREF: sub_23BE+D72j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_3179
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	byte ptr es:[bx], 1
		les	bx, dword_1839C
		add	bx, [bp+var_22]
		mov	byte ptr es:[bx], 0
		cmp	byte_18141, 0
		jnz	short loc_316F
		mov	ax, 5
		push	ax
		push	cs
		call	near ptr sub_5C8
		inc	sp
		inc	sp

loc_316F:				; CODE XREF: sub_23BE+DA5j
		add	word_19E84, 0Ah
		call	sub_1182E

loc_3179:				; CODE XREF: sub_23BE+D88j
		cmp	word_1A596, 1
		jnz	short loc_3192
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_B120
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_31A2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3192:				; CODE XREF: sub_23BE+DC0j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_AF90
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_31A2:				; CODE XREF: sub_23BE+DD2j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_31C8
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	byte ptr es:[bx], 1
		les	bx, dword_1839C
		add	bx, [bp+var_22]
		mov	byte ptr es:[bx], 0
		mov	byte_14941, 32h	; '2'
		mov	byte_1A1B8, 1

loc_31C8:				; CODE XREF: sub_23BE+DE8j
		cmp	word_1A596, 1
		jnz	short loc_31D9
		call	sub_A45B
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_31E1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_31D9:				; CODE XREF: sub_23BE+E0Fj
		call	sub_A2EC
		mov	byte ptr [bp+var_2B+1],	al

loc_31E1:				; CODE XREF: sub_23BE+E19j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_31ED
		mov	word_19E84, 0FFFFh

loc_31ED:				; CODE XREF: sub_23BE+E27j
		cmp	word_1A596, 1
		jnz	short loc_31FE
		call	sub_B3D1
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_3206
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_31FE:				; CODE XREF: sub_23BE+E34j
		call	sub_B2B4
		mov	byte ptr [bp+var_2B+1],	al

loc_3206:				; CODE XREF: sub_23BE+E3Ej
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_3212
		mov	word_19E84, 0FFFFh

loc_3212:				; CODE XREF: sub_23BE+E4Cj
		cmp	word_1A596, 1
		jnz	short loc_3223
		call	sub_B641
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_322B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3223:				; CODE XREF: sub_23BE+E59j
		call	sub_B4F2
		mov	byte ptr [bp+var_2B+1],	al

loc_322B:				; CODE XREF: sub_23BE+E63j
		cmp	byte ptr [bp+var_2B+1],	0
		jz	short loc_3240
		sub	word_19E84, 5
		mov	ax, 9
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_3240:				; CODE XREF: sub_23BE+E71j
		cmp	word_1A596, 1
		jnz	short loc_3259
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A236
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al
		jmp	short loc_3269
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3259:				; CODE XREF: sub_23BE+E87j
		push	ss
		lea	ax, [bp+var_22]
		push	ax
		call	sub_A184
		add	sp, 4
		mov	byte ptr [bp+var_2B+1],	al

loc_3269:				; CODE XREF: sub_23BE+E99j
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	al, es:[bx]
		mov	[bp+var_28], al
		cmp	byte ptr [bp+var_2B+1],	0
		jnz	short loc_327F
		jmp	loc_345F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_327F:				; CODE XREF: sub_23BE+EBCj
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		add	bx, 0FF88h
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+614Eh], 0
		jnz	short loc_3297
		jmp	loc_345F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3297:				; CODE XREF: sub_23BE+ED4j
		sub	byte ptr [bp+var_2B+1],	78h ; 'x'
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Dh]
		mov	dl, byte ptr [bp+var_2B+1]
		mov	dh, 0
		mov	bx, dx
		shl	bx, 1
		shl	bx, 1
		cmp	al, [bx+614Fh]
		jnz	short loc_32BE
		jmp	loc_345F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_32BE:				; CODE XREF: sub_23BE+EFBj
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+614Dh], 1
		jnz	short loc_32E2
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	byte ptr [bx+614Dh], 2
		jmp	short loc_32F2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_32E2:				; CODE XREF: sub_23BE+F10j
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	byte ptr [bx+614Dh], 1

loc_32F2:				; CODE XREF: sub_23BE+F22j
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+614Dh], 1
		jz	short loc_3307
		jmp	loc_3395
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3307:				; CODE XREF: sub_23BE+F44j
		mov	al, [bp+var_28]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		mov	al, [bx+4285h]
		mov	[bp+var_29], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5632h], 1
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Ch]
		mov	dl, byte ptr [bp+var_2B+1]
		mov	dh, 0
		mov	bx, dx
		shl	bx, 1
		shl	bx, 1
		mov	dl, [bx+614Ch]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+563Fh], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 3
		jz	short loc_3392
		jmp	loc_343A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3392:				; CODE XREF: sub_23BE+FCFj
		jmp	loc_341D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3395:				; CODE XREF: sub_23BE+F46j
		mov	al, [bp+var_28]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		mov	al, [bx+4284h]
		mov	[bp+var_29], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5632h], 0
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Dh]
		mov	dl, byte ptr [bp+var_2B+1]
		mov	dh, 0
		mov	bx, dx
		shl	bx, 1
		shl	bx, 1
		mov	dl, [bx+614Ch]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+563Fh], al
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 3
		jnz	short loc_343A

loc_341D:				; CODE XREF: sub_23BE:loc_3392j
		mov	al, byte ptr [bp+var_2B+1]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+614Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5638h], 10h

loc_343A:				; CODE XREF: sub_23BE+FD1j
					; sub_23BE+105Dj
		mov	byte_14940, 1
		mov	ax, 3
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp
		mov	al, [bp+var_29]
		les	bx, dword_18394
		add	bx, [bp+var_22]
		mov	es:[bx], al
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_59D
		inc	sp
		inc	sp

loc_345F:				; CODE XREF: sub_23BE+EBEj
					; sub_23BE+ED6j ...
		cmp	word_1A5AA, 1CEh
		jnz	short loc_347B
		cmp	word_1A5AC, 0AAh ; 'Њ'
		jnz	short loc_347B
		cmp	byte_1A51C, 0
		jnz	short loc_347B
		mov	byte_1A51C, 1

loc_347B:				; CODE XREF: sub_23BE+10A7j
					; sub_23BE+10AFj ...
		cmp	byte_1A51C, 0
		jz	short loc_34B0
		cmp	byte_1A51C, 1
		jnz	short loc_348E
		mov	byte_14941, 28h	; '('

loc_348E:				; CODE XREF: sub_23BE+10C9j
		cmp	byte_1A51C, 5Ah	; 'Z'
		jnz	short loc_34AC
		cmp	byte_1A1B8, 0
		jz	short loc_34A4
		mov	[bp+var_16], 4
		jmp	loc_361C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_34A4:				; CODE XREF: sub_23BE+10DCj
		mov	[bp+var_16], 2
		jmp	loc_361C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_34AC:				; CODE XREF: sub_23BE+10D5j
		inc	byte_1A51C

loc_34B0:				; CODE XREF: sub_23BE+10C2j
		cmp	word_1A5A6, 14h
		jle	short loc_34CF
		mov	ax, word_1A5AE
		shl	ax, 1
		add	ax, 0FFDAh
		cmp	ax, word_1A5AA
		jle	short loc_34CF
		inc	word_1A5AA
		mov	word_1A5A6, 14h

loc_34CF:				; CODE XREF: sub_23BE+10F7j
					; sub_23BE+1105j
		cmp	word_1A5A6, 0Eh
		jge	short loc_34E7
		cmp	word_1A5AA, 0
		jle	short loc_34E7
		dec	word_1A5AA
		mov	word_1A5A6, 0Eh

loc_34E7:				; CODE XREF: sub_23BE+1116j
					; sub_23BE+111Dj
		cmp	word_197A6, 0
		jnz	short loc_350E
		cmp	word_1A13A, 0
		jnz	short loc_350E
		mov	ax, word_1A5A8
		cmp	ax, word_14942
		jge	short loc_350E
		cmp	word_1A5AC, 0
		jle	short loc_350E
		dec	word_1A5AC
		add	word_1A5A8, 10h

loc_350E:				; CODE XREF: sub_23BE+112Ej
					; sub_23BE+1135j ...
		mov	ax, word_1A5A8
		cmp	ax, word_14942
		jg	short loc_351A
		jmp	loc_3607	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_351A:				; CODE XREF: sub_23BE+1157j
		mov	ax, word_1A5B0
		add	ax, 0FFF6h
		cmp	ax, word_1A5AC
		jg	short loc_3529
		jmp	loc_3607	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3529:				; CODE XREF: sub_23BE+1166j
		inc	word_1A5AC
		sub	word_1A5A8, 10h
		jmp	loc_3607	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3535:				; CODE XREF: sub_23BE+2F3j
		call	sub_4B81
		cmp	byte_149E1, 6
		jb	short loc_3548
		cmp	byte_149E1, 0Bh
		jbe	short loc_3592

loc_3548:				; CODE XREF: sub_23BE+1181j
		mov	ax, word_1A596
		mov	dx, 0Ch
		mul	dx
		mov	bx, ax
		mov	ax, word_197A4
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+644Ch]
		push	word ptr [bx+644Ah]
		mov	ax, word_1A596
		mov	dx, 0Ch
		mul	dx
		mov	bx, ax
		mov	ax, word_197A4
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+6006h]
		push	word ptr [bx+6004h]
		mov	ax, word_1A5A8
		add	ax, 8
		push	ax
		mov	ax, word_1A5A6
		inc	ax
		push	ax
		call	sub_4A9D
		add	sp, 0Ch

loc_3592:				; CODE XREF: sub_23BE+1188j
		inc	byte_149E1
		mov	al, byte_149E1
		mov	ah, 0
		sub	ax, 2
		cmp	ax, 0Eh		; switch 15 cases
		ja	short loc_3607	; default
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_35AC[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_35AC	dw offset loc_35F2	; DATA XREF: sub_23BE+11E9r
		dw offset loc_3607	; jump table for switch	statement
		dw offset loc_35CA
		dw offset loc_3607
		dw offset loc_3607
		dw offset loc_3607
		dw offset loc_3607
		dw offset loc_3607
		dw offset loc_35D2
		dw offset loc_3607
		dw offset loc_35F2
		dw offset loc_3607
		dw offset loc_35FA
		dw offset loc_3607
		dw offset loc_3602
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_35CA:				; CODE XREF: sub_23BE+11E9j
					; DATA XREF: sub_23BE:off_35ACo
		mov	word_197A4, 2	; case 0x2
		jmp	short loc_3607	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_35D2:				; CODE XREF: sub_23BE+11E9j
					; DATA XREF: sub_23BE:off_35ACo
		mov	word_197A4, 2	; case 0x8
		mov	ax, word_197AC
		mov	word_1A5A6, ax
		mov	ax, word_1831A
		mov	word_1A5A8, ax
		mov	ax, word_18646
		mov	word_1A5AA, ax
		mov	ax, word_19FFC
		mov	word_1A5AC, ax
		jmp	short loc_3607	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_35F2:				; CODE XREF: sub_23BE+11E9j
					; DATA XREF: sub_23BE:off_35ACo
		mov	word_197A4, 1	; case 0x0
		jmp	short loc_3607	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_35FA:				; CODE XREF: sub_23BE+11E9j
					; DATA XREF: sub_23BE:off_35ACo
		mov	word_197A4, 0	; case 0xC
		jmp	short loc_3607	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3602:				; CODE XREF: sub_23BE+11E9j
					; DATA XREF: sub_23BE:off_35ACo
		mov	byte_149E1, 0	; case 0xE

loc_3607:				; CODE XREF: sub_23BE+2E1j
					; sub_23BE+1159j ...
		cmp	[bp+var_23], 0	; default
		jnz	short loc_3610
		jmp	loc_244A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3610:				; CODE XREF: sub_23BE+124Dj
		call	sub_134DF
		mov	[bp+var_23], 0
		jmp	loc_244A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_361C:				; CODE XREF: sub_23BE+92j
					; sub_23BE+158j ...
		call	sub_134DF
		call	sub_6901
		call	sub_11C80
		mov	ax, [bp+var_16]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_23BE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_3634	proc far		; CODE XREF: sub_D95E:loc_DD9AP

var_12B		= byte ptr -12Bh
var_12A		= word ptr -12Ah
var_128		= word ptr -128h
var_112		= word ptr -112h
var_C0		= word ptr -0C0h
var_6E		= word ptr -6Eh
var_1D		= byte ptr -1Dh
var_1C		= word ptr -1Ch
var_1A		= word ptr -1Ah
var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 12Ch
		cmp	bp, sp
		jb	short loc_3647
		cmp	word_17D9E, sp
		ja	short loc_364C

loc_3647:				; CODE XREF: sub_3634+Bj
		call	far ptr	errStackOverflow

loc_364C:				; CODE XREF: sub_3634+11j
		mov	[bp+var_1D], 0
		mov	[bp+var_12], 0
		mov	[bp+var_14], 0
		mov	[bp+var_E], 0
		mov	[bp+var_10], 14h
		mov	[bp+var_A], 0
		mov	[bp+var_C], 64h	; 'd'
		mov	[bp+var_6], 0
		mov	[bp+var_8], 32h	; '2'
		mov	[bp+var_2], 0
		mov	[bp+var_4], 64h	; 'd'
		mov	[bp+var_12B], 0
		mov	word_19E86, 0Ah
		xor	si, si
		jmp	short loc_36A1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3691:				; CODE XREF: sub_3634+70j
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	word ptr [bx+6466h], 0
		inc	si

loc_36A1:				; CODE XREF: sub_3634+5Bj
		cmp	si, 32h	; '2'
		jl	short loc_3691
		mov	al, byte_19FFE
		mov	ah, 0
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	al, byte_1841B
		mov	ah, 0
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		cmp	byte_19FFE, 0
		jnz	short loc_36CC
		mov	ax, 1
		jmp	short loc_36CE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_36CC:				; CODE XREF: sub_3634+91j
		xor	ax, ax

loc_36CE:				; CODE XREF: sub_3634+96j
		mov	byte_19FFE, al
		cmp	byte_1841B, 0
		jnz	short loc_36DD
		mov	ax, 1
		jmp	short loc_36DF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_36DD:				; CODE XREF: sub_3634+A2j
		xor	ax, ax

loc_36DF:				; CODE XREF: sub_3634+A7j
		mov	byte_1841B, al
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	al, byte_19FFE
		mov	ah, 0
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	al, byte_1841B
		mov	ah, 0
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		cmp	byte_19FFE, 0
		jnz	short loc_3728
		mov	ax, 1
		jmp	short loc_372A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3728:				; CODE XREF: sub_3634+EDj
		xor	ax, ax

loc_372A:				; CODE XREF: sub_3634+F2j
		mov	byte_19FFE, al
		cmp	byte_1841B, 0
		jnz	short loc_3739
		mov	ax, 1
		jmp	short loc_373B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3739:				; CODE XREF: sub_3634+FEj
		xor	ax, ax

loc_373B:				; CODE XREF: sub_3634+103j
		mov	byte_1841B, al
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 126Bh
		push	ax
		push	ss
		lea	ax, [bp+var_112]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_128]
		push	ax
		mov	ax, word_197A2
		inc	ax
		push	ax
		call	sub_12BDF
		add	sp, 8
		push	dx
		push	ax
		push	ss
		lea	ax, [bp+var_112]
		push	ax
		call	sub_13602
		add	sp, 8
		push	ds
		mov	ax, 1273h
		push	ax
		push	ss
		lea	ax, [bp+var_C0]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_128]
		push	ax
		mov	bx, word_197A2
		shl	bx, 1
		push	word ptr [bx+1ECh]
		call	sub_12BDF
		add	sp, 8
		push	dx
		push	ax
		push	ss
		lea	ax, [bp+var_C0]
		push	ax
		call	sub_13602
		add	sp, 8
		push	ds
		mov	ax, 127Eh
		push	ax
		push	ss
		lea	ax, [bp+var_C0]
		push	ax
		call	sub_13602
		add	sp, 8
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_128]
		push	ax
		xor	dx, dx
		mov	ax, 3Ch	; '<'
		push	dx
		push	ax
		mov	bx, word_197A2
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+20Eh]
		push	word ptr [bx+20Ch]
		call	sub_2B9
		push	dx
		push	ax
		call	sub_12C28
		add	sp, 0Ah
		push	dx
		push	ax
		push	ss
		lea	ax, [bp+var_C0]
		push	ax
		call	sub_13602
		add	sp, 8
		push	ds
		mov	ax, 1289h
		push	ax
		push	ss
		lea	ax, [bp+var_C0]
		push	ax
		call	sub_13602
		add	sp, 8
		xor	si, si
		mov	[bp+var_16], si
		mov	[bp+var_18], si
		jmp	short loc_3862
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3847:				; CODE XREF: sub_3634+231j
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		mov	dx, [bx+20Eh]
		mov	ax, [bx+20Ch]
		add	ax, [bp+var_18]
		adc	dx, [bp+var_16]
		mov	[bp+var_16], dx
		mov	[bp+var_18], ax
		inc	si

loc_3862:				; CODE XREF: sub_3634+211j
		cmp	si, 10h
		jl	short loc_3847
		push	ds
		mov	ax, 1292h
		push	ax
		push	ss
		lea	ax, [bp+var_6E]
		push	ax
		call	sub_13669
		add	sp, 8
		xor	dx, dx
		mov	ax, 0E10h
		push	dx
		push	ax
		push	[bp+var_16]
		push	[bp+var_18]
		call	sub_2B9
		or	dx, dx
		jge	short loc_3892
		jmp	loc_3913
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3892:				; CODE XREF: sub_3634+259j
		jg	short loc_389B
		or	ax, ax
		ja	short loc_389B
		jmp	loc_3913
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_389B:				; CODE XREF: sub_3634:loc_3892j
					; sub_3634+262j
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_128]
		push	ax
		xor	dx, dx
		mov	ax, 0E10h
		push	dx
		push	ax
		push	[bp+var_16]
		push	[bp+var_18]
		call	sub_2B9
		push	dx
		push	ax
		call	sub_12C28
		add	sp, 0Ah
		push	dx
		push	ax
		push	ss
		lea	ax, [bp+var_6E]
		push	ax
		call	sub_13602
		add	sp, 8
		xor	dx, dx
		mov	ax, 0E10h
		push	dx
		push	ax
		push	[bp+var_16]
		push	[bp+var_18]
		call	sub_2B9
		or	dx, dx
		jl	short loc_3901
		jg	short loc_38ED
		cmp	ax, 1
		jbe	short loc_3901

loc_38ED:				; CODE XREF: sub_3634+2B2j
		push	ds
		mov	ax, 129Fh
		push	ax
		push	ss
		lea	ax, [bp+var_6E]
		push	ax
		call	sub_13602
		add	sp, 8
		jmp	short loc_3913
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3901:				; CODE XREF: sub_3634+2B0j
					; sub_3634+2B7j
		push	ds
		mov	ax, 12A7h
		push	ax
		push	ss
		lea	ax, [bp+var_6E]
		push	ax
		call	sub_13602
		add	sp, 8

loc_3913:				; CODE XREF: sub_3634+25Bj
					; sub_3634+264j ...
		mov	dx, [bp+var_16]
		mov	ax, [bp+var_18]
		push	dx
		push	ax
		xor	dx, dx
		mov	ax, 0E10h
		push	dx
		push	ax
		push	[bp+var_16]
		push	[bp+var_18]
		call	sub_2B9
		xor	cx, cx
		mov	bx, 0E10h
		call	sub_372
		pop	bx
		pop	cx
		sub	bx, ax
		sbb	cx, dx
		mov	[bp+var_16], cx
		mov	[bp+var_18], bx
		xor	dx, dx
		mov	ax, 3Ch	; '<'
		push	dx
		push	ax
		push	cx
		push	bx
		call	sub_2B9
		or	dx, dx
		jge	short loc_3958
		jmp	loc_39D9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3958:				; CODE XREF: sub_3634+31Fj
		jg	short loc_3961
		or	ax, ax
		ja	short loc_3961
		jmp	loc_39D9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3961:				; CODE XREF: sub_3634:loc_3958j
					; sub_3634+328j
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_128]
		push	ax
		xor	dx, dx
		mov	ax, 3Ch	; '<'
		push	dx
		push	ax
		push	[bp+var_16]
		push	[bp+var_18]
		call	sub_2B9
		push	dx
		push	ax
		call	sub_12C28
		add	sp, 0Ah
		push	dx
		push	ax
		push	ss
		lea	ax, [bp+var_6E]
		push	ax
		call	sub_13602
		add	sp, 8
		xor	dx, dx
		mov	ax, 3Ch	; '<'
		push	dx
		push	ax
		push	[bp+var_16]
		push	[bp+var_18]
		call	sub_2B9
		or	dx, dx
		jl	short loc_39C7
		jg	short loc_39B3
		cmp	ax, 1
		jbe	short loc_39C7

loc_39B3:				; CODE XREF: sub_3634+378j
		push	ds
		mov	ax, 1289h
		push	ax
		push	ss
		lea	ax, [bp+var_6E]
		push	ax
		call	sub_13602
		add	sp, 8
		jmp	short loc_39D9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_39C7:				; CODE XREF: sub_3634+376j
					; sub_3634+37Dj
		push	ds
		mov	ax, 12AEh
		push	ax
		push	ss
		lea	ax, [bp+var_6E]
		push	ax
		call	sub_13602
		add	sp, 8

loc_39D9:				; CODE XREF: sub_3634+321j
					; sub_3634+32Aj ...
		xor	di, di
		mov	si, di
		mov	ax, 140h
		push	ax
		push	ss
		lea	ax, [bp+var_112]
		push	ax
		call	sub_13692
		add	sp, 4
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	dx, ax
		pop	ax
		sub	ax, dx
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_12A], ax

loc_3A04:				; CODE XREF: sub_3634+4BCj
					; sub_3634+4C6j ...
		cmp	[bp+var_12B], 0
		jz	short loc_3A0E
		jmp	loc_3DD4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3A0E:				; CODE XREF: sub_3634+3D5j
		cmp	word_197A2, 8
		jge	short loc_3A1C
		call	sub_615A
		jmp	short loc_3A28
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3A1C:				; CODE XREF: sub_3634+3DFj
		cmp	word_197A2, 8
		jl	short loc_3A28
		call	sub_62E4

loc_3A28:				; CODE XREF: sub_3634+3E6j
					; sub_3634+3EDj
		mov	al, byte_19FFE
		mov	ah, 0
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	al, byte_1841B
		mov	ah, 0
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		cmp	byte_19FFE, 0
		jnz	short loc_3A4E
		mov	ax, 1
		jmp	short loc_3A50
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3A4E:				; CODE XREF: sub_3634+413j
		xor	ax, ax

loc_3A50:				; CODE XREF: sub_3634+418j
		mov	byte_19FFE, al
		cmp	byte_1841B, 0
		jnz	short loc_3A5F
		mov	ax, 1
		jmp	short loc_3A61
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3A5F:				; CODE XREF: sub_3634+424j
		xor	ax, ax

loc_3A61:				; CODE XREF: sub_3634+429j
		mov	byte_1841B, al
		call	sub_4B81
		mov	bx, word_19E86
		shl	bx, 1
		mov	bx, [bx+842h]
		shl	bx, 1
		shl	bx, 1
		mov	ax, word_1A596
		mov	cx, 5
		shl	ax, cl
		add	bx, ax
		push	word ptr [bx+5E42h]
		push	word ptr [bx+5E40h]
		mov	bx, word_19E86
		shl	bx, 1
		mov	bx, [bx+842h]
		shl	bx, 1
		shl	bx, 1
		mov	ax, word_1A596
		shl	ax, cl
		add	bx, ax
		push	word ptr [bx+5EC4h]
		push	word ptr [bx+5EC2h]
		mov	ax, word_1A5A8
		add	ax, 8
		push	ax
		mov	ax, word_1A5A6
		inc	ax
		push	ax
		call	sub_4A9D
		add	sp, 0Ch
		cmp	[bp+var_1D], 0
		jnz	short loc_3AC3
		jmp	loc_3B66
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3AC3:				; CODE XREF: sub_3634+48Aj
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_3AFD
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		call	sub_11DA3
		add	sp, 6
		sub	ax, [bp+var_1C]
		sbb	dx, [bp+var_1A]
		mov	bx, di
		shl	bx, 1
		shl	bx, 1
		lea	cx, [bp+var_14]
		add	bx, cx
		cmp	dx, ss:[bx+2]
		jge	short loc_3AF3
		jmp	loc_3A04
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3AF3:				; CODE XREF: sub_3634+4BAj
		jg	short loc_3AFD
		cmp	ax, ss:[bx]
		ja	short loc_3AFD
		jmp	loc_3A04
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3AFD:				; CODE XREF: sub_3634+496j
					; sub_3634:loc_3AF3j ...
		call	sub_12B2C
		or	ax, ax
		jz	short loc_3B0E
		call	sub_12827
		jmp	loc_3AFD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3B0E:				; CODE XREF: sub_3634+4D0j
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		jmp	loc_3DBC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3B66:				; CODE XREF: sub_3634+48Cj
		or	di, di
		jz	short loc_3B6D
		jmp	loc_3C36
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3B6D:				; CODE XREF: sub_3634+534j
		db	36h
		mov	al, byte ptr [bp+si+var_112]
		mov	byte ptr [bp+var_128], al
		mov	byte ptr [bp+var_128+1], 0
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		push	ss
		lea	ax, [bp+var_128]
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B4h ; 'Д'
		push	ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		add	ax, [bp+var_12A]
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		push	ss
		lea	ax, [bp+var_128]
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B4h ; 'Д'
		push	ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		add	ax, [bp+var_12A]
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		inc	si
		push	ss
		lea	ax, [bp+var_112]
		push	ax
		call	sub_13692
		add	sp, 4
		cmp	ax, si
		jz	short loc_3BF2
		jmp	loc_3A04
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3BF2:				; CODE XREF: sub_3634+5B9j
		inc	di
		mov	[bp+var_1D], 1
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		call	sub_11DA3
		add	sp, 6
		mov	[bp+var_1A], dx
		mov	[bp+var_1C], ax
		xor	si, si
		mov	ax, 140h
		push	ax
		push	ss
		lea	ax, [bp+var_C0]
		push	ax
		call	sub_13692
		add	sp, 4
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	dx, ax
		pop	ax
		sub	ax, dx
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_12A], ax
		jmp	loc_3A04
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3C36:				; CODE XREF: sub_3634+536j
		cmp	di, 1
		jz	short loc_3C3E
		jmp	loc_3D07
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3C3E:				; CODE XREF: sub_3634+605j
		db	36h
		mov	al, byte ptr [bp+si+var_C0]
		mov	byte ptr [bp+var_128], al
		mov	byte ptr [bp+var_128+1], 0
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		push	ss
		lea	ax, [bp+var_128]
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B4h ; 'Д'
		push	ax
		mov	ax, si
		shl	ax, 1		; DATA XREF: sub_44Fr
		shl	ax, 1
		shl	ax, 1
		add	ax, [bp+var_12A]
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		push	ss
		lea	ax, [bp+var_128]
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B4h ; 'Д'
		push	ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		add	ax, [bp+var_12A]
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		inc	si
		push	ss
		lea	ax, [bp+var_C0]
		push	ax
		call	sub_13692
		add	sp, 4
		cmp	ax, si
		jz	short loc_3CC3
		jmp	loc_3A04
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3CC3:				; CODE XREF: sub_3634+68Aj
		inc	di
		inc	di
		mov	[bp+var_1D], 1
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		call	sub_11DA3
		add	sp, 6
		mov	[bp+var_1A], dx
		mov	[bp+var_1C], ax
		xor	si, si
		mov	ax, 140h
		push	ax
		push	ss
		lea	ax, [bp+var_6E]
		push	ax
		call	sub_13692
		add	sp, 4
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	dx, ax
		pop	ax
		sub	ax, dx
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_12A], ax
		jmp	loc_3A04
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3D07:				; CODE XREF: sub_3634+607j
		cmp	di, 3
		jz	short loc_3D0F
		jmp	loc_3DC3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3D0F:				; CODE XREF: sub_3634+6D6j
		cmp	word_197A2, 0Fh
		jz	short loc_3D19
		jmp	loc_3DB9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3D19:				; CODE XREF: sub_3634+6E0j
		db	36h
		mov	al, byte ptr [bp+si+var_6E]
		mov	byte ptr [bp+var_128], al
		mov	byte ptr [bp+var_128+1], 0
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		push	ss
		lea	ax, [bp+var_128]
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B4h ; 'Д'
		push	ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		add	ax, [bp+var_12A]
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		push	ss
		lea	ax, [bp+var_128]
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B4h ; 'Д'
		push	ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		add	ax, [bp+var_12A]
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		inc	si
		push	ss
		lea	ax, [bp+var_6E]
		push	ax
		call	sub_13692
		add	sp, 4
		cmp	ax, si
		jz	short loc_3D9C
		jmp	loc_3A04
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3D9C:				; CODE XREF: sub_3634+763j
		mov	di, 4
		mov	[bp+var_1D], 1
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		call	sub_11DA3
		add	sp, 6
		mov	[bp+var_1A], dx
		mov	[bp+var_1C], ax
		jmp	loc_3A04
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3DB9:				; CODE XREF: sub_3634+6E2j
		mov	di, 4

loc_3DBC:				; CODE XREF: sub_3634+52Fj
		mov	[bp+var_1D], 0
		jmp	loc_3A04
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3DC3:				; CODE XREF: sub_3634+6D8j
		cmp	[bp+var_1D], 0
		jz	short loc_3DCC
		jmp	loc_3A04
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3DCC:				; CODE XREF: sub_3634+793j
		mov	[bp+var_12B], 1
		jmp	loc_3A04
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3DD4:				; CODE XREF: sub_3634+3D7j
					; sub_3634+7AEj
		call	sub_12B2C
		or	ax, ax
		jz	short loc_3DE4
		call	sub_12827
		jmp	short loc_3DD4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3DE4:				; CODE XREF: sub_3634+7A7j
		call	sub_134DF
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_3634	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_3DEF	proc far		; CODE XREF: start+F6P

var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_B		= byte ptr -0Bh
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
var_1		= byte ptr -1

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 10h
		cmp	word_17D9E, sp
		ja	short loc_3E02
		call	far ptr	errStackOverflow

loc_3E02:				; CODE XREF: sub_3DEF+Cj
		mov	[bp+var_B], 1
		mov	byte_18141, 0
		call	sub_11CA6
		call	sub_10176
		call	sub_72AE
		xor	ax, ax
		push	ax
		push	ax
		call	sub_135AA
		add	sp, 4
		push	ax
		call	sub_12FC0
		inc	sp
		inc	sp
		xor	si, si
		jmp	short loc_3E72
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3E32:				; CODE XREF: sub_3DEF+86j
		xor	di, di
		jmp	short loc_3E6B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3E36:				; CODE XREF: sub_3DEF+80j
		call	sub_12FD1
		mov	bx, si
		shl	bx, 1
		cwd
		idiv	word ptr [bx+772h]
		or	dx, dx
		jnz	short loc_3E5A
		mov	ax, si
		mov	dx, 3E8h
		mul	dx
		mov	bx, ax
		add	bx, di
		mov	byte ptr [bx+456Fh], 1
		jmp	short loc_3E6A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3E5A:				; CODE XREF: sub_3DEF+57j
		mov	ax, si
		mov	dx, 3E8h
		mul	dx
		mov	bx, ax
		add	bx, di
		mov	byte ptr [bx+456Fh], 0

loc_3E6A:				; CODE XREF: sub_3DEF+69j
		inc	di

loc_3E6B:				; CODE XREF: sub_3DEF+45j
		cmp	di, 3E8h
		jl	short loc_3E36
		inc	si

loc_3E72:				; CODE XREF: sub_3DEF+41j
		cmp	si, 4
		jl	short loc_3E32
		call	sub_7CBF
		call	sub_D264
		call	sub_4440
		mov	byte_1A13E, 1
		call	sub_E849
		push	cs
		call	near ptr sub_66A
		mov	byte_1A13E, 1
		mov	byte_18044, 0
		mov	word_197A2, 0
		call	sub_FD16

loc_3EA9:				; CODE XREF: sub_3DEF+D4j
					; sub_3DEF+2B2j ...
		call	sub_8628
		mov	[bp+var_10], ax
		cmp	ax, 1
		jz	short loc_3EB9
		jmp	loc_40B4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3EB9:				; CODE XREF: sub_3DEF+C5j
		call	sub_8EC9
		mov	[bp+var_10], ax
		or	ax, ax
		jz	short loc_3EA9
		dec	ax
		mov	word_197A2, ax

loc_3EC9:				; CODE XREF: sub_3DEF+23Bj
					; sub_3DEF+244j ...
		call	sub_F7C1
		mov	ax, word_197A2
		inc	ax
		push	ax
		call	sub_F6C2
		inc	sp
		inc	sp
		call	couldBeLoadCastle ; This is part of the	flow when restarting a castle
		mov	ax, word_1A5A8
		mov	cx, 4
		shl	ax, cl
		mov	word_1A5A8, ax
		mov	ax, word_1A5A6
		shl	ax, 1
		mov	word_1A5A6, ax
		mov	ax, word_1A5AA
		shl	ax, 1
		mov	word_1A5AA, ax
		mov	byte_19FFE, 0
		mov	byte_1841B, 1
		mov	word_19E84, 32h	; '2'
		mov	word_1A51A, 0
		mov	word_1A5BA, 0
		mov	byte_1872E, 0
		mov	byte_1A1B8, 0
		mov	byte_14941, 0
		mov	byte_1A51C, 0
		mov	word_14A6C, 0FFFFh
		mov	byte_1841A, 0
		mov	byte_1A7C8, 0
		cmp	word_197A2, 8
		jge	short loc_3F97
		mov	word_18316, 0
		xor	si, si
		jmp	short loc_3F92
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3F4B:				; CODE XREF: sub_3DEF+1A6j
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		mov	bx, si
		shl	bx, 1
		mov	[bx+5624h], dx
		call	sub_12FD1
		mov	bx, 13Bh
		cwd
		idiv	bx
		mov	bx, si
		shl	bx, 1
		mov	[bx+63FCh], dx
		call	sub_12FD1
		mov	bx, 3Ch	; '<'
		cwd
		idiv	bx
		add	dx, 14h
		mov	bx, si
		shl	bx, 1
		mov	[bx+4076h], dx
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+4148h], 0
		inc	si

loc_3F92:				; CODE XREF: sub_3DEF+15Aj
		cmp	si, 7
		jl	short loc_3F4B

loc_3F97:				; CODE XREF: sub_3DEF+150j
		cmp	word_197A2, 8
		jl	short loc_3FB2
		xor	si, si
		jmp	short loc_3FAD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_3FA2:				; CODE XREF: sub_3DEF+1C1j
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+640Ah], 0FFFFh
		inc	si

loc_3FAD:				; CODE XREF: sub_3DEF+1B1j
		cmp	si, 14h
		jl	short loc_3FA2

loc_3FB2:				; CODE XREF: sub_3DEF+1ADj
		mov	bx, word_197A2
		shl	bx, 1
		inc	word ptr [bx+1ECh]
		push	ss
		lea	ax, [bp+var_A]
		push	ax
		call	sub_135AA
		add	sp, 4
		mov	[bp+var_8], dx
		mov	[bp+var_A], ax
		push	cs
		call	near ptr sub_DE8
		mov	[bp+var_10], ax
		push	ss
		lea	ax, [bp+var_6]
		push	ax
		call	sub_135AA
		add	sp, 4
		mov	[bp+var_4], dx
		mov	[bp+var_6], ax
		mov	bx, word_197A2
		shl	bx, 1
		shl	bx, 1
		mov	dx, [bx+20Eh]
		mov	ax, [bx+20Ch]
		mov	cx, [bp+var_4]
		mov	bx, [bp+var_6]
		sub	bx, [bp+var_A]
		sbb	cx, [bp+var_8]
		add	ax, bx
		adc	dx, cx
		mov	bx, word_197A2
		shl	bx, 1
		shl	bx, 1
		mov	[bx+20Eh], dx
		mov	[bx+20Ch], ax
		cmp	[bp+var_10], 0
		jnz	short loc_402D
		mov	ax, 1
		push	ax
		call	sub_7F60
		inc	sp
		inc	sp
		jmp	loc_3EC9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402D:				; CODE XREF: sub_3DEF+22Ej
		cmp	[bp+var_10], 1
		jnz	short loc_4036
		jmp	loc_3EC9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4036:				; CODE XREF: sub_3DEF+242j
		cmp	[bp+var_10], 2
		jnz	short loc_404A
		mov	ax, 2
		push	ax
		call	sub_7F60
		inc	sp
		inc	sp
		jmp	loc_3EC9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404A:				; CODE XREF: sub_3DEF+24Bj
		cmp	[bp+var_10], 4
		jnz	short loc_40AF
		mov	ax, word_1A51A
		mov	bx, word_197A2
		shl	bx, 1
		mov	[bx+1B4h], ax
		mov	word_14394, 0
		xor	si, si
		jmp	short loc_4074
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4067:				; CODE XREF: sub_3DEF+288j
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+1B4h]
		add	word_14394, ax
		inc	si

loc_4074:				; CODE XREF: sub_3DEF+276j
		cmp	si, 10h
		jl	short loc_4067
		cmp	word_197A2, 0Fh
		jnz	short loc_4095
		cmp	word_14394, 1833h
		jge	short loc_4095
		mov	ax, 5
		push	ax
		call	sub_7F60
		inc	sp
		inc	sp
		jmp	short loc_40AF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4095:				; CODE XREF: sub_3DEF+28Fj
					; sub_3DEF+297j
		cmp	word_197A2, 0Fh
		jnz	short loc_40A4
		call	sub_D95E
		jmp	loc_3EA9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A4:				; CODE XREF: sub_3DEF+2ABj
		mov	ax, 3
		push	ax
		call	sub_7F60
		inc	sp
		inc	sp

loc_40AF:				; CODE XREF: sub_3DEF+25Fj
					; sub_3DEF+2A4j
		mov	[bp+var_10], 0

loc_40B4:				; CODE XREF: sub_3DEF+C7j
		cmp	[bp+var_10], 2
		jnz	short loc_40BF
		call	sub_FB96

loc_40BF:				; CODE XREF: sub_3DEF+2C9j
		cmp	[bp+var_10], 3
		jnz	short loc_40CA
		call	sub_F8A8

loc_40CA:				; CODE XREF: sub_3DEF+2D4j
		cmp	[bp+var_10], 4
		jz	short loc_40D3
		jmp	loc_4147
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D3:				; CODE XREF: sub_3DEF+2DFj
					; sub_3DEF:loc_4144j
		call	sub_8C1A
		mov	[bp+var_10], ax
		cmp	ax, 1
		jnz	short loc_40F1
		cmp	byte_1A13E, 0
		jnz	short loc_40EC
		mov	ax, 1
		jmp	short loc_40EE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EC:				; CODE XREF: sub_3DEF+2F6j
		xor	ax, ax

loc_40EE:				; CODE XREF: sub_3DEF+2FBj
		mov	byte_1A13E, al

loc_40F1:				; CODE XREF: sub_3DEF+2EFj
		cmp	[bp+var_10], 2
		jnz	short loc_4108
		cmp	byte_19E8C, 0
		jnz	short loc_4103
		mov	ax, 1
		jmp	short loc_4105
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4103:				; CODE XREF: sub_3DEF+30Dj
		xor	ax, ax

loc_4105:				; CODE XREF: sub_3DEF+312j
		mov	byte_19E8C, al

loc_4108:				; CODE XREF: sub_3DEF+306j
		cmp	[bp+var_10], 3
		jnz	short loc_4113
		call	sub_9B11

loc_4113:				; CODE XREF: sub_3DEF+31Dj
		cmp	[bp+var_10], 4
		jnz	short loc_412A
		cmp	byte_18044, 0
		jnz	short loc_4125
		mov	ax, 1
		jmp	short loc_4127
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4125:				; CODE XREF: sub_3DEF+32Fj
		xor	ax, ax

loc_4127:				; CODE XREF: sub_3DEF+334j
		mov	byte_18044, al

loc_412A:				; CODE XREF: sub_3DEF+328j
		cmp	[bp+var_10], 5
		jnz	short loc_413B
		mov	ax, 4
		push	ax
		call	sub_7F60
		inc	sp
		inc	sp

loc_413B:				; CODE XREF: sub_3DEF+33Fj
		cmp	[bp+var_10], 0
		jnz	short loc_4144
		jmp	loc_3EA9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4144:				; CODE XREF: sub_3DEF+350j
		jmp	loc_40D3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4147:				; CODE XREF: sub_3DEF+2E1j
		cmp	[bp+var_10], 5
		jnz	short loc_4152
		call	sub_E1CB

loc_4152:				; CODE XREF: sub_3DEF+35Cj
		cmp	[bp+var_10], 6
		jnz	short loc_415D
		call	sub_BAEF

loc_415D:				; CODE XREF: sub_3DEF+367j
		cmp	[bp+var_10], 63h ; 'c'
		jnz	short loc_417E
		cmp	[bp+var_B], 0
		jz	short loc_417E
		mov	[bp+var_10], 7
		cmp	[bp+var_B], 0
		jnz	short loc_4179
		mov	ax, 1
		jmp	short loc_417B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4179:				; CODE XREF: sub_3DEF+383j
		xor	ax, ax

loc_417B:				; CODE XREF: sub_3DEF+388j
		mov	[bp+var_B], al

loc_417E:				; CODE XREF: sub_3DEF+372j
					; sub_3DEF+378j
		cmp	[bp+var_10], 63h ; 'c'
		jnz	short loc_4199
		call	sub_E849
		cmp	[bp+var_B], 0
		jnz	short loc_4194
		mov	ax, 1
		jmp	short loc_4196
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4194:				; CODE XREF: sub_3DEF+39Ej
		xor	ax, ax

loc_4196:				; CODE XREF: sub_3DEF+3A3j
		mov	[bp+var_B], al

loc_4199:				; CODE XREF: sub_3DEF+393j
		cmp	[bp+var_10], 7
		jz	short loc_41A2
		jmp	loc_42BF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A2:				; CODE XREF: sub_3DEF+3AEj
		mov	ax, word_197A2
		mov	[bp+var_E], ax
		mov	al, byte_1A13E
		mov	[bp+var_2], al
		mov	byte_1A13E, 0
		mov	al, byte_19E8C
		mov	[bp+var_1], al
		mov	byte_19E8C, 0
		call	sub_12FD1
		mov	bx, 5
		cwd
		idiv	bx
		mov	di, dx
		mov	bx, di
		shl	bx, 1
		mov	ax, [bx+168h]
		mov	word_197A2, ax
		call	sub_F7C1
		mov	ax, word_197A2
		inc	ax
		push	ax
		call	sub_F6C2
		inc	sp
		inc	sp
		call	couldBeLoadCastle
		mov	ax, word_1A5A8
		mov	cx, 4
		shl	ax, cl
		mov	word_1A5A8, ax
		mov	ax, word_1A5A6
		shl	ax, 1
		mov	word_1A5A6, ax
		mov	ax, word_1A5AA
		shl	ax, 1
		mov	word_1A5AA, ax
		mov	byte_19FFE, 0
		mov	byte_1841B, 1
		mov	word_19E84, 32h	; '2'
		mov	word_1A51A, 0
		mov	word_1A5BA, 0
		mov	byte_1872E, 0
		mov	byte_1A1B8, 0
		mov	byte_14941, 0
		mov	byte_1A51C, 0
		mov	word_14A6C, 0FFFFh
		mov	byte_1841A, 0
		mov	byte_1A7C8, 0
		mov	word_18316, 0
		xor	si, si
		jmp	loc_4299
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4252:				; CODE XREF: sub_3DEF+4AFj
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		mov	bx, si
		shl	bx, 1
		mov	[bx+5624h], dx
		call	sub_12FD1
		mov	bx, 13Bh
		cwd
		idiv	bx
		mov	bx, si
		shl	bx, 1
		mov	[bx+63FCh], dx
		call	sub_12FD1
		mov	bx, 3Ch	; '<'
		cwd
		idiv	bx
		add	dx, 14h
		mov	bx, si
		shl	bx, 1
		mov	[bx+4076h], dx
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+4148h], 0
		inc	si

loc_4299:				; CODE XREF: sub_3DEF+460j
		cmp	si, 7
		jge	short loc_42A1
		jmp	loc_4252
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_42A1:				; CODE XREF: sub_3DEF+4ADj
		push	di
		call	sub_763E
		inc	sp
		inc	sp
		push	cs
		call	near ptr sub_23BE
		mov	al, [bp+var_2]
		mov	byte_1A13E, al
		mov	al, [bp+var_1]
		mov	byte_19E8C, al
		mov	ax, [bp+var_E]
		mov	word_197A2, ax

loc_42BF:				; CODE XREF: sub_3DEF+3B0j
		cmp	[bp+var_10], 8
		jz	short loc_42C8
		jmp	loc_3EA9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_42C8:				; CODE XREF: sub_3DEF+4D4j
		call	sub_FA30
		call	sub_42F2

loc_42D2:				; CODE XREF: sub_3DEF+4F1j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_42E2
		call	sub_12827
		jmp	short loc_42D2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_42E2:				; CODE XREF: sub_3DEF+4EAj
		call	sub_FDB2
		call	sub_10326

loc_42EC:
		mov	sp, bp

loc_42EE:
		pop	bp

loc_42EF:
		pop	di

loc_42F0:
		pop	si
		retf
sub_3DEF	endp

seg001		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg002		segment	byte public 'CODE' use16
		assume cs:seg002
		;org 2
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_42F2	proc far		; CODE XREF: sub_3DEF+4DEP
					; sub_6927:loc_6935P ...

var_10		= word ptr -10h

		push	bp
		mov	bp, sp
		sub	sp, 10h
		cmp	word_17D9E, sp
		ja	short loc_4303

loc_42FE:
		call	far ptr	errStackOverflow

loc_4303:				; CODE XREF: sub_42F2+Aj
		mov	byte ptr [bp+var_10+1],	0
		mov	byte ptr [bp+var_10], 3
		push	ss
		lea	ax, [bp+var_10]
		push	ax
		push	ss
		lea	ax, [bp+var_10]
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_12954
		add	sp, 0Ah
		mov	sp, bp
		pop	bp
		retf
sub_42F2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4325	proc far		; CODE XREF: sub_4515+24p sub_4B81+29p ...

arg_0		= byte ptr  6

		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_4333
		call	far ptr	errStackOverflow

loc_4333:				; CODE XREF: sub_4325+7j
		mov	al, 5
		mov	dx, 3CEh
		out	dx, al		; EGA: graph 1 and 2 addr reg:
					; mode register.Data bits:
					; 0-1: Write mode 0-2
					; 2: test condition
					; 3: read mode:	1=color	compare, 0=direct
					; 4: 1=use odd/even RAM	addressing
					; 5: 1=use CGA mid-res map (2-bits/pixel)
		mov	al, [bp+arg_0]
		mov	dx, 3CFh
		out	dx, al		; EGA port: graphics controller	data register
		pop	bp
		retf
sub_4325	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4342	proc far		; CODE XREF: sub_4540+4Cp sub_4540+76p ...

arg_0		= byte ptr  6

		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_4350
		call	far ptr	errStackOverflow

loc_4350:				; CODE XREF: sub_4342+7j
		mov	al, 4
		mov	dx, 3CEh
		out	dx, al		; EGA: graph 1 and 2 addr reg:
					; read map select.
					; Data bits 0-2	select map # for read mode 00.
		mov	al, [bp+arg_0]
		mov	dx, 3CFh
		out	dx, al		; EGA port: graphics controller	data register
		pop	bp
		retf
sub_4342	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_436D
		call	far ptr	errStackOverflow

loc_436D:				; CODE XREF: seg002:0076j
		mov	al, 3
		mov	dx, 3CEh
		out	dx, al		; EGA: graph 1 and 2 addr reg:
					; data rotate and function select for write mode 00. Bits:
					; 0-2: set rotate count	for write mode 00
					; 3-4: fn for write modes 00 and 02
					;      00=no change; 01=AND; 10=OR; 11=XOR
		mov	al, [bp+6]
		mov	cx, 4
		shl	al, cl
		mov	dx, 3CFh
		out	dx, al		; EGA port: graphics controller	data register
		pop	bp
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4381	proc far		; CODE XREF: sub_4515+1Bp sub_4540+43p ...

arg_0		= byte ptr  6

		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_438F
		call	far ptr	errStackOverflow

loc_438F:				; CODE XREF: sub_4381+7j
		mov	al, 2
		mov	dx, 3C4h
		out	dx, al		; EGA: sequencer address reg
					; map mask: data bits 0-3 enable writes	to bit planes 0-3
		mov	al, [bp+arg_0]
		mov	dx, 3C5h
		out	dx, al		; EGA port: sequencer data register
		pop	bp
		retf
sub_4381	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_439E	proc far		; CODE XREF: sub_66A+656P sub_DE8+195P ...

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_43AC
		call	far ptr	errStackOverflow

loc_43AC:				; CODE XREF: sub_439E+7j
		mov	ax, [bp+arg_0]
		mov	cx, 0Dh
		shl	ax, cl
		les	bx, dword_1492E
		add	bx, ax
		mov	word ptr dword_1A1C0+2,	es
		mov	word ptr dword_1A1C0, bx
		pop	bp
		retf
sub_439E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_43C4	proc far		; CODE XREF: sub_66A+661P sub_DE8+1A2P ...

var_10		= word ptr -10h
arg_0		= byte ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 10h
		cmp	word_17D9E, sp
		ja	short loc_43D5
		call	far ptr	errStackOverflow

loc_43D5:				; CODE XREF: sub_43C4+Aj
		mov	byte ptr [bp+var_10+1],	5
		mov	al, [bp+arg_0]
		mov	byte ptr [bp+var_10], al
		push	ss
		lea	ax, [bp+var_10]
		push	ax
		push	ss
		lea	ax, [bp+var_10]
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_12954
		add	sp, 0Ah
		mov	sp, bp
		pop	bp
		retf
sub_43C4	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		sub	sp, 10h
		cmp	word_17D9E, sp
		ja	short loc_440A
		call	far ptr	errStackOverflow

loc_440A:				; CODE XREF: seg002:0113j
		mov	byte ptr [bp-0Fh], 5
		mov	al, [bp+6]
		mov	[bp-10h], al
		push	ss
		lea	ax, [bp-10h]
		push	ax
		push	ss
		lea	ax, [bp-10h]
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_12954
		add	sp, 0Ah

loc_442A:				; CODE XREF: seg002:0141j
		mov	dx, 3DAh
		in	al, dx		; Video	status bits:
					; 0: retrace.  1=display is in vert or horiz retrace.
					; 1: 1=light pen is triggered; 0=armed
					; 2: 1=light pen switch	is open; 0=closed
					; 3: 1=vertical	sync pulse is occurring.
		test	al, 8
		jnz	short loc_442A

loc_4433:				; CODE XREF: seg002:014Aj
		mov	dx, 3DAh
		in	al, dx		; Video	status bits:
					; 0: retrace.  1=display is in vert or horiz retrace.
					; 1: 1=light pen is triggered; 0=armed
					; 2: 1=light pen switch	is open; 0=closed
					; 3: 1=vertical	sync pulse is occurring.
		test	al, 8
		jz	short loc_4433
		mov	sp, bp
		pop	bp
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4440	proc far		; CODE XREF: sub_3DEF+92P

var_10		= word ptr -10h

		push	bp
		mov	bp, sp
		sub	sp, 10h
		cmp	word_17D9E, sp
		ja	short loc_4451
		call	far ptr	errStackOverflow

loc_4451:				; CODE XREF: sub_4440+Aj
		mov	byte ptr [bp+var_10+1],	0
		mov	byte ptr [bp+var_10], 0Dh
		push	ss
		lea	ax, [bp+var_10]
		push	ax
		push	ss
		lea	ax, [bp+var_10]
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_12954
		add	sp, 0Ah
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_43C4
		inc	sp
		inc	sp
		mov	sp, bp
		pop	bp
		retf
sub_4440	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4485	proc far		; CODE XREF: sub_4515+12p sub_4540+3Ap ...

arg_0		= byte ptr  6

		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_4493
		call	far ptr	errStackOverflow

loc_4493:				; CODE XREF: sub_4485+7j
		mov	al, 8
		mov	dx, 3CEh
		out	dx, al		; EGA: graph 1 and 2 addr reg:
					; bit mask
					; Bits 0-7 select bits to be masked in all planes
		mov	al, [bp+arg_0]
		mov	dx, 3CFh
		out	dx, al		; EGA port: graphics controller	data register
		pop	bp
		retf
sub_4485	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		sub	sp, 10h
		cmp	word_17D9E, sp
		ja	short loc_44B3
		call	far ptr	errStackOverflow

loc_44B3:				; CODE XREF: seg002:01BCj
		mov	word ptr [bp-10h], 1000h
		mov	al, [bp+6]
		mov	[bp-0Eh], al
		mov	al, [bp+8]
		mov	[bp-0Dh], al
		push	ss
		lea	ax, [bp-10h]
		push	ax
		push	ss
		lea	ax, [bp-10h]
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_12954
		add	sp, 0Ah
		mov	sp, bp
		pop	bp
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		sub	sp, 14h
		cmp	word_17D9E, sp
		ja	short loc_44EF
		call	far ptr	errStackOverflow

loc_44EF:				; CODE XREF: seg002:01F8j
		mov	word ptr [bp-14h], 1002h
		mov	ax, [bp+8]
		mov	[bp-4],	ax
		mov	ax, [bp+6]
		mov	[bp-0Eh], ax
		push	ss
		lea	ax, [bp-14h]
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_12A24
		add	sp, 6
		mov	sp, bp
		pop	bp
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4515	proc far		; CODE XREF: sub_462B+Fp
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_4523
		call	far ptr	errStackOverflow

loc_4523:				; CODE XREF: sub_4515+7j
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		mov	al, 0
		push	ax
		push	cs
		call	near ptr sub_4325
		inc	sp
		inc	sp
		pop	bp
		retf
sub_4515	endp ; sp = -6


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4540	proc far		; CODE XREF: sub_66A+6AFP sub_ED95+9FP ...

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 8
		cmp	word_17D9E, sp
		ja	short loc_4551
		call	far ptr	errStackOverflow

loc_4551:				; CODE XREF: sub_4540+Aj
		mov	ax, [bp+arg_0]
		mov	cx, 0Dh
		shl	ax, cl
		les	bx, dword_1492E
		add	bx, ax
		mov	[bp+var_6], es
		mov	[bp+var_8], bx
		mov	ax, [bp+arg_2]
		shl	ax, cl
		mov	bx, word ptr dword_1492E
		add	bx, ax
		mov	[bp+var_2], es
		mov	[bp+var_4], bx
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	al, 1
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		mov	al, 0
		push	ax
		push	cs
		call	near ptr sub_4342
		inc	sp
		inc	sp
		mov	ax, 1F40h
		push	ax
		push	[bp+var_6]
		push	[bp+var_8]
		push	[bp+var_2]
		push	[bp+var_4]
		call	copyCastleStuff
		add	sp, 0Ah
		mov	al, 2
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		mov	al, 1
		push	ax
		push	cs
		call	near ptr sub_4342
		inc	sp
		inc	sp
		mov	ax, 1F40h
		push	ax
		push	[bp+var_6]
		push	[bp+var_8]
		push	[bp+var_2]
		push	[bp+var_4]
		call	copyCastleStuff
		add	sp, 0Ah
		mov	al, 4
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		mov	al, 2
		push	ax
		push	cs
		call	near ptr sub_4342
		inc	sp
		inc	sp
		mov	ax, 1F40h
		push	ax
		push	[bp+var_6]
		push	[bp+var_8]
		push	[bp+var_2]
		push	[bp+var_4]
		call	copyCastleStuff
		add	sp, 0Ah
		mov	al, 8
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		mov	al, 3
		push	ax
		push	cs
		call	near ptr sub_4342
		inc	sp
		inc	sp
		mov	ax, 1F40h
		push	ax
		push	[bp+var_6]
		push	[bp+var_8]
		push	[bp+var_2]
		push	[bp+var_4]
		call	copyCastleStuff
		add	sp, 0Ah
		mov	sp, bp
		pop	bp
		retf
sub_4540	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_462B	proc far		; CODE XREF: sub_D95E+116P

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_4639
		call	far ptr	errStackOverflow

loc_4639:				; CODE XREF: sub_462B+7j
		push	cs
		call	near ptr sub_4515
		mov	sp, bp
		mov	al, 0
		push	ax
		mov	ax, 1F40h
		push	ax
		push	word ptr dword_1A1C0+2
		push	word ptr dword_1A1C0
		call	sub_12C88
		mov	sp, bp
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_4381
		mov	sp, bp
		mov	al, 0FFh
		push	ax
		mov	ax, 1F40h
		push	ax
		push	word ptr dword_1A1C0+2
		push	word ptr dword_1A1C0
		call	sub_12C88
		mov	sp, bp
		pop	bp
		retf
sub_462B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4676	proc far		; CODE XREF: sub_3634+C6P
					; sub_3634+122P ...

var_10		= word ptr -10h
var_D		= byte ptr -0Dh
var_C		= byte ptr -0Ch
var_B		= byte ptr -0Bh
var_A		= byte ptr -0Ah
var_9		= byte ptr -9
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= word ptr  0Eh
arg_6		= word ptr  10h
arg_8		= byte ptr  12h
arg_A		= word ptr  14h

		push	si
		push	di
		push	bp
		mov	bp, sp

loc_467B:
		sub	sp, 10h
		cmp	word_17D9E, sp
		ja	short loc_4689
		call	far ptr	errStackOverflow

loc_4689:				; CODE XREF: sub_4676+Cj
		mov	di, [bp+arg_0]
		sar	di, 1
		sar	di, 1
		sar	di, 1
		mov	ax, [bp+arg_4]
		sar	ax, 1
		sar	ax, 1
		sar	ax, 1
		mov	[bp+var_10], ax
		mov	[bp+var_9], 80h	; ''
		mov	al, [bp+var_9]
		mov	ah, 0
		mov	cx, [bp+arg_0]
		and	cx, 7
		sar	ax, cl
		mov	[bp+var_D], al
		mov	[bp+var_B], al
		mov	al, [bp+var_D]
		add	al, 0FFh
		or	al, [bp+var_D]
		mov	[bp+var_D], al
		mov	al, [bp+var_9]
		mov	ah, 0
		mov	cx, [bp+arg_4]
		and	cx, 7
		sar	ax, cl
		mov	[bp+var_A], al
		mov	[bp+var_C], al
		mov	al, [bp+var_C]
		add	al, 0FFh
		or	al, [bp+var_C]
		mov	[bp+var_C], al
		mov	al, [bp+var_C]
		not	al
		mov	[bp+var_C], al
		mov	al, [bp+var_C]
		mov	ah, 0
		sar	ax, 1
		or	al, [bp+var_C]
		mov	[bp+var_C], al
		cmp	[bp+var_C], 0
		jnz	short loc_4701
		mov	[bp+var_C], 80h	; ''

loc_4701:				; CODE XREF: sub_4676+85j
		cmp	di, [bp+var_10]
		jnz	short loc_4718
		mov	al, [bp+var_B]
		or	al, [bp+var_A]
		mov	[bp+var_B], al
		mov	al, [bp+var_D]
		and	al, [bp+var_C]
		mov	[bp+var_D], al

loc_4718:				; CODE XREF: sub_4676+8Ej
		mov	al, 2
		mov	dx, 3C4h
		out	dx, al		; EGA: sequencer address reg
					; map mask: data bits 0-3 enable writes	to bit planes 0-3
		mov	al, 8
		mov	dx, 3CEh
		out	dx, al		; EGA: graph 1 and 2 addr reg:
					; bit mask
					; Bits 0-7 select bits to be masked in all planes
		mov	si, [bp+arg_2]
		jmp	loc_4837
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_472A:				; CODE XREF: sub_4676+1C6j
		mov	ax, si
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		add	bx, di
		mov	word ptr [bp+var_8+2], es
		mov	word ptr [bp+var_8], bx
		cmp	[bp+arg_A], 0
		jnz	short loc_4755
		cmp	si, [bp+arg_2]
		jz	short loc_4755
		cmp	si, [bp+arg_6]
		jnz	short loc_475E

loc_4755:				; CODE XREF: sub_4676+D3j sub_4676+D8j
		mov	al, [bp+var_D]
		mov	dx, 3CFh
		out	dx, al		; EGA port: graphics controller	data register
		jmp	short loc_4765
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_475E:				; CODE XREF: sub_4676+DDj
		mov	al, [bp+var_B]
		mov	dx, 3CFh
		out	dx, al		; EGA port: graphics controller	data register

loc_4765:				; CODE XREF: sub_4676+E6j
		mov	al, 0Fh
		mov	dx, 3C5h
		out	dx, al		; EGA port: sequencer data register
		les	bx, [bp+var_8]
		mov	al, es:[bx]
		mov	byte_196F8, al
		mov	byte ptr es:[bx], 0
		mov	al, [bp+arg_8]
		out	dx, al		; EGA port: sequencer data register
		mov	al, es:[bx]
		mov	byte_196F8, al
		mov	byte ptr es:[bx], 0FFh
		inc	word ptr [bp+var_8]
		cmp	[bp+arg_A], 0
		jnz	short loc_4799
		cmp	si, [bp+arg_2]
		jz	short loc_4799
		cmp	si, [bp+arg_6]
		jnz	short loc_47E4

loc_4799:				; CODE XREF: sub_4676+117j
					; sub_4676+11Cj
		mov	ax, di
		inc	ax
		cmp	ax, [bp+var_10]
		jge	short loc_47E4
		mov	al, 0FFh
		mov	dx, 3CFh
		out	dx, al		; EGA port: graphics controller	data register
		mov	al, 0Fh
		mov	dx, 3C5h
		out	dx, al		; EGA port: sequencer data register
		mov	al, 0
		push	ax
		mov	ax, [bp+var_10]
		sub	ax, di
		dec	ax
		push	ax
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		call	sub_12C88
		add	sp, 8
		mov	al, [bp+arg_8]
		mov	dx, 3C5h
		out	dx, al		; EGA port: sequencer data register
		mov	al, 0FFh
		push	ax
		mov	ax, [bp+var_10]
		sub	ax, di
		dec	ax
		push	ax
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		call	sub_12C88
		add	sp, 8

loc_47E4:				; CODE XREF: sub_4676+121j
					; sub_4676+129j
		les	bx, [bp+var_4]
		add	bx, [bp+var_10]
		mov	word ptr [bp+var_8+2], es
		mov	word ptr [bp+var_8], bx
		cmp	di, [bp+var_10]
		jz	short loc_4836
		cmp	[bp+arg_A], 0
		jnz	short loc_4805
		cmp	si, [bp+arg_2]
		jz	short loc_4805
		cmp	si, [bp+arg_6]
		jnz	short loc_480E

loc_4805:				; CODE XREF: sub_4676+183j
					; sub_4676+188j
		mov	al, [bp+var_C]
		mov	dx, 3CFh
		out	dx, al		; EGA port: graphics controller	data register
		jmp	short loc_4815
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_480E:				; CODE XREF: sub_4676+18Dj
		mov	al, [bp+var_A]
		mov	dx, 3CFh
		out	dx, al		; EGA port: graphics controller	data register

loc_4815:				; CODE XREF: sub_4676+196j
		mov	al, 0Fh
		mov	dx, 3C5h
		out	dx, al		; EGA port: sequencer data register
		les	bx, [bp+var_8]
		mov	al, es:[bx]
		mov	byte_196F8, al
		mov	byte ptr es:[bx], 0
		mov	al, [bp+arg_8]
		out	dx, al		; EGA port: sequencer data register
		mov	al, es:[bx]
		mov	byte_196F8, al
		mov	byte ptr es:[bx], 0FFh

loc_4836:				; CODE XREF: sub_4676+17Dj
		inc	si

loc_4837:				; CODE XREF: sub_4676+B1j
		cmp	si, [bp+arg_6]
		jg	short loc_483F
		jmp	loc_472A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_483F:				; CODE XREF: sub_4676+1C4j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_4676	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4845	proc far		; CODE XREF: sub_66A+67AP
					; couldBeLoadCastle+378P ...

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= word ptr  0Eh
arg_6		= word ptr  10h
arg_8		= word ptr  12h
arg_A		= word ptr  14h

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 8
		cmp	word_17D9E, sp
		ja	short loc_4858
		call	far ptr	errStackOverflow

loc_4858:				; CODE XREF: sub_4845+Cj
		mov	ax, [bp+arg_2]
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		add	bx, [bp+arg_0]
		mov	[bp+var_2], es
		mov	[bp+var_4], bx
		mov	[bp+var_8], 0
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	[bp+var_6], 0
		jmp	short loc_48CA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4884:				; CODE XREF: sub_4845+89j
		mov	al, 1
		mov	cx, [bp+var_6]
		shl	al, cl
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		xor	si, si
		mov	di, si
		jmp	short loc_48C2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4898:				; CODE XREF: sub_4845+80j
		push	[bp+arg_4]
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		add	ax, [bp+var_8]
		push	dx
		push	ax
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		add	ax, si
		push	dx
		push	ax
		call	copyCastleStuff
		add	sp, 0Ah
		mov	ax, [bp+arg_4]
		add	[bp+var_8], ax
		add	si, 28h	; '('
		inc	di

loc_48C2:				; CODE XREF: sub_4845+51j
		cmp	di, [bp+arg_6]
		jl	short loc_4898
		inc	[bp+var_6]

loc_48CA:				; CODE XREF: sub_4845+3Dj
		cmp	[bp+var_6], 4
		jl	short loc_4884
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_4845	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 6
		cmp	word_17D9E, sp
		ja	short loc_48E9
		call	far ptr	errStackOverflow

loc_48E9:				; CODE XREF: seg002:05F2j
		mov	ax, [bp+0Ch]
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		add	bx, [bp+0Ah]
		mov	word ptr [bp-2], es
		mov	[bp-4],	bx
		xor	di, di
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		push	word ptr [bp+12h]
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		xor	si, si
		mov	[bp-6],	si
		jmp	short loc_4943
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_491B:				; CODE XREF: seg002:0659j
		push	word ptr [bp+0Eh]
		mov	dx, [bp+16h]
		mov	ax, [bp+14h]
		add	ax, di
		push	dx
		push	ax
		mov	dx, [bp-2]
		mov	ax, [bp-4]
		add	ax, si
		push	dx
		push	ax
		call	copyCastleStuff
		add	sp, 0Ah
		add	di, [bp+0Eh]
		add	si, 28h	; '('
		inc	word ptr [bp-6]

loc_4943:				; CODE XREF: seg002:0629j
		mov	ax, [bp-6]
		cmp	ax, [bp+10h]
		jl	short loc_491B
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	si
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_4963
		call	far ptr	errStackOverflow

loc_4963:				; CODE XREF: seg002:066Cj
		xor	dx, dx
		mov	ax, 7D00h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp-2],	dx
		mov	[bp-4],	ax
		or	dx, ax
		jnz	short loc_4989
		push	ds
		mov	ax, 12B6h
		push	ax
		call	sub_6927
		add	sp, 4

loc_4989:				; CODE XREF: seg002:068Aj
		mov	ax, 8004h
		push	ax
		push	word ptr [bp+0Ah]
		push	word ptr [bp+8]
		call	sub_12E18
		add	sp, 6
		mov	si, ax
		mov	ax, si
		or	ax, ax
		jge	short loc_49B0
		push	ds
		mov	ax, 12CDh
		push	ax
		call	sub_6927
		add	sp, 4

loc_49B0:				; CODE XREF: seg002:06B1j
		mov	ax, 7D00h
		push	ax
		push	word ptr [bp-2]
		push	word ptr [bp-4]
		push	si
		call	sub_12FF7
		add	sp, 8
		mov	al, 1
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	ax, 1F40h
		push	ax
		push	word ptr [bp-2]
		push	word ptr [bp-4]
		push	word ptr dword_1A1C0+2
		push	word ptr dword_1A1C0
		call	copyCastleStuff
		add	sp, 0Ah
		mov	al, 2
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	ax, 1F40h
		push	ax
		mov	dx, [bp-2]
		mov	ax, [bp-4]
		add	ax, 1F40h
		push	dx
		push	ax
		push	word ptr dword_1A1C0+2
		push	word ptr dword_1A1C0
		call	copyCastleStuff
		add	sp, 0Ah
		mov	al, 4
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	ax, 1F40h
		push	ax
		mov	dx, [bp-2]
		mov	ax, [bp-4]
		add	ax, 3E80h
		push	dx
		push	ax
		push	word ptr dword_1A1C0+2
		push	word ptr dword_1A1C0
		call	copyCastleStuff
		add	sp, 0Ah
		mov	al, 8
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	ax, 1F40h
		push	ax
		mov	dx, [bp-2]
		mov	ax, [bp-4]
		add	ax, 5DC0h
		push	dx
		push	ax
		push	word ptr dword_1A1C0+2
		push	word ptr dword_1A1C0
		call	copyCastleStuff
		add	sp, 0Ah
		push	si
		call	sub_11DD6
		inc	sp
		inc	sp
		push	word ptr [bp-2]
		push	word ptr [bp-4]
		call	sub_12481
		add	sp, 4
		mov	sp, bp
		pop	bp
		pop	si
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4A9D	proc far		; CODE XREF: sub_D27+64P sub_D27+B7P ...

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= dword	ptr  0Eh
arg_8		= dword	ptr  12h

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		cmp	word_17D9E, sp
		ja	short loc_4AB0
		call	far ptr	errStackOverflow

loc_4AB0:				; CODE XREF: sub_4A9D+Cj
		mov	ax, [bp+arg_2]
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		add	bx, [bp+arg_0]
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		mov	[bp+var_A], 0
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	[bp+var_6], 0
		jmp	loc_4B72
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4ADD:				; CODE XREF: sub_4A9D+DBj
		mov	al, 1
		mov	cx, [bp+var_6]
		shl	al, cl
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		push	[bp+var_6]
		push	cs
		call	near ptr sub_4342
		inc	sp
		inc	sp
		xor	si, si
		mov	di, si
		mov	[bp+var_8], si
		jmp	short loc_4B69
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4AFD:				; CODE XREF: sub_4A9D+D0j
		les	bx, [bp+var_4]
		mov	al, es:[bx+si]
		les	bx, [bp+arg_8]
		mov	dl, es:[bx+di]
		not	dl
		and	al, dl
		les	bx, [bp+arg_4]
		add	bx, [bp+var_A]
		or	al, es:[bx]
		les	bx, [bp+var_4]
		mov	es:[bx+si], al
		inc	[bp+var_A]
		inc	di
		inc	si
		mov	al, es:[bx+si]
		les	bx, [bp+arg_8]
		mov	dl, es:[bx+di]
		not	dl
		and	al, dl
		les	bx, [bp+arg_4]
		add	bx, [bp+var_A]
		or	al, es:[bx]
		les	bx, [bp+var_4]
		mov	es:[bx+si], al
		inc	[bp+var_A]
		inc	di
		inc	si
		mov	al, es:[bx+si]
		les	bx, [bp+arg_8]
		mov	dl, es:[bx+di]
		not	dl
		and	al, dl
		les	bx, [bp+arg_4]
		add	bx, [bp+var_A]
		or	al, es:[bx]
		les	bx, [bp+var_4]
		mov	es:[bx+si], al
		inc	[bp+var_A]
		inc	di
		inc	si
		add	si, 25h	; '%'
		inc	[bp+var_8]

loc_4B69:				; CODE XREF: sub_4A9D+5Ej
		cmp	[bp+var_8], 20h	; ' '
		jl	short loc_4AFD
		inc	[bp+var_6]

loc_4B72:				; CODE XREF: sub_4A9D+3Dj
		cmp	[bp+var_6], 4
		jge	short loc_4B7B
		jmp	loc_4ADD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4B7B:				; CODE XREF: sub_4A9D+D9j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_4A9D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4B81	proc far		; CODE XREF: sub_DE8:loc_105EP
					; sub_DE8+33CP	...

var_3A		= word ptr -3Ah
var_38		= word ptr -38h
var_36		= word ptr -36h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= word ptr -28h
var_26		= word ptr -26h
var_24		= word ptr -24h
var_22		= word ptr -22h
var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_1C		= word ptr -1Ch
var_1A		= word ptr -1Ah
var_17		= byte ptr -17h
var_16		= byte ptr -16h
var_15		= byte ptr -15h
var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= byte ptr -10h
var_F		= byte ptr -0Fh
var_E		= byte ptr -0Eh
var_D		= byte ptr -0Dh
var_C		= byte ptr -0Ch
var_B		= byte ptr -0Bh
var_A		= byte ptr -0Ah
var_9		= byte ptr -9
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 3Ah
		cmp	word_17D9E, sp
		ja	short loc_4B94
		call	far ptr	errStackOverflow

loc_4B94:				; CODE XREF: sub_4B81+Cj
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	al, 0Fh
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		mov	al, 1
		push	ax
		push	cs
		call	near ptr sub_4325
		inc	sp
		inc	sp
		mov	ax, word_1A5AA
		mov	[bp+var_36], ax
		mov	al, byte ptr [bp+var_36]
		and	al, 1
		mov	[bp+var_11], al
		mov	ax, [bp+var_36]
		shr	ax, 1
		mov	[bp+var_36], ax
		mov	word_1A1BA, 0
		mov	[bp+var_B], 0
		xor	si, si
		jmp	loc_4CCE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4BD5:				; CODE XREF: sub_4B81+152j
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		cmp	word ptr [bx+6466h], 0
		jnz	short loc_4BE8
		jmp	loc_4CCD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4BE8:				; CODE XREF: sub_4B81+62j
		cmp	word_197A2, 8
		jge	short loc_4C0B
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	al, [bx+6468h]
		add	al, 0F2h ; 'ђ'
		shl	al, 1
		shl	al, 1
		add	al, 3Ah	; ':'
		mov	[bp+var_17], al
		jmp	short loc_4C25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4C0B:				; CODE XREF: sub_4B81+6Cj
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	al, [bx+6468h]
		add	al, 0F7h ; 'ї'
		shl	al, 1
		shl	al, 1
		add	al, 62h	; 'b'
		mov	[bp+var_17], al

loc_4C25:				; CODE XREF: sub_4B81+88j
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, [bx+6466h]
		cmp	ax, 5
		jz	short loc_4C69	; case 0x0
		jg	short loc_4C50
		dec	ax
		cmp	ax, 3		; switch 4 cases
		ja	short loc_4C91	; default
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_4C48[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_4C48	dw offset loc_4C7F	; DATA XREF: sub_4B81+C2r
		dw offset loc_4C7A	; jump table for switch	statement
		dw offset loc_4C75
		dw offset loc_4C6F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4C50:				; CODE XREF: sub_4B81+B6j
		sub	ax, 75h	; 'u'
		cmp	ax, 3		; switch 4 cases
		ja	short loc_4C91	; default
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_4C61[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_4C61	dw offset loc_4C69	; DATA XREF: sub_4B81+DBr
		dw offset loc_4C6F	; jump table for switch	statement
		dw offset loc_4C7A
		dw offset loc_4C95
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4C69:				; CODE XREF: sub_4B81+B4j sub_4B81+DBj
					; DATA XREF: ...
		add	[bp+var_17], 3	; case 0x0
		jmp	short loc_4C95	; case 0x3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4C6F:				; CODE XREF: sub_4B81+C2j sub_4B81+DBj
					; DATA XREF: ...
		add	[bp+var_17], 2	; case 0x3
		jmp	short loc_4C95	; case 0x3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4C75:				; CODE XREF: sub_4B81+C2j
					; DATA XREF: sub_4B81:off_4C48o
		inc	[bp+var_17]	; case 0x2
		jmp	short loc_4C95	; case 0x3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4C7A:				; CODE XREF: sub_4B81+C2j sub_4B81+DBj
					; DATA XREF: ...
		inc	[bp+var_17]	; case 0x1
		jmp	short loc_4C95	; case 0x3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4C7F:				; CODE XREF: sub_4B81+C2j
					; DATA XREF: sub_4B81:off_4C48o
		mov	ax, si		; case 0x0
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	al, [bx+6468h]
		mov	[bp+var_17], al
		jmp	short loc_4C95	; case 0x3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4C91:				; CODE XREF: sub_4B81+BCj sub_4B81+D5j
		mov	[bp+var_17], 0	; default

loc_4C95:				; CODE XREF: sub_4B81+DBj sub_4B81+ECj ...
		mov	al, [bp+var_17]	; case 0x3
		push	ax
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, [bx+6464h]
		les	bx, dword_18398
		add	bx, ax
		pop	ax
		mov	es:[bx], al
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, [bx+6466h]
		dec	ax
		push	ax
		mov	ax, si
		mov	dx, 6
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+6466h], ax

loc_4CCD:				; CODE XREF: sub_4B81+64j
		inc	si

loc_4CCE:				; CODE XREF: sub_4B81+51j
		cmp	si, 32h	; '2'
		jnb	short loc_4CD6
		jmp	loc_4BD5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4CD6:				; CODE XREF: sub_4B81+150j
		mov	[bp+var_9], 0
		xor	si, si
		jmp	loc_4F22
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4CDF:				; CODE XREF: sub_4B81+3A6j
		mov	bx, si
		shl	bx, 1
		cmp	word ptr [bx+4488h], 0
		jnz	short loc_4CED
		jmp	loc_4F21
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4CED:				; CODE XREF: sub_4B81+167j
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+4488h]
		mov	[bp+var_6], ax
		les	bx, dword_18394
		add	bx, ax
		mov	al, es:[bx]
		mov	[bp+var_17], al
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FF
		jz	short loc_4D10
		jmp	loc_4F11
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4D10:				; CODE XREF: sub_4B81+18Aj
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+4488h]
		mov	bx, word ptr dword_18394
		add	bx, ax
		mov	byte ptr es:[bx], 1
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+4488h], 0
		mov	[bp+var_9], 1
		mov	ax, 4
		push	ax
		call	sub_5C8
		inc	sp
		inc	sp
		les	bx, dword_18398
		add	bx, [bp+var_6]
		dec	bx
		mov	al, es:[bx]
		mov	[bp+var_17], al
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FC
		jb	short loc_4D67
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FD
		ja	short loc_4D67
		mov	bx, word ptr dword_18398
		add	bx, [bp+var_6]
		dec	bx
		mov	byte ptr es:[bx], 0

loc_4D67:				; CODE XREF: sub_4B81+1CFj
					; sub_4B81+1D8j
		les	bx, dword_18398
		add	bx, [bp+var_6]
		mov	al, es:[bx+1]
		mov	[bp+var_17], al
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FC
		jb	short loc_4D93
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FD
		ja	short loc_4D93
		mov	bx, word ptr dword_18398
		add	bx, [bp+var_6]
		mov	byte ptr es:[bx+1], 0

loc_4D93:				; CODE XREF: sub_4B81+1FBj
					; sub_4B81+204j
		mov	ax, word_1A5AE
		sub	[bp+var_6], ax
		les	bx, dword_18398
		add	bx, [bp+var_6]
		dec	bx
		mov	al, es:[bx]
		mov	[bp+var_17], al
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FC
		jb	short loc_4DC5
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FD
		ja	short loc_4DC5
		mov	bx, word ptr dword_18398
		add	bx, [bp+var_6]
		dec	bx
		mov	byte ptr es:[bx], 0

loc_4DC5:				; CODE XREF: sub_4B81+22Dj
					; sub_4B81+236j
		les	bx, dword_18398
		add	bx, [bp+var_6]
		mov	al, es:[bx]
		mov	[bp+var_17], al
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FC
		jb	short loc_4DEF
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FD
		ja	short loc_4DEF
		mov	bx, word ptr dword_18398
		add	bx, [bp+var_6]
		mov	byte ptr es:[bx], 0

loc_4DEF:				; CODE XREF: sub_4B81+258j
					; sub_4B81+261j
		les	bx, dword_18398
		add	bx, [bp+var_6]
		mov	al, es:[bx+1]
		mov	[bp+var_17], al
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FC
		jb	short loc_4E1B
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FD
		ja	short loc_4E1B
		mov	bx, word ptr dword_18398
		add	bx, [bp+var_6]
		mov	byte ptr es:[bx+1], 0

loc_4E1B:				; CODE XREF: sub_4B81+283j
					; sub_4B81+28Cj
		mov	ax, word_1A5AE
		shl	ax, 1
		add	[bp+var_6], ax
		les	bx, dword_18398
		add	bx, [bp+var_6]
		dec	bx
		mov	al, es:[bx]
		mov	[bp+var_17], al
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FC
		jb	short loc_4E4F
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FD
		ja	short loc_4E4F
		mov	bx, word ptr dword_18398
		add	bx, [bp+var_6]
		dec	bx
		mov	byte ptr es:[bx], 0

loc_4E4F:				; CODE XREF: sub_4B81+2B7j
					; sub_4B81+2C0j
		les	bx, dword_18398
		add	bx, [bp+var_6]
		mov	al, es:[bx]
		mov	[bp+var_17], al
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FC
		jb	short loc_4E79
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FD
		ja	short loc_4E79
		mov	bx, word ptr dword_18398
		add	bx, [bp+var_6]
		mov	byte ptr es:[bx], 0

loc_4E79:				; CODE XREF: sub_4B81+2E2j
					; sub_4B81+2EBj
		les	bx, dword_18398
		add	bx, [bp+var_6]
		mov	al, es:[bx+1]
		mov	[bp+var_17], al
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FC
		jb	short loc_4EA5
		mov	al, [bp+var_17]
		cmp	al, byte_1A7FD
		ja	short loc_4EA5
		mov	bx, word ptr dword_18398
		add	bx, [bp+var_6]
		mov	byte ptr es:[bx+1], 0

loc_4EA5:				; CODE XREF: sub_4B81+30Dj
					; sub_4B81+316j
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	[bp+var_1C], ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	[bp+var_1A], ax
		mov	ax, [bp+var_6]
		xor	dx, dx
		div	word_1A5AE
		mov	[bp+var_20], ax
		mov	ax, [bp+var_6]
		push	ax
		mov	ax, [bp+var_20]
		mul	word_1A5AE
		pop	dx
		sub	dx, ax
		shl	dx, 1
		mov	[bp+var_1E], dx
		mov	ax, dx
		add	ax, 0FFFEh
		cmp	ax, [bp+var_1A]
		ja	short loc_4F21
		mov	ax, dx
		inc	ax
		cmp	ax, [bp+var_1A]
		jb	short loc_4F21
		mov	ax, [bp+var_20]
		add	ax, 0FFFEh
		cmp	ax, [bp+var_1C]
		ja	short loc_4F21
		mov	ax, [bp+var_20]
		inc	ax
		cmp	ax, [bp+var_1C]
		jb	short loc_4F21
		mov	word_19E84, 0FFFFh
		mov	byte_1A7C8, 1
		jmp	short loc_4F21
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4F11:				; CODE XREF: sub_4B81+18Cj
		inc	[bp+var_17]
		mov	al, [bp+var_17]
		les	bx, dword_18394
		add	bx, [bp+var_6]
		mov	es:[bx], al

loc_4F21:				; CODE XREF: sub_4B81+169j
					; sub_4B81+365j ...
		inc	si

loc_4F22:				; CODE XREF: sub_4B81+15Bj
		cmp	si, 0Ah
		jnb	short loc_4F2A
		jmp	loc_4CDF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4F2A:				; CODE XREF: sub_4B81+3A4j
		cmp	byte_14940, 0
		jz	short loc_4F3A
		mov	[bp+var_9], 2
		mov	byte_14940, 0

loc_4F3A:				; CODE XREF: sub_4B81+3AEj
		mov	word ptr [bp+var_2C+2],	0A000h
		mov	word ptr [bp+var_2C], 0A000h
		cmp	[bp+var_9], 2
		jnz	short loc_4F54
		mov	word ptr [bp+var_2C+2],	0A000h
		mov	word ptr [bp+var_2C], 0A001h

loc_4F54:				; CODE XREF: sub_4B81+3C7j
		cmp	byte_14941, 0
		jz	short loc_4FAC
		mov	al, byte_14941
		mov	ah, 0
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jz	short loc_4FA8
		cmp	byte_14941, 0Ah
		jb	short loc_4F80
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_4FA8

loc_4F80:				; CODE XREF: sub_4B81+3EEj
		mov	[bp+var_9], 1
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_4F9D
		mov	word ptr [bp+var_2C+2],	0A000h
		mov	word ptr [bp+var_2C], 0A001h

loc_4F9D:				; CODE XREF: sub_4B81+410j
		mov	ax, 4
		push	ax
		call	sub_5C8
		inc	sp
		inc	sp

loc_4FA8:				; CODE XREF: sub_4B81+3E7j
					; sub_4B81+3FDj
		dec	byte_14941

loc_4FAC:				; CODE XREF: sub_4B81+3D8j
		mov	[bp+var_38], 0
		jmp	loc_5C27
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4FB4:				; CODE XREF: sub_4B81+10ACj
		mov	[bp+var_3A], 0
		jmp	loc_5C13
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4FBC:				; CODE XREF: sub_4B81+10A0j
		mov	ax, word_1A5AC
		add	ax, [bp+var_38]
		mul	word_1A5AE
		add	ax, [bp+var_36]
		add	ax, [bp+var_3A]
		mov	[bp+var_4], ax
		cmp	ax, 0AFC8h
		jb	short loc_4FE1
		push	ds
		mov	ax, 12E6h
		push	ax
		call	sub_6927
		add	sp, 4

loc_4FE1:				; CODE XREF: sub_4B81+451j
		mov	[bp+var_10], 0
		mov	ax, [bp+var_3A]
		shl	ax, 1
		inc	ax
		mov	[bp+var_24], ax
		mov	ax, [bp+var_38]
		mov	cx, 4
		shl	ax, cl
		add	ax, 8
		mov	[bp+var_22], ax
		mov	[bp+var_8], 6000h
		mov	[bp+var_12], 1
		les	bx, dword_18398
		add	bx, [bp+var_4]
		mov	al, es:[bx]
		mov	[bp+var_17], al
		cmp	[bp+var_17], 0
		jnz	short loc_5036
		mov	[bp+var_8], 4000h
		mov	[bp+var_12], 0
		les	bx, dword_18394
		add	bx, [bp+var_4]
		mov	al, es:[bx]
		mov	[bp+var_17], al
		or	al, al
		jnz	short loc_5036
		mov	[bp+var_10], 1

loc_5036:				; CODE XREF: sub_4B81+495j
					; sub_4B81+4AFj
		mov	al, [bp+var_17]
		mov	[bp+var_16], al
		mov	al, [bp+var_16]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		mov	al, [bx+4285h]
		mov	[bp+var_E], al
		mov	al, [bp+var_16]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		mov	al, [bx+4284h]
		mov	[bp+var_F], al
		mov	al, [bp+var_16]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		mov	al, [bx+3C7Ch]
		mov	[bp+var_C], al
		mov	al, [bp+var_16]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		mov	al, [bx+3C7Bh]
		mov	[bp+var_D], al
		les	bx, dword_1839C
		add	bx, [bp+var_4]
		mov	al, es:[bx]
		mov	[bp+var_14], al
		cmp	[bp+var_14], 4
		jnb	short loc_5092
		jmp	loc_5756
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5092:				; CODE XREF: sub_4B81+50Cj
		cmp	[bp+var_14], 77h ; 'w'
		jbe	short loc_509B
		jmp	loc_5756
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_509B:				; CODE XREF: sub_4B81+515j
		mov	al, [bp+var_14]
		add	al, 0FCh ; 'ќ'
		mov	[bp+var_13], al
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5632h], 0
		jnz	short loc_50CD
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 3
		jz	short loc_50CD
		jmp	loc_5756
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_50CD:				; CODE XREF: sub_4B81+534j
					; sub_4B81+547j
		cmp	[bp+var_14], 18h
		jnb	short loc_50D7
		mov	[bp+var_B], 1

loc_50D7:				; CODE XREF: sub_4B81+550j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5633h], 0
		jz	short loc_50ED
		jmp	loc_55C2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_50ED:				; CODE XREF: sub_4B81+567j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5633h], 1
		mov	al, [bp+var_13]
		mov	bx, word_1A1BA
		mov	[bx+601Ch], al
		inc	word_1A1BA
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 0
		jnz	short loc_518D
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		inc	byte ptr [bx+563Fh]
		cmp	[bp+var_12], 0
		jnz	short loc_515A
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Fh]
		mov	ah, 0
		mov	dl, [bp+var_E]
		mov	dh, 0
		mov	bl, [bp+var_F]
		mov	bh, 0
		sub	dx, bx
		cmp	ax, dx
		jle	short loc_518D
		jmp	short loc_517C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_515A:				; CODE XREF: sub_4B81+5B3j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Fh]
		mov	ah, 0
		mov	dl, [bp+var_C]
		mov	dh, 0
		mov	bl, [bp+var_D]
		mov	bh, 0
		sub	dx, bx
		cmp	ax, dx
		jle	short loc_518D

loc_517C:				; CODE XREF: sub_4B81+5D7j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+563Fh], 0

loc_518D:				; CODE XREF: sub_4B81+59Dj
					; sub_4B81+5D5j ...
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 5
		jz	short loc_51A3
		jmp	loc_5279
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_51A3:				; CODE XREF: sub_4B81+61Dj
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5638h], 0
		jz	short loc_51C9
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		dec	byte ptr [bx+5638h]
		jmp	loc_5279
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_51C9:				; CODE XREF: sub_4B81+633j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5637h], 0
		jz	short loc_5221
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		inc	byte ptr [bx+563Fh]
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Fh]
		mov	ah, 0
		mov	dl, [bp+var_E]
		mov	dh, 0
		mov	bl, [bp+var_F]
		mov	bh, 0
		sub	dx, bx
		cmp	ax, dx
		jnz	short loc_5279
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5637h], 0
		jmp	short loc_5255
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5221:				; CODE XREF: sub_4B81+659j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		dec	byte ptr [bx+563Fh]
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+563Fh], 0
		jnz	short loc_5279
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5637h], 1

loc_5255:				; CODE XREF: sub_4B81+69Ej
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+5639h]
		mov	dl, [bp+var_13]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+5638h], al

loc_5279:				; CODE XREF: sub_4B81+61Fj
					; sub_4B81+645j ...
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 1
		jnz	short loc_52B6
		call	sub_12FD1
		mov	dl, [bp+var_E]
		mov	dh, 0
		mov	bx, dx
		mov	dl, [bp+var_F]
		mov	dh, 0
		sub	bx, dx
		cwd
		idiv	bx
		inc	dl
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	bx, 0Eh
		push	dx
		mul	bx
		mov	bx, ax
		pop	ax
		mov	[bx+563Fh], al

loc_52B6:				; CODE XREF: sub_4B81+709j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 3
		jz	short loc_52CC
		jmp	loc_5309
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_52CC:				; CODE XREF: sub_4B81+746j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5638h], 0
		jnz	short loc_52E2
		jmp	loc_5309
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_52E2:				; CODE XREF: sub_4B81+75Cj
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+5638h]
		add	al, 0FFh
		mov	dl, [bp+var_13]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+5638h], al

loc_5309:				; CODE XREF: sub_4B81+748j
					; sub_4B81+75Ej
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 2
		jz	short loc_531F
		jmp	loc_5510
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_531F:				; CODE XREF: sub_4B81+799j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5638h], 0
		jz	short loc_5335
		jmp	loc_53C1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5335:				; CODE XREF: sub_4B81+7AFj
		call	sub_12FD1
		mov	dl, [bp+var_13]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Bh]
		mov	ah, 0
		mov	bx, ax
		pop	ax
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_53C1
		call	sub_12FD1
		mov	dl, [bp+var_13]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+5639h]
		mov	ah, 0
		mov	bx, ax
		pop	ax
		cwd
		idiv	bx
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	bx, 0Eh
		push	dx
		mul	bx
		mov	bx, ax
		pop	ax
		add	al, [bx+563Ah]
		mov	dl, [bp+var_13]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+5638h], al
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5637h], 0
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+563Fh], 0

loc_53C1:				; CODE XREF: sub_4B81+7B1j
					; sub_4B81+7D6j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5638h], 0
		jnz	short loc_53E8
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+563Fh], 0
		jmp	loc_5510
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_53E8:				; CODE XREF: sub_4B81+851j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5638h], 80h ; ''
		jbe	short loc_540E
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		inc	byte ptr [bx+5638h]
		jmp	loc_5510
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_540E:				; CODE XREF: sub_4B81+878j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5637h], 4
		jnz	short loc_545B
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		dec	byte ptr [bx+5638h]
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5638h], 1
		jz	short loc_5447
		jmp	loc_5510
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5447:				; CODE XREF: sub_4B81+8C1j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5637h], 5
		jmp	loc_5510
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_545B:				; CODE XREF: sub_4B81+89Ej
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+5637h]
		mov	ah, 0
		cmp	ax, 9		; switch 10 cases
		jbe	short loc_5475
		jmp	loc_5500	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5475:				; CODE XREF: sub_4B81+8EFj
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_547E[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_547E	dw offset loc_54CB	; DATA XREF: sub_4B81+8F8r
		dw offset loc_54B8	; jump table for switch	statement
		dw offset loc_54A5
		dw offset loc_5492
		dw offset loc_5500
		dw offset loc_5492
		dw offset loc_54A5
		dw offset loc_54B8
		dw offset loc_54CB
		dw offset loc_54DE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5492:				; CODE XREF: sub_4B81+8F8j
					; DATA XREF: sub_4B81:off_547Eo
		mov	al, [bp+var_13]	; case 0x3
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+563Fh], 4
		jmp	short loc_5500	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_54A5:				; CODE XREF: sub_4B81+8F8j
					; DATA XREF: sub_4B81:off_547Eo
		mov	al, [bp+var_13]	; case 0x2
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+563Fh], 3
		jmp	short loc_5500	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_54B8:				; CODE XREF: sub_4B81+8F8j
					; DATA XREF: sub_4B81:off_547Eo
		mov	al, [bp+var_13]	; case 0x1
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+563Fh], 2
		jmp	short loc_5500	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_54CB:				; CODE XREF: sub_4B81+8F8j
					; DATA XREF: sub_4B81:off_547Eo
		mov	al, [bp+var_13]	; case 0x0
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+563Fh], 1
		jmp	short loc_5500	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_54DE:				; CODE XREF: sub_4B81+8F8j
					; DATA XREF: sub_4B81:off_547Eo
		mov	al, [bp+var_13]	; case 0x9
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+563Fh], 0
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5638h], 0D2h ; 'в'

loc_5500:				; CODE XREF: sub_4B81+8F1j
					; sub_4B81+8F8j ...
		mov	al, [bp+var_13]	; default
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		inc	byte ptr [bx+5637h]

loc_5510:				; CODE XREF: sub_4B81+79Bj
					; sub_4B81+864j ...
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+563Eh], 1
		jnz	short loc_5569
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5632h], 1
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Ch]
		mov	dl, [bp+var_13]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+563Fh], al
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+563Eh], 0

loc_5569:				; CODE XREF: sub_4B81+9A0j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+563Eh], 2
		jnz	short loc_55C2
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5632h], 0
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Dh]
		mov	dl, [bp+var_13]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		mov	[bx+563Fh], al
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+563Eh], 0

loc_55C2:				; CODE XREF: sub_4B81+569j
					; sub_4B81+9F9j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 3
		jz	short loc_55D8
		jmp	loc_5677
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_55D8:				; CODE XREF: sub_4B81+A52j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5638h], 0
		jz	short loc_562B
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+5638h]
		mov	ah, 0
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_563E

loc_5607:				; CODE XREF: sub_4B81+ABBj
		mov	[bp+var_12], 0
		mov	[bp+var_8], 4000h
		les	bx, dword_18398
		add	bx, [bp+var_4]
		mov	byte ptr es:[bx], 0
		les	bx, dword_18394
		add	bx, [bp+var_4]
		mov	al, es:[bx]
		mov	[bp+var_17], al
		jmp	loc_5756
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_562B:				; CODE XREF: sub_4B81+A68j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5632h], 0
		jz	short loc_5607

loc_563E:				; CODE XREF: sub_4B81+A84j
		mov	[bp+var_12], 1
		mov	[bp+var_8], 6000h
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Ch]
		les	bx, dword_18398
		add	bx, [bp+var_4]
		mov	es:[bx], al
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Ch]
		mov	[bp+var_17], al
		jmp	loc_5756
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5677:				; CODE XREF: sub_4B81+A54j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5636h], 2
		jz	short loc_568D
		jmp	loc_5710
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_568D:				; CODE XREF: sub_4B81+B07j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+563Fh], 4
		jnz	short loc_56C8
		mov	[bp+var_8], 4000h
		les	bx, dword_18394
		add	bx, [bp+var_4]
		mov	al, es:[bx]
		mov	[bp+var_17], al
		or	al, al
		jnz	short loc_56BA
		mov	[bp+var_10], 1

loc_56BA:				; CODE XREF: sub_4B81+B33j
		les	bx, dword_18398
		add	bx, [bp+var_4]
		mov	byte ptr es:[bx], 0
		jmp	loc_5756
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_56C8:				; CODE XREF: sub_4B81+B1Dj
		mov	[bp+var_8], 6000h
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Dh]
		mov	dl, [bp+var_13]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		pop	ax
		add	al, [bx+563Fh]
		mov	[bp+var_17], al
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Dh]
		les	bx, dword_18398
		add	bx, [bp+var_4]
		mov	es:[bx], al
		jmp	short loc_5756
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5710:				; CODE XREF: sub_4B81+B09j
		mov	al, [bp+var_13]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+563Fh]
		add	al, [bp+var_17]
		mov	[bp+var_17], al
		cmp	[bp+var_12], 0
		jnz	short loc_5742
		mov	al, [bp+var_17]
		cmp	al, [bp+var_E]
		jbe	short loc_5756
		mov	al, [bp+var_17]
		sub	al, [bp+var_E]
		add	al, [bp+var_F]
		mov	[bp+var_17], al
		jmp	short loc_5756
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5742:				; CODE XREF: sub_4B81+BA9j
		mov	al, [bp+var_17]
		cmp	al, [bp+var_C]
		jbe	short loc_5756
		mov	al, [bp+var_17]
		sub	al, [bp+var_C]
		add	al, [bp+var_D]
		mov	[bp+var_17], al

loc_5756:				; CODE XREF: sub_4B81+50Ej
					; sub_4B81+517j ...
		cmp	[bp+var_10], 0
		jz	short loc_5779
		mov	ax, [bp+var_22]
		mov	[bp+var_28], ax
		mov	ax, [bp+var_24]
		dec	ax
		mov	[bp+var_26], ax
		mov	[bp+var_8], 8000h
		cmp	[bp+var_11], 0
		jz	short loc_57AF
		dec	[bp+var_26]
		jmp	short loc_57AF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5779:				; CODE XREF: sub_4B81+BD9j
		mov	al, [bp+var_17]
		mov	ah, 0
		mov	bx, 14h
		cwd
		idiv	bx
		mov	[bp+var_28], ax
		mov	al, [bp+var_17]
		mov	ah, 0
		mov	dx, [bp+var_28]
		mov	cx, 4
		shl	dx, cl
		sub	ax, dx
		mov	dx, [bp+var_28]
		shl	dx, 1
		shl	dx, 1
		sub	ax, dx
		mov	[bp+var_26], ax
		shl	ax, 1
		mov	[bp+var_26], ax
		mov	ax, [bp+var_28]
		shl	ax, cl
		mov	[bp+var_28], ax

loc_57AF:				; CODE XREF: sub_4B81+BF1j
					; sub_4B81+BF6j
		mov	ax, [bp+var_22]
		mov	cx, 5
		shl	ax, cl
		les	bx, dword_1A1C0
		add	bx, ax
		mov	ax, [bp+var_22]
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		add	bx, [bp+var_24]
		mov	word ptr [bp+var_30+2],	es
		mov	word ptr [bp+var_30], bx
		mov	ax, [bp+var_28]
		shl	ax, cl
		les	bx, dword_1492E
		add	bx, [bp+var_8]
		add	bx, ax
		mov	ax, [bp+var_28]
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		add	bx, [bp+var_26]
		mov	word ptr [bp+var_34+2],	es
		mov	word ptr [bp+var_34], bx
		mov	al, byte_1493E
		mov	[bp+var_A], al
		cmp	[bp+var_9], 0
		jz	short loc_5802
		jmp	loc_58D9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5802:				; CODE XREF: sub_4B81+C7Cj
		xor	si, si
		cmp	[bp+var_3A], si
		jnz	short loc_582B
		cmp	[bp+var_11], 0
		jz	short loc_582B
		mov	di, si
		jmp	short loc_5826
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5813:				; CODE XREF: sub_4B81+CA8j
		les	bx, [bp+var_34]
		add	bx, si
		mov	al, es:[bx+1]
		les	bx, [bp+var_30]
		mov	es:[bx+si], al
		add	si, 28h	; '('
		inc	di

loc_5826:				; CODE XREF: sub_4B81+C90j
		cmp	di, 10h
		jb	short loc_5813

loc_582B:				; CODE XREF: sub_4B81+C86j
					; sub_4B81+C8Cj
		cmp	[bp+var_3A], 1
		jb	short loc_586B
		mov	ax, [bp+var_3A]
		cmp	ax, word_1493C
		jnb	short loc_586B
		cmp	[bp+var_11], 0
		jz	short loc_586B
		xor	di, di
		jmp	short loc_5866
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5844:				; CODE XREF: sub_4B81+CE8j
		les	bx, [bp+var_34]
		mov	al, es:[bx+si]
		les	bx, [bp+var_30]
		add	bx, si
		dec	bx
		mov	es:[bx], al
		les	bx, [bp+var_34]
		add	bx, si
		mov	al, es:[bx+1]
		les	bx, [bp+var_30]
		mov	es:[bx+si], al
		add	si, 28h	; '('
		inc	di

loc_5866:				; CODE XREF: sub_4B81+CC1j
		cmp	di, 10h
		jb	short loc_5844

loc_586B:				; CODE XREF: sub_4B81+CAEj
					; sub_4B81+CB7j ...
		mov	ax, [bp+var_3A]
		cmp	ax, word_1493C
		jnz	short loc_5896
		cmp	[bp+var_11], 0
		jz	short loc_5896
		xor	di, di
		jmp	short loc_5891
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_587E:				; CODE XREF: sub_4B81+D13j
		les	bx, [bp+var_34]
		mov	al, es:[bx+si]
		les	bx, [bp+var_30]
		add	bx, si
		dec	bx
		mov	es:[bx], al
		add	si, 28h	; '('
		inc	di

loc_5891:				; CODE XREF: sub_4B81+CFBj
		cmp	di, 10h
		jb	short loc_587E

loc_5896:				; CODE XREF: sub_4B81+CF1j
					; sub_4B81+CF7j
		mov	ax, [bp+var_3A]
		cmp	ax, word_1493C
		jb	short loc_58A2
		jmp	loc_599E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_58A2:				; CODE XREF: sub_4B81+D1Cj
		cmp	[bp+var_11], 0
		jz	short loc_58AB
		jmp	loc_599E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_58AB:				; CODE XREF: sub_4B81+D25j
		xor	di, di
		jmp	short loc_58D1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_58AF:				; CODE XREF: sub_4B81+D53j
		les	bx, [bp+var_34]
		mov	al, es:[bx+si]
		les	bx, [bp+var_30]
		mov	es:[bx+si], al
		les	bx, [bp+var_34]
		add	bx, si
		mov	al, es:[bx+1]
		les	bx, [bp+var_30]
		add	bx, si
		mov	es:[bx+1], al
		add	si, 28h	; '('
		inc	di

loc_58D1:				; CODE XREF: sub_4B81+D2Cj
		cmp	di, 10h
		jb	short loc_58AF
		jmp	loc_599E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_58D9:				; CODE XREF: sub_4B81+C7Ej
		xor	si, si
		cmp	[bp+var_3A], si
		jnz	short loc_58FF
		cmp	[bp+var_11], 0
		jz	short loc_58FF
		mov	di, si
		jmp	short loc_58FA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_58EA:				; CODE XREF: sub_4B81+D7Cj
		les	bx, [bp+var_2C]
		mov	al, es:[bx]
		les	bx, [bp+var_30]
		mov	es:[bx+si], al
		add	si, 28h	; '('
		inc	di

loc_58FA:				; CODE XREF: sub_4B81+D67j
		cmp	di, 10h
		jb	short loc_58EA

loc_58FF:				; CODE XREF: sub_4B81+D5Dj
					; sub_4B81+D63j
		cmp	[bp+var_3A], 1
		jb	short loc_593C
		mov	ax, [bp+var_3A]
		cmp	ax, word_1493C
		jnb	short loc_593C
		cmp	[bp+var_11], 0
		jz	short loc_593C
		xor	di, di
		jmp	short loc_5937
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5918:				; CODE XREF: sub_4B81+DB9j
		les	bx, [bp+var_2C]
		mov	al, es:[bx]
		les	bx, [bp+var_30]
		add	bx, si
		dec	bx
		mov	es:[bx], al
		les	bx, [bp+var_2C]
		mov	al, es:[bx]
		les	bx, [bp+var_30]
		mov	es:[bx+si], al
		add	si, 28h	; '('
		inc	di

loc_5937:				; CODE XREF: sub_4B81+D95j
		cmp	di, 10h
		jb	short loc_5918

loc_593C:				; CODE XREF: sub_4B81+D82j
					; sub_4B81+D8Bj ...
		mov	ax, [bp+var_3A]
		cmp	ax, word_1493C
		jnz	short loc_5967
		cmp	[bp+var_11], 0
		jz	short loc_5967
		xor	di, di
		jmp	short loc_5962
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_594F:				; CODE XREF: sub_4B81+DE4j
		les	bx, [bp+var_2C]
		mov	al, es:[bx]
		les	bx, [bp+var_30]
		add	bx, si
		dec	bx
		mov	es:[bx], al
		add	si, 28h	; '('
		inc	di

loc_5962:				; CODE XREF: sub_4B81+DCCj
		cmp	di, 10h
		jb	short loc_594F

loc_5967:				; CODE XREF: sub_4B81+DC2j
					; sub_4B81+DC8j
		mov	ax, [bp+var_3A]
		cmp	ax, word_1493C
		jnb	short loc_599E
		cmp	[bp+var_11], 0
		jnz	short loc_599E
		xor	di, di
		jmp	short loc_5999
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_597A:				; CODE XREF: sub_4B81+E1Bj
		les	bx, [bp+var_2C]
		mov	al, es:[bx]
		les	bx, [bp+var_30]
		mov	es:[bx+si], al
		les	bx, [bp+var_2C]
		mov	al, es:[bx]
		les	bx, [bp+var_30]
		add	bx, si
		mov	es:[bx+1], al
		add	si, 28h	; '('
		inc	di

loc_5999:				; CODE XREF: sub_4B81+DF7j
		cmp	di, 10h
		jb	short loc_597A

loc_599E:				; CODE XREF: sub_4B81+D1Ej
					; sub_4B81+D27j ...
		cmp	[bp+var_A], 0
		jz	short loc_59BC
		dec	[bp+var_A]
		mov	[bp+var_2], 0
		jmp	short loc_59B4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_59AE:				; CODE XREF: sub_4B81+E37j
		mov	ax, [bp+var_2]
		inc	[bp+var_2]

loc_59B4:				; CODE XREF: sub_4B81+E2Bj
		cmp	[bp+var_2], 1Eh
		jl	short loc_59AE
		jmp	short loc_599E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_59BC:				; CODE XREF: sub_4B81+E21j
		les	bx, dword_1839C
		add	bx, [bp+var_4]
		mov	al, es:[bx]
		mov	[bp+var_15], al
		cmp	[bp+var_15], 1
		jnb	short loc_59D2
		jmp	loc_5A8D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_59D2:				; CODE XREF: sub_4B81+E4Cj
		cmp	[bp+var_15], 3
		jbe	short loc_59DB
		jmp	loc_5A8D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_59DB:				; CODE XREF: sub_4B81+E55j
		cmp	[bp+var_12], 0
		jnz	short loc_5A35
		mov	al, [bp+var_17]
		cmp	al, [bp+var_F]
		jnz	short loc_5A00
		mov	al, [bp+var_15]
		mov	ah, 0
		mov	dx, 3E8h
		mul	dx
		mov	bx, ax
		add	bx, word_1493A
		cmp	byte ptr [bx+456Fh], 0
		jz	short loc_5A27

loc_5A00:				; CODE XREF: sub_4B81+E66j
		inc	[bp+var_17]
		mov	al, [bp+var_17]
		cmp	al, [bp+var_E]
		jbe	short loc_5A1A
		mov	al, [bp+var_F]
		les	bx, dword_18394
		add	bx, [bp+var_4]
		mov	es:[bx], al
		jmp	short loc_5A27
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5A1A:				; CODE XREF: sub_4B81+E88j
		mov	al, [bp+var_17]
		les	bx, dword_18394
		add	bx, [bp+var_4]
		mov	es:[bx], al

loc_5A27:				; CODE XREF: sub_4B81+E7Dj
					; sub_4B81+E97j
		inc	word_1493A
		mov	ax, word_1493A
		cmp	ax, 3E8h
		jl	short loc_5A8D
		jmp	short loc_5A87
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5A35:				; CODE XREF: sub_4B81+E5Ej
		mov	al, [bp+var_17]
		cmp	al, [bp+var_D]
		jnz	short loc_5A54
		mov	al, [bp+var_15]
		mov	ah, 0
		mov	dx, 3E8h
		mul	dx
		mov	bx, ax
		add	bx, word_1493A
		cmp	byte ptr [bx+456Fh], 0
		jz	short loc_5A7B

loc_5A54:				; CODE XREF: sub_4B81+EBAj
		inc	[bp+var_17]
		mov	al, [bp+var_17]
		cmp	al, [bp+var_C]
		jbe	short loc_5A6E
		mov	al, [bp+var_D]
		les	bx, dword_18398
		add	bx, [bp+var_4]
		mov	es:[bx], al
		jmp	short loc_5A7B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5A6E:				; CODE XREF: sub_4B81+EDCj
		mov	al, [bp+var_17]
		les	bx, dword_18398
		add	bx, [bp+var_4]
		mov	es:[bx], al

loc_5A7B:				; CODE XREF: sub_4B81+ED1j
					; sub_4B81+EEBj
		inc	word_1493A
		mov	ax, word_1493A
		cmp	ax, 3E8h
		jl	short loc_5A8D

loc_5A87:				; CODE XREF: sub_4B81+EB2j
		mov	word_1493A, 0

loc_5A8D:				; CODE XREF: sub_4B81+E4Ej
					; sub_4B81+E57j ...
		cmp	word_14A6C, 0FFFFh
		jnz	short loc_5A97
		jmp	loc_5C10	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5A97:				; CODE XREF: sub_4B81+F11j
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		cmp	byte ptr [bx+85Dh], 0
		jz	short loc_5AB9
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		dec	byte ptr [bx+85Dh]
		jmp	loc_5C10	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5AB9:				; CODE XREF: sub_4B81+F25j
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	al, [bx+85Ch]
		mov	ah, 0
		cmp	ax, 2		; switch 3 cases
		jbe	short loc_5AD1
		jmp	loc_5C10	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5AD1:				; CODE XREF: sub_4B81+F4Bj
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_5ADA[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_5ADA	dw offset loc_5AE0	; DATA XREF: sub_4B81+F54r
		dw offset loc_5B55	; jump table for switch	statement
		dw offset loc_5BC4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5AE0:				; CODE XREF: sub_4B81+F54j
					; DATA XREF: sub_4B81:off_5ADAo
		cmp	byte_1A13E, 0	; case 0x0
		jz	short loc_5AFC
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+862h]
		call	sub_134B3
		inc	sp
		inc	sp

loc_5AFC:				; CODE XREF: sub_4B81+F64j
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		inc	word ptr [bx+862h]
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+862h]
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		cmp	ax, [bx+860h]
		jg	short loc_5B2B
		jmp	loc_5C10	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5B2B:				; CODE XREF: sub_4B81+FA5j
					; sub_4B81+108Cj
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+85Eh]
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	[bx+862h], ax

loc_5B47:				; CODE XREF: sub_4B81+1040j
		mov	word_14A6C, 0FFFFh
		call	sub_134DF
		jmp	loc_5C10	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5B55:				; CODE XREF: sub_4B81+F54j
					; DATA XREF: sub_4B81:off_5ADAo
		cmp	byte_1A13E, 0	; case 0x1
		jz	short loc_5B86
		call	sub_12FD1
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		cwd
		idiv	word ptr [bx+862h]
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		add	dx, [bx+85Eh]
		push	dx
		call	sub_134B3
		inc	sp
		inc	sp

loc_5B86:				; CODE XREF: sub_4B81+FD9j
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		dec	word ptr [bx+862h]
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		cmp	word ptr [bx+862h], 1
		jge	short loc_5C10	; default
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+860h]
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	[bx+862h], ax
		jmp	loc_5B47
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5BC4:				; CODE XREF: sub_4B81+F54j
					; DATA XREF: sub_4B81:off_5ADAo
		cmp	byte_1A13E, 0	; case 0x2
		jz	short loc_5BE0
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+862h]
		call	sub_134B3
		inc	sp
		inc	sp

loc_5BE0:				; CODE XREF: sub_4B81+1048j
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		sub	word ptr [bx+862h], 2
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+862h]
		mov	bx, word_14A6C
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		cmp	ax, [bx+860h]
		jge	short loc_5C10	; default
		jmp	loc_5B2B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5C10:				; CODE XREF: sub_4B81+F13j
					; sub_4B81+F35j ...
		inc	[bp+var_3A]	; default

loc_5C13:				; CODE XREF: sub_4B81+438j
		mov	al, [bp+var_11]
		mov	ah, 0
		add	ax, word_1493C
		cmp	ax, [bp+var_3A]
		jbe	short loc_5C24
		jmp	loc_4FBC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5C24:				; CODE XREF: sub_4B81+109Ej
		inc	[bp+var_38]

loc_5C27:				; CODE XREF: sub_4B81+430j
		cmp	[bp+var_38], 0Ah
		jnb	short loc_5C30
		jmp	loc_4FB4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5C30:				; CODE XREF: sub_4B81+10AAj
		mov	al, 0
		push	ax
		push	cs
		call	near ptr sub_4325
		inc	sp
		inc	sp
		cmp	[bp+var_B], 0
		jnz	short loc_5C46
		cmp	word_14A6C, 4
		jnz	short loc_5C68

loc_5C46:				; CODE XREF: sub_4B81+10BCj
		cmp	byte_1A13E, 0
		jz	short loc_5C63
		call	sub_12FD1
		mov	bx, 64h	; 'd'
		cwd
		idiv	bx
		add	dx, 32h	; '2'
		push	dx
		call	sub_134B3
		inc	sp
		inc	sp

loc_5C63:				; CODE XREF: sub_4B81+10CAj
		call	sub_134DF

loc_5C68:				; CODE XREF: sub_4B81+10C3j
		xor	si, si
		jmp	short loc_5C7F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5C6C:				; CODE XREF: sub_4B81+1102j
		mov	al, [si+601Ch]
		mov	ah, 0
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	byte ptr [bx+5633h], 0
		inc	si

loc_5C7F:				; CODE XREF: sub_4B81+10E9j
		cmp	si, word_1A1BA
		jb	short loc_5C6C
		call	sub_12FD1
		mov	bx, 3E8h
		cwd
		idiv	bx
		mov	word_1493A, dx
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_4B81	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_5C9A	proc far		; CODE XREF: sub_5DD3+3Bp sub_5DD3+59p ...

var_2		= byte ptr -2
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= word ptr  0Eh

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		cmp	word_17D9E, sp
		ja	short loc_5CAC
		call	far ptr	errStackOverflow

loc_5CAC:				; CODE XREF: sub_5C9A+Bj
		mov	di, [bp+arg_2]
		mov	si, [bp+arg_0]
		mov	cx, si
		and	cx, 7
		mov	ax, 80h	; ''
		sar	ax, cl
		mov	[bp-1],	al
		push	word ptr [bp-1]
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		mov	ax, di
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		mov	ax, si
		sar	ax, 1
		sar	ax, 1
		sar	ax, 1
		add	bx, ax
		mov	al, es:[bx]
		mov	[bp+var_2], al
		mov	ax, di
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, word ptr dword_1A1C0
		add	bx, ax
		mov	ax, si
		sar	ax, 1
		sar	ax, 1
		sar	ax, 1
		add	bx, ax
		mov	byte ptr es:[bx], 0
		push	word ptr [bp-1]
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		push	[bp+arg_4]
		push	cs
		call	near ptr sub_4381
		inc	sp
		inc	sp
		mov	ax, di
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		mov	ax, si
		sar	ax, 1
		sar	ax, 1
		sar	ax, 1
		add	bx, ax
		mov	al, es:[bx]
		mov	[bp+var_2], al
		mov	ax, di
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, word ptr dword_1A1C0
		add	bx, ax
		mov	ax, si
		sar	ax, 1
		sar	ax, 1
		sar	ax, 1
		add	bx, ax
		mov	byte ptr es:[bx], 0FFh
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_5C9A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_5D63	proc far		; CODE XREF: sub_5DD3+2Bp sub_5DD3+46p ...

var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		cmp	word_17D9E, sp
		ja	short loc_5D75
		call	far ptr	errStackOverflow

loc_5D75:				; CODE XREF: sub_5D63+Bj
		mov	di, [bp+arg_0]
		mov	cx, di
		and	cx, 7
		mov	ax, 80h	; ''
		shr	ax, cl
		mov	[bp+var_1], al
		mov	[bp+var_2], 0
		xor	si, si
		jmp	short loc_5DC3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5D8E:				; CODE XREF: sub_5D63+63j
		mov	ax, si
		push	ax
		push	cs
		call	near ptr sub_4342
		inc	sp
		inc	sp
		mov	al, [bp+var_1]
		push	ax
		mov	ax, [bp+arg_2]
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		mov	ax, di
		shr	ax, 1
		shr	ax, 1
		shr	ax, 1
		add	bx, ax
		pop	ax
		test	es:[bx], al
		jz	short loc_5DC2
		mov	al, 1
		mov	cx, si
		shl	al, cl
		add	[bp+var_2], al

loc_5DC2:				; CODE XREF: sub_5D63+54j
		inc	si

loc_5DC3:				; CODE XREF: sub_5D63+29j
		cmp	si, 4
		jl	short loc_5D8E
		mov	al, [bp+var_2]
		mov	ah, 0
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_5D63	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_5DD3	proc far		; CODE XREF: sub_615A+4Ap
					; sub_615A+10Fp

arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= word ptr  0Eh
arg_6		= word ptr  10h

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_5DE3
		call	far ptr	errStackOverflow

loc_5DE3:				; CODE XREF: sub_5DD3+9j
		mov	di, [bp+arg_2]
		mov	si, [bp+arg_0]
		cmp	[bp+arg_6], 0
		jnz	short loc_5DF2
		jmp	loc_5F9B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5DF2:				; CODE XREF: sub_5DD3+1Aj
		cmp	[bp+arg_4], 0
		jnz	short loc_5DFB
		jmp	loc_5ECB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5DFB:				; CODE XREF: sub_5DD3+23j
		push	di
		push	si
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		cmp	ax, 9
		jnz	short loc_5E13
		xor	ax, ax
		push	ax
		push	di
		push	si
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_5E13:				; CODE XREF: sub_5DD3+33j
		push	di
		mov	ax, si
		inc	ax
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		cmp	ax, 9
		jnz	short loc_5E31
		xor	ax, ax
		push	ax
		push	di
		mov	ax, si
		inc	ax
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_5E31:				; CODE XREF: sub_5DD3+4Ej
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 2
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		cmp	ax, 9
		jnz	short loc_5E59
		xor	ax, ax
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 2
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_5E59:				; CODE XREF: sub_5DD3+71j
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 3
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		cmp	ax, 9
		jnz	short loc_5E81
		xor	ax, ax
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 3
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_5E81:				; CODE XREF: sub_5DD3+99j
		push	di
		mov	ax, si
		add	ax, 4
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		cmp	ax, 9
		jnz	short loc_5EA3
		xor	ax, ax
		push	ax
		push	di
		mov	ax, si
		add	ax, 4
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_5EA3:				; CODE XREF: sub_5DD3+BEj
		push	di
		mov	ax, si
		add	ax, 5
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		cmp	ax, 9
		jz	short loc_5EB8
		jmp	loc_6156
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5EB8:				; CODE XREF: sub_5DD3+E0j
		xor	ax, ax
		push	ax
		push	di
		mov	ax, si
		add	ax, 5
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp
		jmp	loc_6156
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5ECB:				; CODE XREF: sub_5DD3+25j
		push	di
		push	si
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		or	ax, ax
		jnz	short loc_5EE3
		mov	ax, 9
		push	ax
		push	di
		push	si
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_5EE3:				; CODE XREF: sub_5DD3+102j
		push	di
		mov	ax, si
		inc	ax
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		or	ax, ax
		jnz	short loc_5F01
		mov	ax, 9
		push	ax
		push	di
		mov	ax, si
		inc	ax
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_5F01:				; CODE XREF: sub_5DD3+11Dj
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 2
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		or	ax, ax
		jnz	short loc_5F29
		mov	ax, 9
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 2
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_5F29:				; CODE XREF: sub_5DD3+140j
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 3
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		or	ax, ax
		jnz	short loc_5F51
		mov	ax, 9
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 3
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_5F51:				; CODE XREF: sub_5DD3+168j
		push	di
		mov	ax, si
		add	ax, 4
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		or	ax, ax
		jnz	short loc_5F73
		mov	ax, 9
		push	ax
		push	di
		mov	ax, si
		add	ax, 4
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_5F73:				; CODE XREF: sub_5DD3+18Dj
		push	di
		mov	ax, si
		add	ax, 5
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		or	ax, ax
		jz	short loc_5F87
		jmp	loc_6156
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5F87:				; CODE XREF: sub_5DD3+1AFj
		mov	ax, 9
		push	ax
		push	di
		mov	ax, si
		add	ax, 5
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp
		jmp	loc_6156
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5F9B:				; CODE XREF: sub_5DD3+1Cj
		cmp	[bp+arg_4], 0
		jnz	short loc_5FA4
		jmp	loc_6080
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_5FA4:				; CODE XREF: sub_5DD3+1CCj
		mov	ax, di
		inc	ax
		push	ax
		push	si
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		cmp	ax, 9
		jnz	short loc_5FC2
		xor	ax, ax
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		push	si
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_5FC2:				; CODE XREF: sub_5DD3+1DFj
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		inc	ax
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		cmp	ax, 9
		jnz	short loc_5FE6
		xor	ax, ax
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		inc	ax
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_5FE6:				; CODE XREF: sub_5DD3+200j
		push	di
		mov	ax, si
		add	ax, 2
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		cmp	ax, 9
		jnz	short loc_6008
		xor	ax, ax
		push	ax
		push	di
		mov	ax, si
		add	ax, 2
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_6008:				; CODE XREF: sub_5DD3+223j
		push	di
		mov	ax, si
		add	ax, 3
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		cmp	ax, 9
		jnz	short loc_602A
		xor	ax, ax
		push	ax
		push	di
		mov	ax, si
		add	ax, 3
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_602A:				; CODE XREF: sub_5DD3+245j
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 4
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		cmp	ax, 9
		jnz	short loc_6052
		xor	ax, ax
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 4
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_6052:				; CODE XREF: sub_5DD3+26Aj
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 5
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		cmp	ax, 9
		jz	short loc_606A
		jmp	loc_6156
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_606A:				; CODE XREF: sub_5DD3+292j
		xor	ax, ax
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 5
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp
		jmp	loc_6156
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6080:				; CODE XREF: sub_5DD3+1CEj
		mov	ax, di
		inc	ax
		push	ax
		push	si
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		or	ax, ax
		jnz	short loc_609E
		mov	ax, 9
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		push	si
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_609E:				; CODE XREF: sub_5DD3+2BAj
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		inc	ax
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		or	ax, ax
		jnz	short loc_60C2
		mov	ax, 9
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		inc	ax
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_60C2:				; CODE XREF: sub_5DD3+2DBj
		push	di
		mov	ax, si
		add	ax, 2
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		or	ax, ax
		jnz	short loc_60E4
		mov	ax, 9
		push	ax
		push	di
		mov	ax, si
		add	ax, 2
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_60E4:				; CODE XREF: sub_5DD3+2FEj
		push	di
		mov	ax, si
		add	ax, 3
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		or	ax, ax
		jnz	short loc_6106
		mov	ax, 9
		push	ax
		push	di
		mov	ax, si
		add	ax, 3
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_6106:				; CODE XREF: sub_5DD3+320j
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 4
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		or	ax, ax
		jnz	short loc_612E
		mov	ax, 9
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 4
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_612E:				; CODE XREF: sub_5DD3+345j
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 5
		push	ax
		push	cs
		call	near ptr sub_5D63
		mov	sp, bp
		or	ax, ax
		jnz	short loc_6156
		mov	ax, 9
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		mov	ax, si
		add	ax, 5
		push	ax
		push	cs
		call	near ptr sub_5C9A
		mov	sp, bp

loc_6156:				; CODE XREF: sub_5DD3+E2j sub_5DD3+F5j ...
		pop	bp
		pop	di
		pop	si
		retf
sub_5DD3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_615A	proc far		; CODE XREF: sub_DE8+17CP
					; sub_23BE+162P ...
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_6168
		call	far ptr	errStackOverflow

loc_6168:				; CODE XREF: sub_615A+7j
		mov	ax, 4
		push	ax
		push	cs
		call	near ptr sub_439E
		inc	sp
		inc	sp
		mov	bx, word_18316
		shl	bx, 1
		cmp	word ptr [bx+5624h], 0FFFFh
		jnz	short loc_6182
		jmp	loc_6271
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6182:				; CODE XREF: sub_615A+23j
		mov	bx, word_18316
		shl	bx, 1
		push	word ptr [bx+4148h]
		xor	ax, ax
		push	ax
		mov	bx, word_18316
		shl	bx, 1
		push	word ptr [bx+4076h]
		mov	bx, word_18316
		shl	bx, 1
		push	word ptr [bx+63FCh]
		push	cs
		call	near ptr sub_5DD3
		add	sp, 8
		mov	bx, word_18316
		shl	bx, 1
		cmp	word ptr [bx+5624h], 0
		jz	short loc_61D1
		mov	bx, word_18316
		shl	bx, 1
		inc	word ptr [bx+63FCh]
		mov	bx, word_18316
		shl	bx, 1
		cmp	word ptr [bx+63FCh], 13Bh
		jle	short loc_61F4
		jmp	short loc_61E8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_61D1:				; CODE XREF: sub_615A+5Bj
		mov	bx, word_18316
		shl	bx, 1
		dec	word ptr [bx+63FCh]
		mov	bx, word_18316
		shl	bx, 1
		cmp	word ptr [bx+63FCh], 0
		jge	short loc_61F4

loc_61E8:				; CODE XREF: sub_615A+75j
		mov	bx, word_18316
		shl	bx, 1
		mov	word ptr [bx+5624h], 0FFFFh

loc_61F4:				; CODE XREF: sub_615A+73j sub_615A+8Cj
		mov	bx, word_18316
		shl	bx, 1
		cmp	word ptr [bx+5624h], 0FFFFh
		jnz	short loc_6204
		jmp	loc_62D1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6204:				; CODE XREF: sub_615A+A5j
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		push	dx
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		pop	ax
		sub	ax, dx
		mov	bx, word_18316
		shl	bx, 1
		add	[bx+4076h], ax
		mov	bx, word_18316
		shl	bx, 1
		cmp	word ptr [bx+4148h], 0
		jnz	short loc_623A
		mov	ax, 1
		jmp	short loc_623C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_623A:				; CODE XREF: sub_615A+D9j
		xor	ax, ax

loc_623C:				; CODE XREF: sub_615A+DEj
		mov	bx, word_18316
		shl	bx, 1
		mov	[bx+4148h], ax
		mov	bx, word_18316
		shl	bx, 1
		push	word ptr [bx+4148h]
		mov	ax, 1
		push	ax
		mov	bx, word_18316
		shl	bx, 1
		push	word ptr [bx+4076h]
		mov	bx, word_18316
		shl	bx, 1
		push	word ptr [bx+63FCh]
		push	cs
		call	near ptr sub_5DD3
		add	sp, 8
		jmp	short loc_62D1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6271:				; CODE XREF: sub_615A+25j
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		mov	bx, word_18316
		shl	bx, 1
		mov	[bx+5624h], dx
		mov	bx, word_18316
		shl	bx, 1
		cmp	word ptr [bx+5624h], 0
		jz	short loc_62A1
		mov	bx, word_18316
		shl	bx, 1
		mov	word ptr [bx+63FCh], 0
		jmp	short loc_62AD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_62A1:				; CODE XREF: sub_615A+137j
		mov	bx, word_18316
		shl	bx, 1
		mov	word ptr [bx+63FCh], 13Bh

loc_62AD:				; CODE XREF: sub_615A+145j
		call	sub_12FD1
		mov	bx, 3Ch	; '<'
		cwd
		idiv	bx
		add	dx, 14h
		mov	bx, word_18316
		shl	bx, 1
		mov	[bx+4076h], dx
		mov	bx, word_18316
		shl	bx, 1
		mov	word ptr [bx+4148h], 0

loc_62D1:				; CODE XREF: sub_615A+A7j
					; sub_615A+115j
		inc	word_18316
		cmp	word_18316, 7
		jl	short loc_62E2
		mov	word_18316, 0

loc_62E2:				; CODE XREF: sub_615A+180j
		pop	bp
		retf
sub_615A	endp ; sp = -2


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_62E4	proc far		; CODE XREF: sub_DE8+18AP
					; sub_23BE+170P ...

var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_62F7
		call	far ptr	errStackOverflow

loc_62F7:				; CODE XREF: sub_62E4+Cj
		mov	ax, 4
		push	ax
		push	cs
		call	near ptr sub_439E
		inc	sp
		inc	sp
		mov	ax, 8
		push	ax
		push	word_14966
		push	word_14964
		push	cs
		call	near ptr sub_5C9A
		add	sp, 6
		xor	si, si
		jmp	short loc_6367
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6318:				; CODE XREF: sub_62E4+86j
		call	sub_12FD1
		mov	bx, 13Bh
		cwd
		idiv	bx
		mov	[bp+var_4], dx
		call	sub_12FD1
		mov	bx, 60h	; '`'
		cwd
		idiv	bx
		add	dx, 8
		mov	[bp+var_2], dx
		push	dx
		push	[bp+var_4]
		push	cs
		call	near ptr sub_5D63
		add	sp, 4
		cmp	ax, 8
		jnz	short loc_6366
		mov	ax, 0Fh
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		push	cs
		call	near ptr sub_5C9A
		add	sp, 6
		mov	ax, [bp+var_4]
		mov	word_14964, ax
		mov	ax, [bp+var_2]
		mov	word_14966, ax
		jmp	short loc_636C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6366:				; CODE XREF: sub_62E4+61j
		inc	si

loc_6367:				; CODE XREF: sub_62E4+32j
		cmp	si, 14h
		jl	short loc_6318

loc_636C:				; CODE XREF: sub_62E4+80j
		xor	si, si
		jmp	loc_64D7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6371:				; CODE XREF: sub_62E4+1F8j
		mov	bx, si
		shl	bx, 1
		cmp	word ptr [bx+640Ah], 0FFFFh
		jnz	short loc_637F
		jmp	loc_642B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_637F:				; CODE XREF: sub_62E4+96j
		xor	ax, ax
		push	ax
		mov	bx, si
		shl	bx, 1
		push	word ptr [bx+4084h]
		mov	bx, si
		shl	bx, 1
		push	word ptr [bx+640Ah]
		push	cs
		call	near ptr sub_5C9A
		add	sp, 6
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+5F46h]
		mov	bx, si
		shl	bx, 1
		add	[bx+640Ah], ax
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+5510h]
		mov	bx, si
		shl	bx, 1
		add	[bx+4084h], ax
		mov	bx, si
		shl	bx, 1
		inc	word ptr [bx+5510h]
		mov	bx, si
		shl	bx, 1
		inc	word ptr [bx+425Ch]
		mov	bx, si
		shl	bx, 1
		push	word ptr [bx+4084h]
		mov	bx, si
		shl	bx, 1
		push	word ptr [bx+640Ah]
		push	cs
		call	near ptr sub_5D63
		add	sp, 4
		or	ax, ax
		jz	short loc_63F1
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+640Ah], 0FFFFh
		jmp	loc_64D6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_63F1:				; CODE XREF: sub_62E4+FEj
		mov	di, 0Ch
		mov	bx, si
		shl	bx, 1
		cmp	word ptr [bx+425Ch], 0Ah
		jle	short loc_6402
		mov	di, 4

loc_6402:				; CODE XREF: sub_62E4+119j
		mov	bx, si
		shl	bx, 1
		cmp	word ptr [bx+425Ch], 0Fh
		jle	short loc_6410
		mov	di, 8

loc_6410:				; CODE XREF: sub_62E4+127j
		push	di
		mov	bx, si
		shl	bx, 1
		push	word ptr [bx+4084h]
		mov	bx, si
		shl	bx, 1
		push	word ptr [bx+640Ah]
		push	cs
		call	near ptr sub_5C9A
		add	sp, 6
		jmp	loc_64D6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_642B:				; CODE XREF: sub_62E4+98j
					; sub_62E4+191j
		call	sub_12FD1
		mov	bx, 0Ah
		cwd
		idiv	bx
		add	dx, 99h	; ''
		mov	bx, si
		shl	bx, 1
		mov	[bx+640Ah], dx
		mov	ax, 55h	; 'U'
		push	ax
		call	sub_12FD1
		mov	bx, 5
		cwd
		idiv	bx
		pop	ax
		sub	ax, dx
		mov	bx, si
		shl	bx, 1
		mov	[bx+4084h], ax
		mov	bx, si
		shl	bx, 1
		push	word ptr [bx+4084h]
		mov	bx, si
		shl	bx, 1
		push	word ptr [bx+640Ah]
		push	cs
		call	near ptr sub_5D63
		add	sp, 4
		or	ax, ax
		jnz	short loc_642B
		call	sub_12FD1
		mov	bx, 4
		cwd
		idiv	bx
		add	dx, 3
		neg	dx
		mov	bx, si
		shl	bx, 1
		mov	[bx+5510h], dx
		call	sub_12FD1
		mov	bx, 4
		cwd
		idiv	bx
		push	dx
		call	sub_12FD1
		mov	bx, 4
		cwd
		idiv	bx
		pop	ax
		sub	ax, dx
		mov	bx, si
		shl	bx, 1
		mov	[bx+5F46h], ax
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+425Ch], 0
		mov	ax, 0Ch
		push	ax
		mov	bx, si
		shl	bx, 1
		push	word ptr [bx+4084h]
		mov	bx, si
		shl	bx, 1
		push	word ptr [bx+640Ah]
		push	cs
		call	near ptr sub_5C9A
		add	sp, 6

loc_64D6:				; CODE XREF: sub_62E4+10Aj
					; sub_62E4+144j
		inc	si

loc_64D7:				; CODE XREF: sub_62E4+8Aj
		cmp	si, 8
		jge	short loc_64DF
		jmp	loc_6371
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_64DF:				; CODE XREF: sub_62E4+1F6j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_62E4	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 6
		cmp	word_17D9E, sp
		ja	short loc_64F8
		call	far ptr	errStackOverflow

loc_64F8:				; CODE XREF: seg002:2201j
		mov	ax, [bp+0Ch]
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		add	bx, [bp+0Ah]
		mov	word ptr [bp-4], es
		mov	[bp-6],	bx
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	al, 0
		push	ax
		push	cs
		call	near ptr sub_4342
		inc	sp
		inc	sp
		xor	si, si
		mov	di, si
		mov	[bp-2],	si
		jmp	short loc_6552
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_652A:				; CODE XREF: seg002:2268j
		push	word ptr [bp+0Eh]
		mov	dx, [bp-4]
		mov	ax, [bp-6]
		add	ax, si
		push	dx
		push	ax
		mov	dx, [bp+14h]
		mov	ax, [bp+12h]
		add	ax, di
		push	dx
		push	ax
		call	copyCastleStuff
		add	sp, 0Ah
		add	si, 28h	; '('
		add	di, [bp+0Eh]
		inc	word ptr [bp-2]

loc_6552:				; CODE XREF: seg002:2238j
		mov	ax, [bp-2]
		cmp	ax, [bp+10h]
		jl	short loc_652A
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 8
		cmp	word_17D9E, sp
		ja	short loc_6573
		call	far ptr	errStackOverflow

loc_6573:				; CODE XREF: seg002:227Cj
		mov	ax, [bp+0Ch]
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		add	bx, [bp+0Ah]
		mov	word ptr [bp-2], es
		mov	[bp-4],	bx
		mov	word ptr [bp-8], 0
		mov	al, 0FFh
		push	ax
		push	cs
		call	near ptr sub_4485
		inc	sp
		inc	sp
		mov	word ptr [bp-6], 0
		jmp	short loc_65E0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_659F:				; CODE XREF: seg002:22F4j
		push	word ptr [bp-6]
		push	cs
		call	near ptr sub_4342
		inc	sp
		inc	sp
		xor	si, si
		mov	di, si
		jmp	short loc_65D8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_65AE:				; CODE XREF: seg002:22EBj
		push	word ptr [bp+0Eh]
		mov	dx, [bp-2]
		mov	ax, [bp-4]
		add	ax, si
		push	dx
		push	ax
		mov	dx, [bp+14h]
		mov	ax, [bp+12h]
		add	ax, [bp-8]
		push	dx
		push	ax
		call	copyCastleStuff
		add	sp, 0Ah
		mov	ax, [bp+0Eh]
		add	[bp-8],	ax
		add	si, 28h	; '('
		inc	di

loc_65D8:				; CODE XREF: seg002:22BCj
		cmp	di, [bp+10h]
		jl	short loc_65AE

loc_65DD:
		inc	word ptr [bp-6]

loc_65E0:				; CODE XREF: seg002:22ADj
		cmp	word ptr [bp-6], 4
		jl	short loc_659F
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
seg002		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg003		segment	byte public 'CODE' use16
		assume cs:seg003
		;org 0Ch
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_65EC	proc far		; CODE XREF: sub_68C6+Fp
		push	bp

loc_65ED:
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_65FA
		call	far ptr	errStackOverflow

loc_65FA:				; CODE XREF: sub_65EC+7j
		mov	byte_149DC, 0
		mov	byte_149DE, 0
		mov	byte_149DD, 0
		mov	byte_149DF, 0
		mov	byte_149D7, 0
		mov	byte_149D8, 0
		mov	byte_149D9, 0
		mov	byte_149DA, 0
		mov	byte_149D5, 0
		mov	byte_149D6, 0
		mov	byte_149DB, 0
		mov	byte_149D2, 0
		mov	byte_149D1, 0
		mov	byte_149D4, 0
		mov	byte_149D3, 0
		mov	byte_149E0, 0
		pop	bp
		retf
sub_65EC	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	ax
		push	bx
		push	cx
		push	dx
		push	es
		push	ds
		push	si
		push	di
		push	bp
		mov	bp, seg	dseg
		mov	ds, bp
		mov	bp, sp
		dec	sp
		dec	sp
		cmp	word_17D9E, sp
		ja	short loc_6669
		call	far ptr	errStackOverflow

loc_6669:				; CODE XREF: seg003:0082j
		in	al, 60h		; AT Keyboard controller 8042.
		mov	[bp-2],	al
		in	al, 61h		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ЭЫЭ OR	03H=spkr ON
					; 1: Tmr 2 data	ЭМ  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		mov	[bp-1],	al
		or	byte ptr [bp-1], 80h
		mov	al, [bp-1]
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ЭЫЭ OR	03H=spkr ON
					; 1: Tmr 2 data	ЭМ  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		and	byte ptr [bp-1], 7Fh
		mov	al, [bp-1]
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ЭЫЭ OR	03H=spkr ON
					; 1: Tmr 2 data	ЭМ  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		mov	al, 20h	; ' '
		out	20h, al		; Interrupt controller,	8259A.
		cmp	byte ptr [bp-2], 92h ; ''
		jnz	short loc_6693
		inc	byte_19F0A

loc_6693:				; CODE XREF: seg003:00ADj
		cmp	byte ptr [bp-2], 92h ; ''
		jz	short loc_66A4
		cmp	byte ptr [bp-2], 12h
		jz	short loc_66A4
		mov	byte_19F0A, 0

loc_66A4:				; CODE XREF: seg003:00B7j seg003:00BDj
		cmp	byte_19F0A, 4
		jbe	short loc_66B1
		mov	word_19E84, 270Fh

loc_66B1:				; CODE XREF: seg003:00C9j
		mov	al, byte_149CF
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		cmp	al, [bp-2]
		jnz	short loc_66C6
		mov	byte_149DC, 1

loc_66C6:				; CODE XREF: seg003:00DFj
		mov	al, byte_149D0
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		cmp	al, [bp-2]
		jnz	short loc_66DB
		mov	byte_149DD, 1

loc_66DB:				; CODE XREF: seg003:00F4j
		cmp	byte ptr [bp-2], 43h ; 'C'
		jnz	short loc_66E6
		mov	byte_149D7, 1

loc_66E6:				; CODE XREF: seg003:00FFj
		cmp	byte ptr [bp-2], 44h ; 'D'
		jnz	short loc_66F1
		mov	byte_149D9, 1

loc_66F1:				; CODE XREF: seg003:010Aj
		cmp	byte ptr [bp-2], 3Bh ; ';'
		jnz	short loc_66FC
		mov	byte_149D5, 1

loc_66FC:				; CODE XREF: seg003:0115j
		cmp	byte_18044, 0
		jnz	short loc_676C
		mov	al, byte_149CE
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		cmp	al, [bp-2]
		jnz	short loc_6718
		mov	byte_149D6, 1

loc_6718:				; CODE XREF: seg003:0131j
		mov	al, byte_149CB
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		cmp	al, [bp-2]
		jnz	short loc_672D
		mov	byte_149D2, 1

loc_672D:				; CODE XREF: seg003:0146j
		mov	al, byte_149CA
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		cmp	al, [bp-2]
		jnz	short loc_6742
		mov	byte_149D1, 1

loc_6742:				; CODE XREF: seg003:015Bj
		mov	al, byte_149CD
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		cmp	al, [bp-2]
		jnz	short loc_6757
		mov	byte_149D4, 1

loc_6757:				; CODE XREF: seg003:0170j
		mov	al, byte_149CC
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		cmp	al, [bp-2]
		jnz	short loc_676C
		mov	byte_149D3, 1

loc_676C:				; CODE XREF: seg003:0121j seg003:0185j
		mov	al, byte_149CF
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		mov	ah, 0
		add	ax, 80h	; ''
		mov	dl, [bp-2]
		mov	dh, 0
		cmp	ax, dx
		jnz	short loc_678F
		mov	byte_149DC, 0
		mov	byte_149DE, 0

loc_678F:				; CODE XREF: seg003:01A3j
		mov	al, byte_149D0
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		mov	ah, 0
		add	ax, 80h	; ''
		mov	dl, [bp-2]
		mov	dh, 0
		cmp	ax, dx
		jnz	short loc_67B2
		mov	byte_149DD, 0
		mov	byte_149DF, 0

loc_67B2:				; CODE XREF: seg003:01C6j
		cmp	byte ptr [bp-2], 0C3h ;	'У'
		jnz	short loc_67C2
		mov	byte_149D7, 0
		mov	byte_149D8, 0

loc_67C2:				; CODE XREF: seg003:01D6j
		cmp	byte ptr [bp-2], 0C4h ;	'Ф'
		jnz	short loc_67D2
		mov	byte_149D9, 0
		mov	byte_149DA, 0

loc_67D2:				; CODE XREF: seg003:01E6j
		cmp	byte ptr [bp-2], 0BBh ;	'Л'
		jnz	short loc_67DD
		mov	byte_149D5, 0

loc_67DD:				; CODE XREF: seg003:01F6j
		cmp	byte_18044, 0
		jz	short loc_67E7
		jmp	loc_6887
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_67E7:				; CODE XREF: seg003:0202j
		mov	al, byte_149CE
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		mov	ah, 0
		add	ax, 80h	; ''
		mov	dl, [bp-2]
		mov	dh, 0
		cmp	ax, dx
		jnz	short loc_680A
		mov	byte_149D6, 0
		mov	byte_149DB, 0

loc_680A:				; CODE XREF: seg003:021Ej
		mov	al, byte_149CB
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		mov	ah, 0
		add	ax, 80h	; ''
		mov	dl, [bp-2]
		mov	dh, 0
		cmp	ax, dx
		jnz	short loc_6828
		mov	byte_149D2, 0

loc_6828:				; CODE XREF: seg003:0241j
		mov	al, byte_149CA
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		mov	ah, 0
		add	ax, 80h	; ''
		mov	dl, [bp-2]
		mov	dh, 0
		cmp	ax, dx
		jnz	short loc_6846
		mov	byte_149D1, 0

loc_6846:				; CODE XREF: seg003:025Fj
		mov	al, byte_149CD
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		mov	ah, 0
		add	ax, 80h	; ''
		mov	dl, [bp-2]
		mov	dh, 0
		cmp	ax, dx
		jnz	short loc_6864
		mov	byte_149D4, 0

loc_6864:				; CODE XREF: seg003:027Dj
		mov	al, byte_149CC
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+7B0h]
		mov	ah, 0
		add	ax, 80h	; ''
		mov	dl, [bp-2]
		mov	dh, 0
		cmp	ax, dx
		jnz	short loc_6887
		mov	byte_149D3, 0
		mov	byte_149E0, 0

loc_6887:				; CODE XREF: seg003:0204j seg003:029Bj
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		pop	ds
		pop	es
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		iret
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		sub	sp, 10h
		cmp	word_17D9E, sp
		ja	short loc_68A4
		call	far ptr	errStackOverflow

loc_68A4:				; CODE XREF: seg003:02BDj
		mov	byte ptr [bp-0Fh], 0Ch
		mov	byte ptr [bp-10h], 0
		push	ss
		lea	ax, [bp-10h]
		push	ax
		push	ss
		lea	ax, [bp-10h]
		push	ax
		mov	ax, 21h	; '!'
		push	ax
		call	sub_12954
		add	sp, 0Ah
		mov	sp, bp
		pop	bp
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_68C6	proc far		; CODE XREF: sub_DE8+29P
					; sub_DE8:loc_1D02P ...
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_68D4
		call	far ptr	errStackOverflow

loc_68D4:				; CODE XREF: sub_68C6+7j
		push	cs
		call	near ptr sub_65EC
		cli
		mov	ax, 9
		push	ax
		call	sub_1288E
		inc	sp
		inc	sp
		mov	word_1A80A, dx
		mov	word_1A808, ax
		mov	ax, 6Ch	; 'l'
		mov	dx, cs
		push	dx
		push	ax
		mov	ax, 9
		push	ax
		call	sub_1289E
		add	sp, 6
		sti
		pop	bp
		retf
sub_68C6	endp ; sp = -2


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_6901	proc far		; CODE XREF: sub_DE8+E79P
					; sub_DE8:loc_23ABP ...
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_690F
		call	far ptr	errStackOverflow

loc_690F:				; CODE XREF: sub_6901+7j
		cli
		push	word_1A80A
		push	word_1A808
		mov	ax, 9
		push	ax
		call	sub_1289E
		add	sp, 6
		sti
		pop	bp
		retf
sub_6901	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_6927	proc far		; CODE XREF: sub_66A+30P sub_66A+62P ...

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_6935
		call	far ptr	errStackOverflow

loc_6935:				; CODE XREF: sub_6927+7j
		call	sub_42F2
		mov	sp, bp
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	ds
		mov	ax, 12FAh
		push	ax
		call	sub_11FCC
		mov	sp, bp
		mov	ax, 3
		push	ax
		call	sub_122E6
		mov	sp, bp
		pop	bp
		retf
sub_6927	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_6969
		call	far ptr	errStackOverflow

loc_6969:				; CODE XREF: seg003:0382j
		cmp	word ptr [bp+6], 1
		jge	short loc_697A
		push	ds
		mov	ax, 12FDh
		push	ax
		push	cs
		call	near ptr sub_6927
		mov	sp, bp

loc_697A:				; CODE XREF: seg003:038Dj
		call	sub_12FD1
		mov	sp, bp
		cwd
		idiv	word ptr [bp+6]
		mov	ax, dx
		pop	bp
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_6989	proc far		; CODE XREF: sub_DE8:loc_FF3P
					; sub_23BE:loc_25FFP

var_32		= word ptr -32h
var_1C		= word ptr -1Ch
var_1A		= word ptr -1Ah
var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 32h
		cmp	word_17D9E, sp
		ja	short loc_699C
		call	far ptr	errStackOverflow

loc_699C:				; CODE XREF: sub_6989+Cj
		mov	ax, 1
		push	ax
		call	sub_4325
		inc	sp
		inc	sp
		mov	ax, 0Fh
		push	ax
		call	sub_4381
		inc	sp
		inc	sp
		mov	ax, 0FFh
		push	ax
		call	sub_4485
		inc	sp
		inc	sp
		mov	[bp+var_1C], 7
		mov	[bp+var_1A], 0B0h ; 'А'
		mov	ax, [bp+var_1A]
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		add	bx, [bp+var_1C]
		mov	word ptr [bp+var_8+2], es
		mov	word ptr [bp+var_8], bx
		cmp	word ptr dword_1A1C0+2,	0A000h
		jnz	short loc_69FC
		cmp	word ptr dword_1A1C0, 0
		jnz	short loc_69FC
		les	bx, [bp+var_8]
		add	bx, 2000h
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		jmp	short loc_6A09
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_69FC:				; CODE XREF: sub_6989+5Bj sub_6989+62j
		les	bx, [bp+var_8]
		add	bx, 0E000h
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx

loc_6A09:				; CODE XREF: sub_6989+71j
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_32]
		push	ax
		push	word_1A51A
		call	sub_12BDF
		add	sp, 8
		push	ss
		lea	ax, [bp+var_32]
		push	ax
		call	sub_13692
		add	sp, 4
		mov	[bp+var_14], ax
		mov	[bp+var_16], 0
		mov	[bp+var_18], 0

loc_6A38:				; CODE XREF: sub_6989+1B9j
		cmp	[bp+var_16], 3
		jl	short loc_6A41
		jmp	loc_6B45
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6A41:				; CODE XREF: sub_6989+B3j
		mov	ax, 3
		sub	ax, [bp+var_16]
		cmp	ax, [bp+var_14]
		jle	short loc_6A59
		mov	word ptr [bp+var_C+2], 0A000h
		mov	word ptr [bp+var_C], 0A028h
		jmp	loc_6B12
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6A59:				; CODE XREF: sub_6989+C1j
		lea	bx, [bp+var_32]
		add	bx, [bp+var_18]
		mov	al, ss:[bx]
		mov	ah, 0
		sub	ax, 30h	; '0'
		cmp	ax, 9		; switch 10 cases
		jbe	short loc_6A6F
		jmp	loc_6B05	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6A6F:				; CODE XREF: sub_6989+E1j
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_6A78[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_6A78	dw offset loc_6A8C	; DATA XREF: sub_6989+EAr
		dw offset loc_6A99	; jump table for switch	statement
		dw offset loc_6AA5
		dw offset loc_6AB1
		dw offset loc_6ABD
		dw offset loc_6AC9
		dw offset loc_6AD5
		dw offset loc_6AE1
		dw offset loc_6AED
		dw offset loc_6AF9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6A8C:				; CODE XREF: sub_6989+EAj
					; DATA XREF: sub_6989:off_6A78o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x0
		mov	word ptr [bp+var_C], 0A029h
		jmp	loc_6B0F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6A99:				; CODE XREF: sub_6989+EAj
					; DATA XREF: sub_6989:off_6A78o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x1
		mov	word ptr [bp+var_C], 0A02Ah
		jmp	short loc_6B0F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6AA5:				; CODE XREF: sub_6989+EAj
					; DATA XREF: sub_6989:off_6A78o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x2
		mov	word ptr [bp+var_C], 0A02Bh
		jmp	short loc_6B0F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6AB1:				; CODE XREF: sub_6989+EAj
					; DATA XREF: sub_6989:off_6A78o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x3
		mov	word ptr [bp+var_C], 0A02Ch
		jmp	short loc_6B0F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6ABD:				; CODE XREF: sub_6989+EAj
					; DATA XREF: sub_6989:off_6A78o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x4
		mov	word ptr [bp+var_C], 0A02Dh
		jmp	short loc_6B0F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6AC9:				; CODE XREF: sub_6989+EAj
					; DATA XREF: sub_6989:off_6A78o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x5
		mov	word ptr [bp+var_C], 0A02Eh
		jmp	short loc_6B0F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6AD5:				; CODE XREF: sub_6989+EAj
					; DATA XREF: sub_6989:off_6A78o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x6
		mov	word ptr [bp+var_C], 0A02Fh
		jmp	short loc_6B0F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6AE1:				; CODE XREF: sub_6989+EAj
					; DATA XREF: sub_6989:off_6A78o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x7
		mov	word ptr [bp+var_C], 0A030h
		jmp	short loc_6B0F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6AED:				; CODE XREF: sub_6989+EAj
					; DATA XREF: sub_6989:off_6A78o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x8
		mov	word ptr [bp+var_C], 0A031h
		jmp	short loc_6B0F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6AF9:				; CODE XREF: sub_6989+EAj
					; DATA XREF: sub_6989:off_6A78o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x9
		mov	word ptr [bp+var_C], 0A032h
		jmp	short loc_6B0F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6B05:				; CODE XREF: sub_6989+E3j
		mov	word ptr [bp+var_C+2], 0A000h ;	default
		mov	word ptr [bp+var_C], 0A028h

loc_6B0F:				; CODE XREF: sub_6989+10Dj
					; sub_6989+11Aj ...
		inc	[bp+var_18]

loc_6B12:				; CODE XREF: sub_6989+CDj
		xor	si, si
		mov	di, si
		jmp	short loc_6B34
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6B18:				; CODE XREF: sub_6989+1AEj
		les	bx, [bp+var_C]
		mov	al, es:[bx+si]
		les	bx, [bp+var_8]
		mov	es:[bx+si], al
		les	bx, [bp+var_C]
		mov	al, es:[bx+si]
		les	bx, [bp+var_4]
		mov	es:[bx+si], al
		add	si, 28h	; '('
		inc	di

loc_6B34:				; CODE XREF: sub_6989+18Dj
		cmp	di, 8
		jl	short loc_6B18
		inc	word ptr [bp+var_8]
		inc	word ptr [bp+var_4]
		inc	[bp+var_16]
		jmp	loc_6A38
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6B45:				; CODE XREF: sub_6989+B5j
		mov	[bp+var_1C], 0Bh
		mov	[bp+var_1A], 0B0h ; 'А'
		mov	ax, [bp+var_1A]
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		add	bx, [bp+var_1C]
		mov	word ptr [bp+var_8+2], es
		mov	word ptr [bp+var_8], bx
		cmp	word ptr dword_1A1C0+2,	0A000h
		jnz	short loc_6B84
		cmp	word ptr dword_1A1C0, 0
		jnz	short loc_6B84
		les	bx, [bp+var_8]
		add	bx, 2000h
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		jmp	short loc_6B91
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6B84:				; CODE XREF: sub_6989+1E3j
					; sub_6989+1EAj
		les	bx, [bp+var_8]
		add	bx, 0E000h
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx

loc_6B91:				; CODE XREF: sub_6989+1F9j
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_32]
		push	ax
		mov	bx, word_197A2
		shl	bx, 1
		push	word ptr [bx+172h]
		call	sub_12BDF
		add	sp, 8
		push	ss
		lea	ax, [bp+var_32]
		push	ax
		call	sub_13692
		add	sp, 4
		mov	[bp+var_14], ax
		mov	[bp+var_16], 0
		mov	[bp+var_18], 0

loc_6BC6:				; CODE XREF: sub_6989+347j
		cmp	[bp+var_16], 3
		jl	short loc_6BCF
		jmp	loc_6CD3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6BCF:				; CODE XREF: sub_6989+241j
		mov	ax, 3
		sub	ax, [bp+var_16]
		cmp	ax, [bp+var_14]
		jle	short loc_6BE7
		mov	word ptr [bp+var_C+2], 0A000h
		mov	word ptr [bp+var_C], 0A028h
		jmp	loc_6CA0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6BE7:				; CODE XREF: sub_6989+24Fj
		lea	bx, [bp+var_32]
		add	bx, [bp+var_18]
		mov	al, ss:[bx]
		mov	ah, 0
		sub	ax, 30h	; '0'
		cmp	ax, 9		; switch 10 cases
		jbe	short loc_6BFD
		jmp	loc_6C93	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6BFD:				; CODE XREF: sub_6989+26Fj
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_6C06[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_6C06	dw offset loc_6C1A	; DATA XREF: sub_6989+278r
		dw offset loc_6C27	; jump table for switch	statement
		dw offset loc_6C33
		dw offset loc_6C3F
		dw offset loc_6C4B
		dw offset loc_6C57
		dw offset loc_6C63
		dw offset loc_6C6F
		dw offset loc_6C7B
		dw offset loc_6C87
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6C1A:				; CODE XREF: sub_6989+278j
					; DATA XREF: sub_6989:off_6C06o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x0
		mov	word ptr [bp+var_C], 0A029h
		jmp	loc_6C9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6C27:				; CODE XREF: sub_6989+278j
					; DATA XREF: sub_6989:off_6C06o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x1
		mov	word ptr [bp+var_C], 0A02Ah
		jmp	short loc_6C9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6C33:				; CODE XREF: sub_6989+278j
					; DATA XREF: sub_6989:off_6C06o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x2
		mov	word ptr [bp+var_C], 0A02Bh
		jmp	short loc_6C9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6C3F:				; CODE XREF: sub_6989+278j
					; DATA XREF: sub_6989:off_6C06o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x3
		mov	word ptr [bp+var_C], 0A02Ch
		jmp	short loc_6C9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6C4B:				; CODE XREF: sub_6989+278j
					; DATA XREF: sub_6989:off_6C06o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x4
		mov	word ptr [bp+var_C], 0A02Dh
		jmp	short loc_6C9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6C57:				; CODE XREF: sub_6989+278j
					; DATA XREF: sub_6989:off_6C06o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x5
		mov	word ptr [bp+var_C], 0A02Eh
		jmp	short loc_6C9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6C63:				; CODE XREF: sub_6989+278j
					; DATA XREF: sub_6989:off_6C06o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x6
		mov	word ptr [bp+var_C], 0A02Fh
		jmp	short loc_6C9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6C6F:				; CODE XREF: sub_6989+278j
					; DATA XREF: sub_6989:off_6C06o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x7
		mov	word ptr [bp+var_C], 0A030h
		jmp	short loc_6C9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6C7B:				; CODE XREF: sub_6989+278j
					; DATA XREF: sub_6989:off_6C06o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x8
		mov	word ptr [bp+var_C], 0A031h
		jmp	short loc_6C9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6C87:				; CODE XREF: sub_6989+278j
					; DATA XREF: sub_6989:off_6C06o
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x9
		mov	word ptr [bp+var_C], 0A032h
		jmp	short loc_6C9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6C93:				; CODE XREF: sub_6989+271j
		mov	word ptr [bp+var_C+2], 0A000h ;	default
		mov	word ptr [bp+var_C], 0A028h

loc_6C9D:				; CODE XREF: sub_6989+29Bj
					; sub_6989+2A8j ...
		inc	[bp+var_18]

loc_6CA0:				; CODE XREF: sub_6989+25Bj
		xor	si, si
		mov	di, si
		jmp	short loc_6CC2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6CA6:				; CODE XREF: sub_6989+33Cj
		les	bx, [bp+var_C]
		mov	al, es:[bx+si]
		les	bx, [bp+var_8]
		mov	es:[bx+si], al
		les	bx, [bp+var_C]
		mov	al, es:[bx+si]
		les	bx, [bp+var_4]
		mov	es:[bx+si], al
		add	si, 28h	; '('
		inc	di

loc_6CC2:				; CODE XREF: sub_6989+31Bj
		cmp	di, 8
		jl	short loc_6CA6
		inc	word ptr [bp+var_8]
		inc	word ptr [bp+var_4]
		inc	[bp+var_16]
		jmp	loc_6BC6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6CD3:				; CODE XREF: sub_6989+243j
		mov	[bp+var_1C], 9
		mov	[bp+var_1A], 0B9h ; 'Й'
		mov	ax, [bp+var_1A]
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		add	bx, [bp+var_1C]
		mov	word ptr [bp+var_8+2], es
		mov	word ptr [bp+var_8], bx
		cmp	word ptr dword_1A1C0+2,	0A000h
		jnz	short loc_6D12
		cmp	word ptr dword_1A1C0, 0
		jnz	short loc_6D12
		les	bx, [bp+var_8]
		add	bx, 2000h
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		jmp	short loc_6D1F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6D12:				; CODE XREF: sub_6989+371j
					; sub_6989+378j
		les	bx, [bp+var_8]
		add	bx, 0E000h
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx

loc_6D1F:				; CODE XREF: sub_6989+387j
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_32]
		push	ax
		push	word_19E84
		call	sub_12BDF
		add	sp, 8
		push	ss
		lea	ax, [bp+var_32]
		push	ax
		call	sub_13692
		add	sp, 4
		mov	[bp+var_14], ax
		mov	[bp+var_16], 0
		mov	[bp+var_18], 0

loc_6D4E:				; CODE XREF: sub_6989+4CFj
		cmp	[bp+var_16], 5
		jl	short loc_6D57
		jmp	loc_6E5B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6D57:				; CODE XREF: sub_6989+3C9j
		mov	ax, 5
		sub	ax, [bp+var_16]
		cmp	ax, [bp+var_14]
		jle	short loc_6D6F
		mov	word ptr [bp+var_C+2], 0A000h
		mov	word ptr [bp+var_C], 0A168h
		jmp	loc_6E28
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6D6F:				; CODE XREF: sub_6989+3D7j
		lea	bx, [bp+var_32]
		add	bx, [bp+var_18]
		mov	al, ss:[bx]
		mov	ah, 0
		sub	ax, 30h	; '0'
		cmp	ax, 9		; switch 10 cases
		jbe	short loc_6D85
		jmp	loc_6E1B	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6D85:				; CODE XREF: sub_6989+3F7j
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_6D8E[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_6D8E	dw offset loc_6DA2	; DATA XREF: sub_6989+400r
		dw offset loc_6DAF	; jump table for switch	statement
		dw offset loc_6DBB
		dw offset loc_6DC7
		dw offset loc_6DD3
		dw offset loc_6DDF
		dw offset loc_6DEB
		dw offset loc_6DF7
		dw offset loc_6E03
		dw offset loc_6E0F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6DA2:				; CODE XREF: sub_6989+400j
					; DATA XREF: sub_6989:off_6D8Eo
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x0
		mov	word ptr [bp+var_C], 0A169h
		jmp	loc_6E25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6DAF:				; CODE XREF: sub_6989+400j
					; DATA XREF: sub_6989:off_6D8Eo
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x1
		mov	word ptr [bp+var_C], 0A16Ah
		jmp	short loc_6E25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6DBB:				; CODE XREF: sub_6989+400j
					; DATA XREF: sub_6989:off_6D8Eo
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x2
		mov	word ptr [bp+var_C], 0A16Bh
		jmp	short loc_6E25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6DC7:				; CODE XREF: sub_6989+400j
					; DATA XREF: sub_6989:off_6D8Eo
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x3
		mov	word ptr [bp+var_C], 0A16Ch
		jmp	short loc_6E25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6DD3:				; CODE XREF: sub_6989+400j
					; DATA XREF: sub_6989:off_6D8Eo
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x4
		mov	word ptr [bp+var_C], 0A16Dh
		jmp	short loc_6E25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6DDF:				; CODE XREF: sub_6989+400j
					; DATA XREF: sub_6989:off_6D8Eo
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x5
		mov	word ptr [bp+var_C], 0A16Eh
		jmp	short loc_6E25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6DEB:				; CODE XREF: sub_6989+400j
					; DATA XREF: sub_6989:off_6D8Eo
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x6
		mov	word ptr [bp+var_C], 0A16Fh
		jmp	short loc_6E25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6DF7:				; CODE XREF: sub_6989+400j
					; DATA XREF: sub_6989:off_6D8Eo
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x7
		mov	word ptr [bp+var_C], 0A170h
		jmp	short loc_6E25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6E03:				; CODE XREF: sub_6989+400j
					; DATA XREF: sub_6989:off_6D8Eo
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x8
		mov	word ptr [bp+var_C], 0A171h
		jmp	short loc_6E25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6E0F:				; CODE XREF: sub_6989+400j
					; DATA XREF: sub_6989:off_6D8Eo
		mov	word ptr [bp+var_C+2], 0A000h ;	case 0x9
		mov	word ptr [bp+var_C], 0A172h
		jmp	short loc_6E25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6E1B:				; CODE XREF: sub_6989+3F9j
		mov	word ptr [bp+var_C+2], 0A000h ;	default
		mov	word ptr [bp+var_C], 0A168h

loc_6E25:				; CODE XREF: sub_6989+423j
					; sub_6989+430j ...
		inc	[bp+var_18]

loc_6E28:				; CODE XREF: sub_6989+3E3j
		xor	si, si
		mov	di, si
		jmp	short loc_6E4A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6E2E:				; CODE XREF: sub_6989+4C4j
		les	bx, [bp+var_C]
		mov	al, es:[bx+si]
		les	bx, [bp+var_8]
		mov	es:[bx+si], al
		les	bx, [bp+var_C]
		mov	al, es:[bx+si]
		les	bx, [bp+var_4]
		mov	es:[bx+si], al
		add	si, 28h	; '('
		inc	di

loc_6E4A:				; CODE XREF: sub_6989+4A3j
		cmp	di, 8
		jl	short loc_6E2E
		inc	word ptr [bp+var_8]
		inc	word ptr [bp+var_4]
		inc	[bp+var_16]
		jmp	loc_6D4E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6E5B:				; CODE XREF: sub_6989+3CBj
		cmp	byte_1A1B8, 0
		jz	short loc_6E65
		jmp	loc_6F53
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6E65:				; CODE XREF: sub_6989+4D7j
		mov	bx, word_197A2
		mov	al, [bx+74Eh]
		mov	ah, 0
		mov	dl, byte_18140
		mov	dh, 0
		add	ax, dx
		mov	[bp+var_E], ax
		mov	bx, 14h
		cwd
		idiv	bx
		mov	[bp+var_10], ax
		mov	ax, [bp+var_E]
		push	ax
		mov	ax, [bp+var_10]
		mov	dx, bx
		mul	dx
		pop	dx
		sub	dx, ax
		mov	[bp+var_12], dx
		mov	ax, dx
		shl	ax, 1
		mov	[bp+var_12], ax
		mov	ax, [bp+var_10]
		mov	cx, 4
		shl	ax, cl
		mov	[bp+var_10], ax
		les	bx, dword_1A1C0
		add	bx, 1B96h
		mov	word ptr [bp+var_8+2], es
		mov	word ptr [bp+var_8], bx
		cmp	word ptr dword_1A1C0+2,	0A000h
		jnz	short loc_6ED2
		cmp	word ptr dword_1A1C0, 0
		jnz	short loc_6ED2
		les	bx, [bp+var_8]
		add	bx, 2000h
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		jmp	short loc_6EDF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6ED2:				; CODE XREF: sub_6989+531j
					; sub_6989+538j
		les	bx, [bp+var_8]
		add	bx, 0E000h
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx

loc_6EDF:				; CODE XREF: sub_6989+547j
		mov	ax, [bp+var_10]
		mov	cx, 5
		shl	ax, cl
		mov	dx, [bp+var_10]
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		add	ax, dx
		add	ax, [bp+var_12]
		mov	bx, 0A000h
		mov	es, bx
		assume es:nothing
		mov	bx, 4000h
		add	bx, ax
		mov	word ptr [bp+var_C+2], es
		mov	word ptr [bp+var_C], bx
		xor	si, si
		mov	di, si
		jmp	short loc_6F4B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6F0B:				; CODE XREF: sub_6989+5C5j
		les	bx, [bp+var_C]
		assume es:nothing
		mov	al, es:[bx+si]
		les	bx, [bp+var_8]
		mov	es:[bx+si], al
		les	bx, [bp+var_C]
		add	bx, si
		mov	al, es:[bx+1]
		les	bx, [bp+var_8]
		add	bx, si
		mov	es:[bx+1], al
		les	bx, [bp+var_C]
		mov	al, es:[bx+si]
		les	bx, [bp+var_4]
		mov	es:[bx+si], al
		les	bx, [bp+var_C]
		add	bx, si
		mov	al, es:[bx+1]
		les	bx, [bp+var_4]
		add	bx, si
		mov	es:[bx+1], al
		add	si, 28h	; '('
		inc	di

loc_6F4B:				; CODE XREF: sub_6989+580j
		cmp	di, 10h
		jl	short loc_6F0B
		jmp	loc_7075
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6F53:				; CODE XREF: sub_6989+4D9j
		les	bx, dword_1A1C0
		add	bx, 1BBEh
		mov	word ptr [bp+var_8+2], es
		mov	word ptr [bp+var_8], bx
		cmp	word ptr dword_1A1C0+2,	0A000h
		jnz	short loc_6F7F
		cmp	word ptr dword_1A1C0, 0
		jnz	short loc_6F7F
		les	bx, [bp+var_8]
		add	bx, 2000h
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		jmp	short loc_6F8C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6F7F:				; CODE XREF: sub_6989+5DEj
					; sub_6989+5E5j
		les	bx, [bp+var_8]
		add	bx, 0E000h
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx

loc_6F8C:				; CODE XREF: sub_6989+5F4j
		mov	word ptr [bp+var_C+2], 0A000h
		mov	word ptr [bp+var_C], 0A2A8h
		xor	si, si
		mov	di, si
		jmp	loc_706D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_6F9D:				; CODE XREF: sub_6989+6E9j
		les	bx, [bp+var_C]
		mov	al, es:[bx+si]
		les	bx, [bp+var_8]
		mov	es:[bx+si], al
		les	bx, [bp+var_C]
		add	bx, si
		mov	al, es:[bx+1]
		les	bx, [bp+var_8]
		add	bx, si
		mov	es:[bx+1], al
		les	bx, [bp+var_C]
		add	bx, si
		mov	al, es:[bx+2]
		les	bx, [bp+var_8]
		add	bx, si
		mov	es:[bx+2], al
		les	bx, [bp+var_C]
		add	bx, si
		mov	al, es:[bx+3]
		les	bx, [bp+var_8]
		add	bx, si
		mov	es:[bx+3], al
		les	bx, [bp+var_C]
		add	bx, si
		mov	al, es:[bx+4]
		les	bx, [bp+var_8]
		add	bx, si
		mov	es:[bx+4], al
		les	bx, [bp+var_C]
		add	bx, si
		mov	al, es:[bx+5]
		les	bx, [bp+var_8]
		add	bx, si
		mov	es:[bx+5], al
		les	bx, [bp+var_C]
		mov	al, es:[bx+si]
		les	bx, [bp+var_4]
		mov	es:[bx+si], al
		les	bx, [bp+var_C]
		add	bx, si
		mov	al, es:[bx+1]
		les	bx, [bp+var_4]
		add	bx, si
		mov	es:[bx+1], al
		les	bx, [bp+var_C]
		add	bx, si
		mov	al, es:[bx+2]
		les	bx, [bp+var_4]
		add	bx, si
		mov	es:[bx+2], al
		les	bx, [bp+var_C]
		add	bx, si
		mov	al, es:[bx+3]
		les	bx, [bp+var_4]
		add	bx, si
		mov	es:[bx+3], al
		les	bx, [bp+var_C]
		add	bx, si
		mov	al, es:[bx+4]
		les	bx, [bp+var_4]
		add	bx, si
		mov	es:[bx+4], al
		les	bx, [bp+var_C]
		add	bx, si
		mov	al, es:[bx+5]
		les	bx, [bp+var_4]
		add	bx, si
		mov	es:[bx+5], al
		add	si, 28h	; '('
		inc	di

loc_706D:				; CODE XREF: sub_6989+611j
		cmp	di, 0Fh
		jge	short loc_7075
		jmp	loc_6F9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7075:				; CODE XREF: sub_6989+5C7j
					; sub_6989+6E7j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_6989	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_707B	proc far		; CODE XREF: sub_72AE+24p

var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_708E
		call	far ptr	errStackOverflow

loc_708E:				; CODE XREF: sub_707B+Cj
		mov	[bp+var_2], 0
		mov	[bp+var_4], 7Bh	; '{'
		xor	si, si
		mov	di, si
		jmp	short loc_70DD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_709E:				; CODE XREF: sub_707B+71j
		inc	di
		mov	ax, di
		cmp	ax, 3
		jnz	short loc_70C4
		mov	al, [si+85h]
		mov	ah, 0
		cwd
		push	dx
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_2B5
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		xor	di, di
		jmp	short loc_70DC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_70C4:				; CODE XREF: sub_707B+29j
		mov	al, [si+85h]
		mov	ah, 0
		cwd
		mov	cx, [bp+var_2]
		mov	bx, [bp+var_4]
		call	sub_372
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax

loc_70DC:				; CODE XREF: sub_707B+47j
		inc	si

loc_70DD:				; CODE XREF: sub_707B+21j
		push	ds
		mov	ax, 85h	; ''
		push	ax
		call	sub_13692
		add	sp, 4
		cmp	ax, si
		jg	short loc_709E
		mov	ax, 1
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_707B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_70F7	proc far		; CODE XREF: sub_72AE+277p

var_18		= dword	ptr -18h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 18h
		cmp	word_17D9E, sp
		ja	short loc_710A
		call	far ptr	errStackOverflow

loc_710A:				; CODE XREF: sub_70F7+Cj
		mov	[bp+var_6], 3
		mov	[bp+var_8], 0F99Eh
		mov	[bp+var_2], 0Ah
		mov	[bp+var_4], 6662h
		cmp	byte_14244, 0
		jz	short loc_7128
		jmp	loc_72A5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7128:				; CODE XREF: sub_70F7+2Cj
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 1313h
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	di, ax
		mov	ax, 2
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	di
		call	sub_12B32
		add	sp, 8
		mov	[bp+var_12], dx
		mov	[bp+var_14], ax
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word ptr [bp+var_18+2],	dx
		mov	word ptr [bp+var_18], ax
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		push	di
		call	sub_12B32
		add	sp, 8
		push	[bp+var_14]
		push	word ptr [bp+var_18+2]
		push	word ptr [bp+var_18]
		push	di
		call	sub_12FF7
		add	sp, 8
		xor	si, si
		mov	[bp+var_E], si
		mov	[bp+var_10], 1
		jmp	short loc_71C3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_718E:				; CODE XREF: sub_70F7+D2j sub_70F7+D9j
		les	bx, [bp+var_18]
		mov	al, es:[bx+si]
		mov	ah, 0
		inc	ax
		cwd
		mov	cx, [bp+var_E]
		mov	bx, [bp+var_10]
		call	sub_372
		mov	[bp+var_E], dx
		mov	[bp+var_10], ax
		mov	dx, 10h
		mov	ax, 0F447h
		push	dx
		push	ax
		push	[bp+var_E]
		push	[bp+var_10]
		call	sub_2B1
		mov	[bp+var_E], dx
		mov	[bp+var_10], ax
		inc	si

loc_71C3:				; CODE XREF: sub_70F7+95j
		mov	ax, si
		cwd
		cmp	dx, [bp+var_12]
		jl	short loc_718E
		jnz	short loc_71D2
		cmp	ax, [bp+var_14]
		jb	short loc_718E

loc_71D2:				; CODE XREF: sub_70F7+D4j
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 1320h
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	di, ax
		mov	ax, 2
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	di
		call	sub_12B32
		add	sp, 8
		mov	[bp+var_12], dx
		mov	[bp+var_14], ax
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word ptr [bp+var_18+2],	dx
		mov	word ptr [bp+var_18], ax
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		push	di
		call	sub_12B32
		add	sp, 8
		push	[bp+var_14]
		push	word ptr [bp+var_18+2]
		push	word ptr [bp+var_18]
		push	di
		call	sub_12FF7
		add	sp, 8
		xor	si, si
		mov	[bp+var_A], si
		mov	[bp+var_C], 1
		jmp	short loc_726D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7238:				; CODE XREF: sub_70F7+17Cj
					; sub_70F7+183j
		les	bx, [bp+var_18]
		mov	al, es:[bx+si]
		mov	ah, 0
		inc	ax
		cwd
		mov	cx, [bp+var_A]
		mov	bx, [bp+var_C]
		call	sub_372
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		mov	dx, 10h
		mov	ax, 0F447h
		push	dx
		push	ax
		push	[bp+var_A]
		push	[bp+var_C]
		call	sub_2B1
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		inc	si

loc_726D:				; CODE XREF: sub_70F7+13Fj
		mov	ax, si
		cwd
		cmp	dx, [bp+var_12]
		jl	short loc_7238
		jnz	short loc_727C
		cmp	ax, [bp+var_14]
		jb	short loc_7238

loc_727C:				; CODE XREF: sub_70F7+17Ej
		mov	dx, [bp+var_E]
		mov	ax, [bp+var_10]
		cmp	dx, [bp+var_6]
		jnz	short loc_728C
		cmp	ax, [bp+var_8]
		jz	short loc_7290

loc_728C:				; CODE XREF: sub_70F7+18Ej
		xor	ax, ax
		jmp	short loc_72A8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7290:				; CODE XREF: sub_70F7+193j
		mov	dx, [bp+var_A]
		mov	ax, [bp+var_C]
		cmp	dx, [bp+var_2]
		jnz	short loc_72A0
		cmp	ax, [bp+var_4]
		jz	short loc_72A5

loc_72A0:				; CODE XREF: sub_70F7+1A2j
		mov	ax, 1
		jmp	short loc_72A8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_72A5:				; CODE XREF: sub_70F7+2Ej
					; sub_70F7+1A7j
		mov	ax, 2

loc_72A8:				; CODE XREF: sub_70F7+197j
					; sub_70F7+1ACj
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_70F7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_72AE	proc far		; CODE XREF: sub_3DEF+26P

var_28		= word ptr -28h
var_26		= word ptr -26h
var_23		= byte ptr -23h
var_22		= byte ptr -22h
var_21		= byte ptr -21h
var_20		= word ptr -20h
var_10		= word ptr -10h

		push	si
		push	bp
		mov	bp, sp
		sub	sp, 28h
		cmp	word_17D9E, sp
		ja	short loc_72C0
		call	far ptr	errStackOverflow

loc_72C0:				; CODE XREF: sub_72AE+Bj
		mov	[bp+var_23], 0
		mov	[bp+var_22], 0
		mov	[bp+var_21], 0
		call	sub_42F2
		push	cs
		call	near ptr sub_707B
		or	ax, ax
		jnz	short loc_72FC
		mov	ax, 4
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 132Ah
		push	ax
		call	sub_11FCC
		add	sp, 4
		mov	ax, 3
		push	ax
		call	sub_122E6
		inc	sp
		inc	sp

loc_72FC:				; CODE XREF: sub_72AE+29j
		call	sub_1246C
		mov	[bp+var_26], dx
		mov	[bp+var_28], ax
		cmp	dx, 4
		jg	short loc_735F
		jl	short loc_7313
		cmp	ax, 0B000h
		jnb	short loc_735F

loc_7313:				; CODE XREF: sub_72AE+5Ej
		mov	ax, 2
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 1367h
		push	ax
		call	sub_11FCC
		add	sp, 4
		mov	ax, 4
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		xor	dx, dx
		mov	ax, 400h
		push	dx
		push	ax
		push	[bp+var_26]
		push	[bp+var_28]
		call	sub_2B9
		push	dx
		push	ax
		push	ds
		mov	ax, 1394h
		push	ax
		call	sub_11FCC
		add	sp, 8
		mov	al, 1
		mov	[bp+var_22], al
		mov	[bp+var_23], al

loc_735F:				; CODE XREF: sub_72AE+5Cj sub_72AE+63j
		mov	si, 1
		jmp	loc_741C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7365:				; CODE XREF: sub_72AE+173j
		push	ds
		mov	ax, 13CFh
		push	ax
		push	ss
		lea	ax, [bp+var_20]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_10]
		push	ax
		push	si
		call	sub_12BDF
		add	sp, 8
		push	dx
		push	ax
		push	ss
		lea	ax, [bp+var_20]
		push	ax
		call	sub_13602
		add	sp, 8
		push	ds
		mov	ax, 13D7h
		push	ax
		push	ss
		lea	ax, [bp+var_20]
		push	ax
		call	sub_13602
		add	sp, 8
		mov	ax, 4
		push	ax
		push	ss
		lea	ax, [bp+var_20]
		push	ax
		call	sub_11D34
		add	sp, 6
		or	ax, ax
		jge	short loc_741B
		mov	ax, 2
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		cmp	[bp+var_23], 0
		jnz	short loc_73DD
		push	ds
		mov	ax, 1367h
		push	ax
		call	sub_11FCC
		add	sp, 4

loc_73DD:				; CODE XREF: sub_72AE+120j
		cmp	[bp+var_22], 0
		jz	short loc_73F6
		cmp	[bp+var_21], 0
		jnz	short loc_73F6
		push	ds
		mov	ax, 1365h
		push	ax
		call	sub_11FCC
		add	sp, 4

loc_73F6:				; CODE XREF: sub_72AE+133j
					; sub_72AE+139j
		mov	ax, 4
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ss
		lea	ax, [bp+var_20]
		push	ax
		push	ds
		mov	ax, 13DCh
		push	ax
		call	sub_11FCC
		add	sp, 8
		mov	al, 1
		mov	[bp+var_21], al
		mov	[bp+var_23], al

loc_741B:				; CODE XREF: sub_72AE+10Fj
		inc	si

loc_741C:				; CODE XREF: sub_72AE+B4j
		cmp	si, 6
		jg	short loc_7424
		jmp	loc_7365
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7424:				; CODE XREF: sub_72AE+171j
		cmp	byte_14244, 0
		jz	short loc_742E
		jmp	loc_74A1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_742E:				; CODE XREF: sub_72AE+17Bj
		push	ds
		mov	ax, 1313h
		push	ax
		push	ss
		lea	ax, [bp+var_20]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	ax, 4
		push	ax
		push	ss
		lea	ax, [bp+var_20]
		push	ax
		call	sub_11D34
		add	sp, 6
		or	ax, ax
		jge	short loc_74A1
		cmp	[bp+var_23], 0
		jnz	short loc_7468
		push	ds
		mov	ax, 1367h
		push	ax
		call	sub_11FCC
		add	sp, 4

loc_7468:				; CODE XREF: sub_72AE+1ABj
		cmp	[bp+var_22], 0
		jz	short loc_7481
		cmp	[bp+var_21], 0
		jnz	short loc_7481
		push	ds
		mov	ax, 1365h
		push	ax
		call	sub_11FCC
		add	sp, 4

loc_7481:				; CODE XREF: sub_72AE+1BEj
					; sub_72AE+1C4j
		mov	ax, 4
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 13EEh
		push	ax
		call	sub_11FCC
		add	sp, 4
		mov	al, 1
		mov	[bp+var_21], al
		mov	[bp+var_23], al

loc_74A1:				; CODE XREF: sub_72AE+17Dj
					; sub_72AE+1A5j
		cmp	byte_14244, 0
		jz	short loc_74AB
		jmp	loc_751E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_74AB:				; CODE XREF: sub_72AE+1F8j
		push	ds
		mov	ax, 1320h
		push	ax
		push	ss
		lea	ax, [bp+var_20]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	ax, 4
		push	ax
		push	ss
		lea	ax, [bp+var_20]
		push	ax
		call	sub_11D34
		add	sp, 6
		or	ax, ax
		jge	short loc_751E
		cmp	[bp+var_23], 0
		jnz	short loc_74E5
		push	ds
		mov	ax, 1367h
		push	ax
		call	sub_11FCC
		add	sp, 4

loc_74E5:				; CODE XREF: sub_72AE+228j
		cmp	[bp+var_22], 0
		jz	short loc_74FE
		cmp	[bp+var_21], 0
		jnz	short loc_74FE
		push	ds
		mov	ax, 1365h
		push	ax
		call	sub_11FCC
		add	sp, 4

loc_74FE:				; CODE XREF: sub_72AE+23Bj
					; sub_72AE+241j
		mov	ax, 4
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 140Ah
		push	ax
		call	sub_11FCC
		add	sp, 4
		mov	al, 1
		mov	[bp+var_21], al
		mov	[bp+var_23], al

loc_751E:				; CODE XREF: sub_72AE+1FAj
					; sub_72AE+222j
		cmp	[bp+var_23], 0
		jnz	short loc_7579
		push	cs
		call	near ptr sub_70F7
		mov	si, ax
		or	si, si
		jnz	short loc_7551
		mov	ax, 4
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 1423h
		push	ax
		call	sub_11FCC
		add	sp, 4
		mov	ax, 3
		push	ax
		call	sub_122E6
		inc	sp
		inc	sp

loc_7551:				; CODE XREF: sub_72AE+27Ej
		cmp	si, 1
		jnz	short loc_7579
		mov	ax, 2
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 1461h
		push	ax
		call	sub_11FCC
		add	sp, 4
		mov	ax, 3
		push	ax
		call	sub_122E6
		inc	sp
		inc	sp

loc_7579:				; CODE XREF: sub_72AE+274j
					; sub_72AE+2A6j
		cmp	[bp+var_22], 0
		jz	short loc_75A4
		mov	ax, 2
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 149Ch
		push	ax
		call	sub_11FCC
		add	sp, 4
		push	ds
		mov	ax, 14DBh
		push	ax
		call	sub_11FCC
		add	sp, 4

loc_75A4:				; CODE XREF: sub_72AE+2CFj
		cmp	[bp+var_21], 0
		jz	short loc_75C2
		mov	ax, 2
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 151Fh
		push	ax
		call	sub_11FCC
		add	sp, 4

loc_75C2:				; CODE XREF: sub_72AE+2FAj
		cmp	[bp+var_23], 0
		jz	short loc_75D3
		mov	ax, 3
		push	ax
		call	sub_122E6
		inc	sp
		inc	sp

loc_75D3:				; CODE XREF: sub_72AE+318j
		mov	sp, bp
		pop	bp
		pop	si
		retf
sub_72AE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_75D8	proc far		; CODE XREF: sub_DE8+15BEP
		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_75E8
		call	far ptr	errStackOverflow

loc_75E8:				; CODE XREF: sub_75D8+9j
		push	ds
		mov	ax, 150h
		push	ax
		call	sub_13A4B
		add	sp, 4
		mov	ax, 180h
		push	ax
		mov	ax, 8100h
		push	ax
		push	ds
		mov	ax, 150h
		push	ax
		call	sub_12E18
		add	sp, 8
		mov	di, ax
		xor	si, si

loc_760E:				; CODE XREF: sub_75D8+58j
		cmp	si, word_1A622
		jnb	short loc_7632
		mov	ax, word_1A622
		sub	ax, si
		push	ax
		mov	dx, word ptr dword_1A1BC+2
		mov	ax, word ptr dword_1A1BC
		add	ax, si
		push	dx
		push	ax
		push	di
		call	sub_14020
		add	sp, 8
		add	si, ax
		jmp	short loc_760E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7632:				; CODE XREF: sub_75D8+3Aj
		push	di
		call	sub_11DD6
		inc	sp
		inc	sp
		pop	bp
		pop	di
		pop	si
		retf
sub_75D8	endp ; sp = -2


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_763E	proc far		; CODE XREF: sub_3DEF+4B3P

arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_764E
		call	far ptr	errStackOverflow

loc_764E:				; CODE XREF: sub_763E+9j
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 1552h
		push	ax
		call	sub_12E18
		mov	sp, bp
		mov	di, ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		push	ds
		mov	ax, 553Ah
		push	ax
		push	di
		call	sub_12FF7
		mov	sp, bp
		xor	ax, ax
		push	ax
		mov	bx, [bp+arg_0]
		add	bx, 0Dh
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+553Ch]
		push	word ptr [bx+553Ah]
		push	di
		call	sub_12B32
		mov	sp, bp
		xor	si, si
		mov	bx, [bp+arg_0]
		add	bx, 0Dh
		shl	bx, 1
		mov	ax, [bx+55AAh]
		mov	word_1A622, ax

loc_769F:				; CODE XREF: sub_763E+82j
		cmp	si, word_1A622
		jnb	short loc_76C2
		mov	ax, word_1A622
		sub	ax, si
		push	ax
		mov	dx, word ptr dword_1A1BC+2
		mov	ax, word ptr dword_1A1BC
		add	ax, si
		push	dx
		push	ax
		push	di
		call	sub_12FF7
		mov	sp, bp
		add	si, ax
		jmp	short loc_769F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_76C2:				; CODE XREF: sub_763E+65j
		push	di
		call	sub_11DD6
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_763E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

couldBeLoadCastle proc far		; CODE XREF: sub_3DEF+EBP
					; sub_3DEF+3F8P ...

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 0Ch
		cmp	word_17D9E, sp
		ja	short loc_76E1
		call	far ptr	errStackOverflow

loc_76E1:				; CODE XREF: couldBeLoadCastle+Cj
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 155Fh
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	di, ax
		or	di, di
		jge	short loc_7704
		push	ds
		mov	ax, 156Ch
		push	ax
		push	cs
		call	near ptr sub_6927
		add	sp, 4

loc_7704:				; CODE XREF: couldBeLoadCastle+28j
		mov	ax, 0D0h ; 'а'
		push	ax
		push	ds
		mov	ax, 449Eh
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		xor	ax, ax
		push	ax
		mov	bx, word_197A2
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+44A0h]
		push	word ptr [bx+449Eh]
		push	di
		call	sub_12B32
		add	sp, 8
		mov	ax, 14h
		push	ax
		push	ds
		mov	ax, 63E6h
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		xor	si, si
		jmp	short loc_7764
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7748:				; CODE XREF: couldBeLoadCastle+9Aj
		mov	ax, 0Eh
		push	ax
		mov	ax, si
		mov	dx, 0Eh
		mul	dx
		add	ax, 5632h
		mov	dx, ds
		push	dx
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		inc	si

loc_7764:				; CODE XREF: couldBeLoadCastle+78j
		cmp	si, word_1A5B2
		jl	short loc_7748
		xor	si, si
		jmp	short loc_7789
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_776E:				; CODE XREF: couldBeLoadCastle+BFj
		mov	ax, 4
		push	ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	ax, 614Ch
		mov	dx, ds
		push	dx
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		inc	si

loc_7789:				; CODE XREF: couldBeLoadCastle+9Ej
		cmp	si, word_1A5B4
		jl	short loc_776E
		xor	si, si
		jmp	short loc_77AE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7793:				; CODE XREF: couldBeLoadCastle+E4j
		mov	ax, 4
		push	ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	ax, 3E8Ah
		mov	dx, ds
		push	dx
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		inc	si

loc_77AE:				; CODE XREF: couldBeLoadCastle+C3j
		cmp	si, word_1A5B6
		jl	short loc_7793
		xor	si, si
		jmp	loc_78BF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_77B9:				; CODE XREF: couldBeLoadCastle+1F6j
		mov	[bp+var_C], 0

loc_77BE:				; CODE XREF: couldBeLoadCastle+140j
		mov	ax, word_197A2
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		mov	ax, [bx+44DEh]
		cmp	ax, [bp+var_C]
		jbe	short loc_7810
		mov	ax, word_197A2
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		mov	ax, [bx+44DEh]
		sub	ax, [bp+var_C]
		push	ax
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		mov	dx, [bx+41D6h]
		mov	ax, [bx+41D4h]
		add	ax, [bp+var_C]
		push	dx
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		add	[bp+var_C], ax
		jmp	short loc_77BE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7810:				; CODE XREF: couldBeLoadCastle+107j
		xor	dx, dx
		mov	ax, 0AFCAh
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jnz	short loc_7835
		push	ds
		mov	ax, 1589h
		push	ax
		push	cs
		call	near ptr sub_6927
		add	sp, 4

loc_7835:				; CODE XREF: couldBeLoadCastle+159j
		mov	ax, word_197A2
		mov	dx, 3
		mul	dx
		mov	bx, ax
		add	bx, si
		cmp	byte ptr [bx+453Eh], 0
		jz	short loc_78B0
		mov	ax, 0AFCAh
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		mov	ax, word_197A2
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+44DEh]
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+41D6h]
		push	word ptr [bx+41D4h]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_A], ax
		cmp	ax, 0AFC8h
		jz	short loc_7890
		push	ds
		mov	ax, 15ABh
		push	ax
		push	cs
		call	near ptr sub_6927
		add	sp, 4

loc_7890:				; CODE XREF: couldBeLoadCastle+1B4j
		mov	ax, 0AFC8h
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+41D6h]
		push	word ptr [bx+41D4h]
		call	copyCastleStuff
		add	sp, 0Ah

loc_78B0:				; CODE XREF: couldBeLoadCastle+178j
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_12481
		add	sp, 4
		inc	si

loc_78BF:				; CODE XREF: couldBeLoadCastle+E8j
		cmp	si, 2
		jg	short loc_78C7
		jmp	loc_77B9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_78C7:				; CODE XREF: couldBeLoadCastle+1F4j
		push	di
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 15C0h
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	di, ax
		mov	ax, 14h
		push	ax
		push	ds
		mov	ax, 55EEh
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		xor	ax, ax
		push	ax
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+55F0h]
		push	word ptr [bx+55EEh]
		push	di
		call	sub_12B32
		add	sp, 8
		mov	ax, 0Eh
		push	ax
		push	ds
		mov	ax, 663Ah
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 200h
		push	ax
		push	ds
		mov	ax, 4284h
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 200h
		push	ax
		push	ds
		mov	ax, 3C7Bh
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		xor	si, si
		jmp	loc_7A6B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_794E:				; CODE XREF: couldBeLoadCastle+3A2j
		xor	dx, dx
		mov	ax, 7D00h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		or	ax, dx
		jnz	short loc_7973
		push	ds
		mov	ax, 15CDh
		push	ax
		push	cs
		call	near ptr sub_6927
		add	sp, 4

loc_7973:				; CODE XREF: couldBeLoadCastle+297j
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jnz	short loc_7998
		push	ds
		mov	ax, 1589h
		push	ax
		push	cs
		call	near ptr sub_6927
		add	sp, 4

loc_7998:				; CODE XREF: couldBeLoadCastle+2BCj
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+55F6h]
		push	[bp+var_6]
		push	[bp+var_8]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		add	bx, si
		cmp	byte ptr [bx+55FEh], 0
		jz	short loc_7A27
		mov	ax, 7D01h
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+55F6h]
		push	[bp+var_6]
		push	[bp+var_8]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_A], ax
		cmp	ax, 7D00h
		jz	short loc_7A0F
		push	ds
		mov	ax, 15ABh
		push	ax
		push	cs
		call	near ptr sub_6927
		add	sp, 4

loc_7A0F:				; CODE XREF: couldBeLoadCastle+333j
		mov	ax, 7D00h
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		push	[bp+var_6]
		push	[bp+var_8]
		call	copyCastleStuff
		add	sp, 0Ah

loc_7A27:				; CODE XREF: couldBeLoadCastle+2FEj
		mov	ax, si
		add	ax, 2
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		push	[bp+var_6]
		push	[bp+var_8]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_12481
		add	sp, 4
		push	[bp+var_6]
		push	[bp+var_8]
		call	sub_12481
		add	sp, 4
		inc	si

loc_7A6B:				; CODE XREF: couldBeLoadCastle+27Dj
		cmp	si, 2
		jge	short loc_7A73
		jmp	loc_794E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7A73:				; CODE XREF: couldBeLoadCastle+3A0j
		push	di
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 15EEh
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	di, ax
		or	di, di
		jge	short loc_7A9E
		push	ds
		mov	ax, 15FBh
		push	ax
		push	cs
		call	near ptr sub_6927
		add	sp, 4

loc_7A9E:				; CODE XREF: couldBeLoadCastle+3C2j
		mov	ax, 16h
		push	ax
		push	ds
		mov	ax, 6434h
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		xor	ax, ax
		push	ax
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	bx, ax
		inc	bx
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+6436h]
		push	word ptr [bx+6434h]
		push	di
		call	sub_12B32
		add	sp, 8
		xor	dx, dx
		mov	ax, 7D00h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		or	ax, dx
		jnz	short loc_7AF5
		push	ds
		mov	ax, 15CDh
		push	ax
		push	cs
		call	near ptr sub_6927
		add	sp, 4

loc_7AF5:				; CODE XREF: couldBeLoadCastle+419j
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jnz	short loc_7B1A
		push	ds
		mov	ax, 1589h
		push	ax
		push	cs
		call	near ptr sub_6927
		add	sp, 4

loc_7B1A:				; CODE XREF: couldBeLoadCastle+43Ej
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	bx, ax
		inc	bx
		shl	bx, 1
		push	word ptr [bx+6440h]
		push	[bp+var_6]
		push	[bp+var_8]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	bx, ax
		cmp	byte ptr [bx+6447h], 0
		jz	short loc_7B97
		mov	ax, 7D01h
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	bx, ax
		inc	bx
		shl	bx, 1
		push	word ptr [bx+6440h]
		push	[bp+var_6]
		push	[bp+var_8]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_A], ax
		cmp	ax, 7D00h
		jz	short loc_7B7F
		push	ds
		mov	ax, 15ABh
		push	ax
		push	cs
		call	near ptr sub_6927
		add	sp, 4

loc_7B7F:				; CODE XREF: couldBeLoadCastle+4A3j
		mov	ax, 7D00h
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		push	[bp+var_6]
		push	[bp+var_8]
		call	copyCastleStuff
		add	sp, 0Ah

loc_7B97:				; CODE XREF: couldBeLoadCastle+475j
		mov	ax, 4
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		push	[bp+var_6]
		push	[bp+var_8]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_12481
		add	sp, 4
		push	[bp+var_6]
		push	[bp+var_8]
		call	sub_12481
		add	sp, 4
		push	di
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	ax, 5
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		mov	ax, 0Fh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 0Ah
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		mov	ax, 58h	; 'X'
		push	ax
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1618h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Ah
		push	ax
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 10h
		push	ax
		mov	ax, 58h	; 'X'
		push	ax
		mov	ax, 9
		push	ax
		xor	ax, ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1618h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 9
		push	ax
		xor	ax, ax
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	word_197DC
		push	word_197DA
		mov	ax, 10h
		push	ax
		mov	ax, 6
		push	ax
		mov	ax, 11h
		push	ax
		xor	ax, ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	byte_1A51C, 0
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
couldBeLoadCastle endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_7CBF	proc far		; CODE XREF: sub_3DEF+88P
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_7CCD
		call	far ptr	errStackOverflow

loc_7CCD:				; CODE XREF: sub_7CBF+7j
		xor	dx, dx
		mov	ax, 2D0h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word ptr dword_197DE+2,	dx
		mov	word ptr dword_197DE, ax
		or	dx, ax
		jz	short loc_7D4F
		xor	dx, dx
		mov	ax, 0AFCAh
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word ptr dword_18394+2,	dx
		mov	word ptr dword_18394, ax
		or	dx, ax
		jz	short loc_7D4F
		xor	dx, dx
		mov	ax, 0AFCAh
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word ptr dword_18398+2,	dx
		mov	word ptr dword_18398, ax
		or	dx, ax
		jz	short loc_7D4F
		xor	dx, dx
		mov	ax, 0AFCAh
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word ptr dword_1839C+2,	dx
		mov	word ptr dword_1839C, ax
		or	dx, ax
		jz	short loc_7D4F
		xor	dx, dx
		mov	ax, 7D02h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word ptr dword_1A1BC+2,	dx
		mov	word ptr dword_1A1BC, ax
		or	dx, ax
		jnz	short loc_7D5B

loc_7D4F:				; CODE XREF: sub_7CBF+26j sub_7CBF+40j ...
		push	ds
		mov	ax, 1624h
		push	ax
		push	cs
		call	near ptr sub_6927
		add	sp, 4

loc_7D5B:				; CODE XREF: sub_7CBF+8Ej
		pop	bp
		retf
sub_7CBF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_7D5D	proc far		; CODE XREF: sub_DE8:loc_E9CP
					; sub_7F60+322p ...

var_2		= byte ptr -2
var_1		= byte ptr -1

		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		cmp	word_17D9E, sp
		ja	short loc_7D6D
		call	far ptr	errStackOverflow

loc_7D6D:				; CODE XREF: sub_7D5D+9j
		mov	word_18234, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7D79:				; CODE XREF: sub_7D5D+29j
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 1
		jz	short loc_7D88
		inc	word_18234
		jmp	short loc_7D79
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7D88:				; CODE XREF: sub_7D5D+23j
		mov	word_18234, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7D94:				; CODE XREF: sub_7D5D+44j
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 1
		jz	short loc_7DA3
		inc	word_18234
		jmp	short loc_7D94
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7DA3:				; CODE XREF: sub_7D5D+3Ej
		mov	word_18234, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7DAF:				; CODE XREF: sub_7D5D+5Fj
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 1
		jz	short loc_7DBE
		inc	word_18234
		jmp	short loc_7DAF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7DBE:				; CODE XREF: sub_7D5D+59j
		mov	word_18234, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7DCA:				; CODE XREF: sub_7D5D+7Aj
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 1
		jz	short loc_7DD9
		inc	word_18234
		jmp	short loc_7DCA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7DD9:				; CODE XREF: sub_7D5D+74j
		mov	word_18234, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7DE5:				; CODE XREF: sub_7D5D+95j
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 1
		jz	short loc_7DF4
		inc	word_18234
		jmp	short loc_7DE5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7DF4:				; CODE XREF: sub_7D5D+8Fj
		mov	word_18234, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7E00:				; CODE XREF: sub_7D5D+B0j
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 1
		jz	short loc_7E0F
		inc	word_18234
		jmp	short loc_7E00
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7E0F:				; CODE XREF: sub_7D5D+AAj
		mov	word_18234, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7E1B:				; CODE XREF: sub_7D5D+CBj
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 1
		jz	short loc_7E2A
		inc	word_18234
		jmp	short loc_7E1B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7E2A:				; CODE XREF: sub_7D5D+C5j
		mov	word_18234, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7E36:				; CODE XREF: sub_7D5D+E6j
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 1
		jz	short loc_7E45
		inc	word_18234
		jmp	short loc_7E36
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7E45:				; CODE XREF: sub_7D5D+E0j
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		mov	[bp+var_1], al
		mov	al, [bp+var_1]
		and	al, 10h
		mov	byte_17E3A, al
		mov	al, [bp+var_1]
		and	al, 20h
		mov	byte_1A104, al
		cmp	byte_17E3A, 0
		jz	short loc_7E6C
		mov	byte_17E3A, 0
		jmp	short loc_7E71
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7E6C:				; CODE XREF: sub_7D5D+106j
		mov	byte_17E3A, 1

loc_7E71:				; CODE XREF: sub_7D5D+10Dj
		cmp	byte_1A104, 0
		jz	short loc_7E7F
		mov	byte_1A104, 0
		jmp	short loc_7E84
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7E7F:				; CODE XREF: sub_7D5D+119j
		mov	byte_1A104, 1

loc_7E84:				; CODE XREF: sub_7D5D+120j
		mov	word_197E2, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7E90:				; CODE XREF: sub_7D5D+140j
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 2
		jz	short loc_7E9F
		inc	word_197E2
		jmp	short loc_7E90
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7E9F:				; CODE XREF: sub_7D5D+13Aj
		mov	word_197E2, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7EAB:				; CODE XREF: sub_7D5D+15Bj
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 2
		jz	short loc_7EBA
		inc	word_197E2
		jmp	short loc_7EAB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7EBA:				; CODE XREF: sub_7D5D+155j
		mov	word_197E2, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7EC6:				; CODE XREF: sub_7D5D+176j
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 2
		jz	short loc_7ED5
		inc	word_197E2
		jmp	short loc_7EC6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7ED5:				; CODE XREF: sub_7D5D+170j
		mov	word_197E2, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7EE1:				; CODE XREF: sub_7D5D+191j
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 2
		jz	short loc_7EF0
		inc	word_197E2
		jmp	short loc_7EE1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7EF0:				; CODE XREF: sub_7D5D+18Bj
		mov	word_197E2, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7EFC:				; CODE XREF: sub_7D5D+1ACj
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 2
		jz	short loc_7F0B
		inc	word_197E2
		jmp	short loc_7EFC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7F0B:				; CODE XREF: sub_7D5D+1A6j
		mov	word_197E2, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7F17:				; CODE XREF: sub_7D5D+1C7j
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 2
		jz	short loc_7F26
		inc	word_197E2
		jmp	short loc_7F17
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7F26:				; CODE XREF: sub_7D5D+1C1j
		mov	word_197E2, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7F32:				; CODE XREF: sub_7D5D+1E2j
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 2
		jz	short loc_7F41
		inc	word_197E2
		jmp	short loc_7F32
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7F41:				; CODE XREF: sub_7D5D+1DCj
		mov	word_197E2, 0
		mov	al, 0
		mov	dx, 201h
		out	dx, al		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)

loc_7F4D:				; CODE XREF: sub_7D5D+1FDj
		mov	dx, 201h
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 2
		jz	short loc_7F5C
		inc	word_197E2
		jmp	short loc_7F4D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7F5C:				; CODE XREF: sub_7D5D+1F7j
		mov	sp, bp
		pop	bp
		retf
sub_7D5D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_7F60	proc far		; CODE XREF: sub_DE8+F03P
					; sub_3DEF+234P ...

var_3		= byte ptr -3
var_2		= word ptr -2
arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_7F73
		call	far ptr	errStackOverflow

loc_7F73:				; CODE XREF: sub_7F60+Cj
		mov	si, [bp+arg_0]
		call	sub_B9E2
		xor	ax, ax
		push	ax
		call	sub_4325
		inc	sp
		inc	sp
		xor	di, di
		jmp	loc_85B5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7F8A:				; CODE XREF: sub_7F60+65Aj
		push	di
		call	sub_439E
		inc	sp
		inc	sp
		or	di, di
		jnz	short loc_7F9B
		mov	ax, 1
		jmp	short loc_7F9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7F9B:				; CODE XREF: sub_7F60+34j
		xor	ax, ax

loc_7F9D:				; CODE XREF: sub_7F60+39j
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		cmp	si, 4
		jz	short loc_7FAD
		jmp	loc_806B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_7FAD:				; CODE XREF: sub_7F60+48j
		mov	ax, 1
		push	ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1649h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B4h ; 'Д'
		push	ax
		mov	ax, 55h	; 'U'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1649h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B4h ; 'Д'
		push	ax
		mov	ax, 55h	; 'U'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		jmp	short loc_8087
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_806B:				; CODE XREF: sub_7F60+4Aj
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch

loc_8087:				; CODE XREF: sub_7F60+109j
		cmp	si, 1
		jnz	short loc_80C6
		push	ds
		mov	ax, 165Ch
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 4Ch	; 'L'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1671h
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 5Fh	; '_'
		push	ax
		mov	ax, 4Ch	; 'L'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_80C6:				; CODE XREF: sub_7F60+12Aj
		cmp	si, 2
		jnz	short loc_8105
		push	ds
		mov	ax, 1687h
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 2Ch	; ','
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 16A5h
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 5Fh	; '_'
		push	ax
		mov	ax, 30h	; '0'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_8105:				; CODE XREF: sub_7F60+169j
		cmp	si, 5
		jnz	short loc_8144
		push	ds
		mov	ax, 16C1h
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 24h	; '$'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 16E1h
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 5Fh	; '_'
		push	ax
		mov	ax, 38h	; '8'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_8144:				; CODE XREF: sub_7F60+1A8j
		cmp	si, 3
		jnz	short loc_8183
		push	ds
		mov	ax, 16FCh
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1714h
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 5Fh	; '_'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_8183:				; CODE XREF: sub_7F60+1E7j
		cmp	si, 4
		jz	short loc_818B
		jmp	loc_85B4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_818B:				; CODE XREF: sub_7F60+226j
					; sub_7F60+239j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_819B
		call	sub_12827
		jmp	short loc_818B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_819B:				; CODE XREF: sub_7F60+232j
		mov	ax, 1
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1733h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 18h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1756h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 5Fh	; '_'
		push	ax
		mov	ax, 1Ch
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1733h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 18h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1756h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 5Fh	; '_'
		push	ax
		mov	ax, 1Ch
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	[bp+var_3], 0

loc_8281:				; CODE XREF: sub_7F60+32Aj
					; sub_7F60+331j
		push	cs
		call	near ptr sub_7D5D
		cmp	byte_17E3A, 0
		jnz	short loc_8281
		cmp	byte_1A104, 0
		jnz	short loc_8281

loc_8293:				; CODE XREF: sub_7F60+371j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_82AF
		call	sub_12827
		mov	[bp+var_3], al
		cmp	[bp+var_3], 0
		jnz	short loc_82AF
		call	sub_12827

loc_82AF:				; CODE XREF: sub_7F60+33Aj
					; sub_7F60+348j
		push	cs
		call	near ptr sub_7D5D
		mov	ax, word_18234
		mov	word_18318, ax
		mov	ax, word_197E2
		mov	word_18644, ax
		cmp	[bp+var_3], 1Bh
		jz	short loc_82D3
		cmp	byte_17E3A, 0
		jnz	short loc_82D3
		cmp	byte_1A104, 0
		jz	short loc_8293

loc_82D3:				; CODE XREF: sub_7F60+363j
					; sub_7F60+36Aj
		cmp	[bp+var_3], 1Bh
		jnz	short loc_82DC
		jmp	loc_8418
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_82DC:				; CODE XREF: sub_7F60+377j
		call	sub_B9E2
		mov	ax, 1
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1777h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 18h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 179Ah
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 5Fh	; '_'
		push	ax
		mov	ax, 18h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1777h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 18h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 179Ah
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 5Fh	; '_'
		push	ax
		mov	ax, 18h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp

loc_83C2:				; CODE XREF: sub_7F60+46Bj
					; sub_7F60+472j
		push	cs
		call	near ptr sub_7D5D
		cmp	byte_17E3A, 0
		jnz	short loc_83C2
		cmp	byte_1A104, 0
		jnz	short loc_83C2
		mov	[bp+var_3], 0

loc_83D8:				; CODE XREF: sub_7F60+4B6j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_83F4
		call	sub_12827
		mov	[bp+var_3], al
		cmp	[bp+var_3], 0
		jnz	short loc_83F4
		call	sub_12827

loc_83F4:				; CODE XREF: sub_7F60+47Fj
					; sub_7F60+48Dj
		push	cs
		call	near ptr sub_7D5D
		mov	ax, word_18234
		mov	word_18042, ax
		mov	ax, word_197E2
		mov	word_1865C, ax
		cmp	[bp+var_3], 1Bh
		jz	short loc_8418
		cmp	byte_17E3A, 0
		jnz	short loc_8418
		cmp	byte_1A104, 0
		jz	short loc_83D8

loc_8418:				; CODE XREF: sub_7F60+379j
					; sub_7F60+4A8j ...
		cmp	[bp+var_3], 1Bh
		jnz	short loc_8421
		jmp	loc_8571
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8421:				; CODE XREF: sub_7F60+4BCj
		call	sub_B9E2
		mov	ax, 1
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 17BCh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 18h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 17DCh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 5Fh	; '_'
		push	ax
		mov	ax, 18h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 17BCh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 18h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 17DCh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 5Fh	; '_'
		push	ax
		mov	ax, 18h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp

loc_8508:				; CODE XREF: sub_7F60+5B1j
					; sub_7F60+5B8j
		push	cs
		call	near ptr sub_7D5D
		cmp	byte_17E3A, 0
		jnz	short loc_8508
		cmp	byte_1A104, 0
		jnz	short loc_8508
		mov	[bp+var_3], 0

loc_851E:				; CODE XREF: sub_7F60+60Aj
		call	sub_12B2C
		or	ax, ax
		jz	short loc_853A
		call	sub_12827
		mov	[bp+var_3], al
		cmp	[bp+var_3], 0
		jnz	short loc_853A
		call	sub_12827

loc_853A:				; CODE XREF: sub_7F60+5C5j
					; sub_7F60+5D3j
		push	cs
		call	near ptr sub_7D5D
		cmp	byte_17E3A, 0
		jz	short loc_854B
		mov	word_1496E, 0

loc_854B:				; CODE XREF: sub_7F60+5E3j
		cmp	byte_1A104, 0
		jz	short loc_8558
		mov	word_1496E, 1

loc_8558:				; CODE XREF: sub_7F60+5F0j
		cmp	[bp+var_3], 1Bh
		jz	short loc_856C
		cmp	byte_17E3A, 0
		jnz	short loc_856C
		cmp	byte_1A104, 0
		jz	short loc_851E

loc_856C:				; CODE XREF: sub_7F60+5FCj
					; sub_7F60+603j
		call	sub_B9E2

loc_8571:				; CODE XREF: sub_7F60+4BEj
		cmp	[bp+var_3], 1Bh
		jnz	short loc_857A
		jmp	loc_8622
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_857A:				; CODE XREF: sub_7F60+615j
		mov	ax, word_18042
		sub	ax, word_18318
		mov	bx, 4
		cwd
		idiv	bx
		add	ax, word_18318
		mov	word_14968, ax
		mov	ax, word_18042
		push	ax
		sub	ax, word_18318
		cwd
		idiv	bx
		pop	dx
		sub	dx, ax
		mov	word_1496A, dx
		mov	ax, word_1865C
		sub	ax, word_18644
		cwd
		idiv	bx
		add	ax, word_18644
		mov	word_1496C, ax
		jmp	loc_8622
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_85B4:				; CODE XREF: sub_7F60+228j
		inc	di

loc_85B5:				; CODE XREF: sub_7F60+27j
		cmp	di, 2
		jge	short loc_85BD
		jmp	loc_7F8A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_85BD:				; CODE XREF: sub_7F60+658j
					; sub_7F60+66Bj
		call	sub_12B2C
		or	ax, ax
		jz	short loc_85CD
		call	sub_12827
		jmp	short loc_85BD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_85CD:				; CODE XREF: sub_7F60+664j
		mov	[bp+var_3], 0
		mov	[bp+var_2], 0
		call	sub_F2C7
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp

loc_85EF:				; CODE XREF: sub_7F60+6B4j
					; sub_7F60+6BBj
		cmp	[bp+var_3], 0
		jnz	short loc_861D
		push	[bp+var_2]
		call	sub_F3F4
		inc	sp
		inc	sp
		mov	[bp+var_3], al
		cmp	[bp+var_3], 0FFh
		jnz	short loc_860D
		call	sub_12827

loc_860D:				; CODE XREF: sub_7F60+6A6j
		inc	[bp+var_2]
		cmp	[bp+var_2], 3Ch	; '<'
		jl	short loc_85EF
		mov	[bp+var_2], 0
		jmp	short loc_85EF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_861D:				; CODE XREF: sub_7F60+693j
		call	sub_134DF

loc_8622:				; CODE XREF: sub_7F60+617j
					; sub_7F60+651j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_7F60	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_8628	proc far		; CODE XREF: sub_3DEF:loc_3EA9P

var_171		= byte ptr -171h
var_170		= word ptr -170h
var_16E		= word ptr -16Eh
var_16C		= word ptr -16Ch
var_16A		= word ptr -16Ah
var_168		= word ptr -168h
var_166		= word ptr -166h
var_164		= word ptr -164h
var_162		= word ptr -162h
var_160		= word ptr -160h
var_137		= word ptr -137h
var_10E		= word ptr -10Eh
var_E5		= word ptr -0E5h
var_BC		= word ptr -0BCh
var_93		= word ptr -93h
var_6A		= word ptr -6Ah
var_41		= word ptr -41h
var_18		= byte ptr -18h
var_17		= byte ptr -17h
var_16		= byte ptr -16h
var_15		= byte ptr -15h
var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= word ptr -10h
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 172h
		cmp	bp, sp
		jb	short loc_863B
		cmp	word_17D9E, sp
		ja	short loc_8640

loc_863B:				; CODE XREF: sub_8628+Bj
		call	far ptr	errStackOverflow

loc_8640:				; CODE XREF: sub_8628+11j
		mov	[bp+var_A], 53h	; 'S'
		mov	[bp+var_8], 2Dh	; '-'
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		call	sub_11DA3
		add	sp, 6
		cwd
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	ax, [bp+var_8]
		mov	[bp+var_170], ax
		push	ds
		mov	ax, 17FEh
		push	ax
		push	ss
		lea	ax, [bp+var_160]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_18], 43h ; 'C'
		mov	ax, [bp+var_170]
		add	ax, 0Bh
		mov	[bp+var_16E], ax
		push	ds
		mov	ax, 180Eh
		push	ax
		push	ss
		lea	ax, [bp+var_137]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_17], 52h ; 'R'
		mov	ax, [bp+var_16E]
		add	ax, 0Bh
		mov	[bp+var_16C], ax
		push	ds
		mov	ax, 1823h
		push	ax
		push	ss
		lea	ax, [bp+var_10E]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_16], 53h ; 'S'
		mov	ax, [bp+var_16C]
		add	ax, 0Bh
		mov	[bp+var_16A], ax
		push	ds
		mov	ax, 1832h
		push	ax
		push	ss
		lea	ax, [bp+var_E5]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_15], 47h ; 'G'
		mov	ax, [bp+var_16A]
		add	ax, 0Bh
		mov	[bp+var_168], ax
		push	ds
		mov	ax, 183Fh
		push	ax
		push	ss
		lea	ax, [bp+var_BC]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_14], 4Ch ; 'L'
		mov	ax, [bp+var_168]
		add	ax, 0Bh
		mov	[bp+var_166], ax
		push	ds
		mov	ax, 184Ah
		push	ax
		push	ss
		lea	ax, [bp+var_93]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_13], 50h ; 'P'
		mov	ax, [bp+var_166]
		add	ax, 0Bh
		mov	[bp+var_164], ax
		push	ds
		mov	ax, 185Fh
		push	ax
		push	ss
		lea	ax, [bp+var_6A]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_12], 44h ; 'D'
		mov	ax, [bp+var_164]
		add	ax, 0Bh
		mov	[bp+var_162], ax
		push	ds
		mov	ax, 186Dh
		push	ax
		push	ss
		lea	ax, [bp+var_41]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_11], 51h ; 'Q'
		push	ds
		mov	ax, 1881h
		push	ax
		push	ss
		lea	ax, [bp+var_10]
		push	ax
		call	sub_13669
		add	sp, 8
		xor	di, di
		jmp	loc_884B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_877F:				; CODE XREF: sub_8628+228j
		push	di
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1883h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B4h ; 'Д'
		push	ax
		mov	ax, 1Eh
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		xor	si, si
		jmp	loc_8842
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_87E4:				; CODE XREF: sub_8628+21Fj
		mov	ax, si
		mov	dx, 29h	; ')'
		mul	dx
		mov	cx, ss
		lea	bx, [bp+var_160]
		add	bx, ax
		push	cx
		push	bx
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	bx, si
		shl	bx, 1
		lea	ax, [bp+var_170]
		add	bx, ax
		push	word ptr ss:[bx]
		push	[bp+var_A]
		call	sub_D3D2
		add	sp, 0Ch
		db	36h
		mov	al, [bp+si+var_18]
		mov	byte ptr [bp+var_10], al
		push	ss
		lea	ax, [bp+var_10]
		push	ax
		mov	ax, 6
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	bx, si
		shl	bx, 1
		lea	ax, [bp+var_170]
		add	bx, ax
		push	word ptr ss:[bx]
		push	[bp+var_A]
		call	sub_D3D2
		add	sp, 0Ch
		inc	si

loc_8842:				; CODE XREF: sub_8628+1B9j
		cmp	si, 8
		jge	short loc_884A
		jmp	loc_87E4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_884A:				; CODE XREF: sub_8628+21Dj
		inc	di

loc_884B:				; CODE XREF: sub_8628+154j
		cmp	di, 2
		jge	short loc_8853
		jmp	loc_877F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8853:				; CODE XREF: sub_8628+226j
					; sub_8628+239j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_8863
		call	sub_12827
		jmp	short loc_8853
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8863:				; CODE XREF: sub_8628+232j
		mov	[bp+var_171], 0
		mov	[bp+var_6], 0
		xor	si, si
		call	sub_F2C7
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp

loc_8888:				; CODE XREF: sub_8628+2B9j
					; sub_8628+2C3j ...
		cmp	[bp+var_6], 0
		jz	short loc_8891
		jmp	loc_88F6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8891:				; CODE XREF: sub_8628+264j
		cmp	[bp+var_171], 1Bh
		jnz	short loc_889B
		jmp	loc_88F6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_889B:				; CODE XREF: sub_8628+26Ej
		push	si
		call	sub_F3F4
		inc	sp
		inc	sp
		mov	[bp+var_171], al
		xor	di, di
		jmp	short loc_88BC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_88AB:				; CODE XREF: sub_8628+297j
		db	36h
		mov	al, [bp+di+var_18]
		cmp	al, [bp+var_171]
		jnz	short loc_88BB
		mov	ax, di
		inc	ax
		mov	[bp+var_6], ax

loc_88BB:				; CODE XREF: sub_8628+28Bj
		inc	di

loc_88BC:				; CODE XREF: sub_8628+281j
		cmp	di, 8
		jl	short loc_88AB
		inc	si
		cmp	si, 3Ch	; '<'
		jl	short loc_88C9
		xor	si, si

loc_88C9:				; CODE XREF: sub_8628+29Dj
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		call	sub_11DA3
		add	sp, 6
		cwd
		sub	ax, [bp+var_4]
		sbb	dx, [bp+var_2]
		or	dx, dx
		jge	short loc_88E4
		jmp	loc_8888
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_88E4:				; CODE XREF: sub_8628+2B7j
		jg	short loc_88EE
		cmp	ax, 1F4h
		ja	short loc_88EE
		jmp	loc_8888
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_88EE:				; CODE XREF: sub_8628:loc_88E4j
					; sub_8628+2C1j
		mov	[bp+var_6], 63h	; 'c'
		jmp	loc_8888
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_88F6:				; CODE XREF: sub_8628+266j
					; sub_8628+270j
		call	sub_134DF
		mov	ax, [bp+var_6]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_8628	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_8904	proc far		; CODE XREF: sub_DE8+E7EP

var_16D		= byte ptr -16Dh
var_16C		= word ptr -16Ch
var_16A		= word ptr -16Ah
var_168		= word ptr -168h
var_166		= word ptr -166h
var_164		= word ptr -164h
var_162		= word ptr -162h
var_160		= word ptr -160h
var_15E		= word ptr -15Eh
var_15C		= word ptr -15Ch
var_133		= word ptr -133h
var_10A		= word ptr -10Ah
var_E1		= word ptr -0E1h
var_B8		= word ptr -0B8h
var_8F		= word ptr -8Fh
var_66		= word ptr -66h
var_3D		= word ptr -3Dh
var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= byte ptr -10h
var_F		= byte ptr -0Fh
var_E		= byte ptr -0Eh
var_D		= byte ptr -0Dh
var_C		= word ptr -0Ch
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 16Eh
		cmp	bp, sp
		jb	short loc_8917
		cmp	word_17D9E, sp
		ja	short loc_891C

loc_8917:				; CODE XREF: sub_8904+Bj
		call	far ptr	errStackOverflow

loc_891C:				; CODE XREF: sub_8904+11j
		mov	[bp+var_6], 53h	; 'S'
		mov	[bp+var_4], 2Dh	; '-'
		mov	ax, [bp+var_4]
		mov	[bp+var_16C], ax
		push	ds
		mov	ax, 18A4h
		push	ax
		push	ss
		lea	ax, [bp+var_15C]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_14], 41h ; 'A'
		mov	ax, [bp+var_16C]
		add	ax, 0Bh
		mov	[bp+var_16A], ax
		push	ds
		mov	ax, 18B8h
		push	ax
		push	ss
		lea	ax, [bp+var_133]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_13], 52h ; 'R'
		mov	ax, [bp+var_16A]
		add	ax, 0Bh
		mov	[bp+var_168], ax
		cmp	byte_1A13E, 0
		jnz	short loc_898D
		push	ds
		mov	ax, 18CCh
		push	ax
		push	ss
		lea	ax, [bp+var_10A]
		push	ax
		call	sub_13669
		add	sp, 8
		jmp	short loc_89A0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_898D:				; CODE XREF: sub_8904+72j
		push	ds
		mov	ax, 18D6h
		push	ax
		push	ss
		lea	ax, [bp+var_10A]
		push	ax
		call	sub_13669
		add	sp, 8

loc_89A0:				; CODE XREF: sub_8904+87j
		mov	[bp+var_12], 53h ; 'S'
		mov	ax, [bp+var_168]
		add	ax, 0Bh
		mov	[bp+var_166], ax
		cmp	byte_19E8C, 0
		jnz	short loc_89CB
		push	ds
		mov	ax, 18DFh
		push	ax
		push	ss
		lea	ax, [bp+var_E1]
		push	ax
		call	sub_13669
		add	sp, 8
		jmp	short loc_89DE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_89CB:				; CODE XREF: sub_8904+B0j
		push	ds
		mov	ax, 18E9h
		push	ax
		push	ss
		lea	ax, [bp+var_E1]
		push	ax
		call	sub_13669
		add	sp, 8

loc_89DE:				; CODE XREF: sub_8904+C5j
		mov	[bp+var_11], 4Dh ; 'M'
		mov	ax, [bp+var_166]
		add	ax, 0Bh
		mov	[bp+var_164], ax
		push	ds
		mov	ax, 18F2h
		push	ax
		push	ss
		lea	ax, [bp+var_B8]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_10], 44h ; 'D'
		mov	ax, [bp+var_164]
		add	ax, 0Bh
		mov	[bp+var_162], ax
		cmp	byte_18044, 0
		jnz	short loc_8A2B
		push	ds
		mov	ax, 18FEh
		push	ax
		push	ss
		lea	ax, [bp+var_8F]
		push	ax
		call	sub_13669
		add	sp, 8
		jmp	short loc_8A3E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8A2B:				; CODE XREF: sub_8904+110j
		push	ds
		mov	ax, 190Bh
		push	ax
		push	ss
		lea	ax, [bp+var_8F]
		push	ax
		call	sub_13669
		add	sp, 8

loc_8A3E:				; CODE XREF: sub_8904+125j
		mov	[bp+var_F], 4Ah	; 'J'
		mov	ax, [bp+var_162]
		add	ax, 0Bh
		mov	[bp+var_160], ax
		push	ds
		mov	ax, 1917h
		push	ax
		push	ss
		lea	ax, [bp+var_66]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_E], 43h	; 'C'
		mov	ax, [bp+var_160]
		add	ax, 0Bh
		mov	[bp+var_15E], ax
		push	ds
		mov	ax, 184Ah
		push	ax
		push	ss
		lea	ax, [bp+var_3D]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_D], 50h	; 'P'
		push	ds
		mov	ax, 1881h
		push	ax
		push	ss
		lea	ax, [bp+var_C]
		push	ax
		call	sub_13669
		add	sp, 8
		xor	di, di
		jmp	loc_8B92
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8A9B:				; CODE XREF: sub_8904+293j
		push	di
		call	sub_439E
		inc	sp
		inc	sp
		or	di, di
		jnz	short loc_8AAC
		mov	ax, 1
		jmp	short loc_8AAE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8AAC:				; CODE XREF: sub_8904+1A1j
		xor	ax, ax

loc_8AAE:				; CODE XREF: sub_8904+1A6j
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1883h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B0h ; 'А'
		push	ax
		mov	ax, 1Eh
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 192Ah
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B9h ; 'Й'
		push	ax
		mov	ax, 1Eh
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		xor	si, si
		jmp	short loc_8B8C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8B2E:				; CODE XREF: sub_8904+28Bj
		mov	ax, si
		mov	dx, 29h	; ')'
		mul	dx
		mov	cx, ss
		lea	bx, [bp+var_15C]
		add	bx, ax
		push	cx
		push	bx
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	bx, si
		shl	bx, 1
		lea	ax, [bp+var_16C]
		add	bx, ax
		push	word ptr ss:[bx]
		push	[bp+var_6]
		call	sub_D3D2
		add	sp, 0Ch
		db	36h
		mov	al, [bp+si+var_14]
		mov	byte ptr [bp+var_C], al
		push	ss
		lea	ax, [bp+var_C]
		push	ax
		mov	ax, 6
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	bx, si
		shl	bx, 1
		lea	ax, [bp+var_16C]
		add	bx, ax
		push	word ptr ss:[bx]
		push	[bp+var_6]
		call	sub_D3D2
		add	sp, 0Ch
		inc	si

loc_8B8C:				; CODE XREF: sub_8904+228j
		cmp	si, 8
		jl	short loc_8B2E
		inc	di

loc_8B92:				; CODE XREF: sub_8904+194j
		cmp	di, 2
		jge	short loc_8B9A
		jmp	loc_8A9B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8B9A:				; CODE XREF: sub_8904+291j
					; sub_8904+2A4j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_8BAA
		call	sub_12827
		jmp	short loc_8B9A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8BAA:				; CODE XREF: sub_8904+29Dj
		mov	[bp+var_16D], 0
		mov	[bp+var_2], 0
		xor	si, si
		call	sub_F2C7
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp

loc_8BCF:				; CODE XREF: sub_8904+302j
					; sub_8904+306j
		cmp	[bp+var_2], 0
		jnz	short loc_8C0C
		cmp	[bp+var_16D], 1Bh
		jz	short loc_8C0C
		push	si
		call	sub_F3F4
		inc	sp
		inc	sp
		mov	[bp+var_16D], al
		xor	di, di
		jmp	short loc_8BFD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8BEC:				; CODE XREF: sub_8904+2FCj
		db	36h
		mov	al, [bp+di+var_14]
		cmp	al, [bp+var_16D]
		jnz	short loc_8BFC
		mov	ax, di
		inc	ax
		mov	[bp+var_2], ax

loc_8BFC:				; CODE XREF: sub_8904+2F0j
		inc	di

loc_8BFD:				; CODE XREF: sub_8904+2E6j
		cmp	di, 8
		jl	short loc_8BEC
		inc	si
		cmp	si, 3Ch	; '<'
		jl	short loc_8BCF
		xor	si, si
		jmp	short loc_8BCF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8C0C:				; CODE XREF: sub_8904+2CFj
					; sub_8904+2D6j
		call	sub_134DF
		mov	ax, [bp+var_2]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_8904	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_8C1A	proc far		; CODE XREF: sub_3DEF:loc_40D3P

var_EB		= byte ptr -0EBh
var_EA		= word ptr -0EAh
var_E8		= word ptr -0E8h
var_E6		= word ptr -0E6h
var_E4		= word ptr -0E4h
var_E2		= word ptr -0E2h
var_E0		= word ptr -0E0h
var_B7		= word ptr -0B7h
var_8E		= word ptr -8Eh
var_65		= word ptr -65h
var_3C		= word ptr -3Ch
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= byte ptr -10h
var_F		= byte ptr -0Fh
var_E		= byte ptr -0Eh
var_C		= word ptr -0Ch
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 0ECh
		cmp	bp, sp
		jb	short loc_8C2D
		cmp	word_17D9E, sp
		ja	short loc_8C32

loc_8C2D:				; CODE XREF: sub_8C1A+Bj
		call	far ptr	errStackOverflow

loc_8C32:				; CODE XREF: sub_8C1A+11j
		mov	[bp+var_6], 58h	; 'X'
		mov	[bp+var_4], 3Ch	; '<'
		mov	ax, [bp+var_4]
		mov	[bp+var_EA], ax
		cmp	byte_1A13E, 0
		jnz	short loc_8C5F
		push	ds
		mov	ax, 18CCh
		push	ax
		push	ss
		lea	ax, [bp+var_E0]
		push	ax
		call	sub_13669
		add	sp, 8
		jmp	short loc_8C72
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8C5F:				; CODE XREF: sub_8C1A+2Ej
		push	ds
		mov	ax, 18D6h
		push	ax
		push	ss
		lea	ax, [bp+var_E0]
		push	ax
		call	sub_13669
		add	sp, 8

loc_8C72:				; CODE XREF: sub_8C1A+43j
		mov	[bp+var_12], 53h ; 'S'
		mov	ax, [bp+var_EA]
		add	ax, 0Bh
		mov	[bp+var_E8], ax
		cmp	byte_19E8C, 0
		jnz	short loc_8C9D
		push	ds
		mov	ax, 18DFh
		push	ax
		push	ss
		lea	ax, [bp+var_B7]
		push	ax
		call	sub_13669
		add	sp, 8
		jmp	short loc_8CB0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8C9D:				; CODE XREF: sub_8C1A+6Cj
		push	ds
		mov	ax, 18E9h
		push	ax
		push	ss
		lea	ax, [bp+var_B7]
		push	ax
		call	sub_13669
		add	sp, 8

loc_8CB0:				; CODE XREF: sub_8C1A+81j
		mov	[bp+var_11], 4Dh ; 'M'
		mov	ax, [bp+var_E8]
		add	ax, 0Bh
		mov	[bp+var_E6], ax
		push	ds
		mov	ax, 18F2h
		push	ax
		push	ss
		lea	ax, [bp+var_8E]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_10], 44h ; 'D'
		mov	ax, [bp+var_E6]
		add	ax, 0Bh
		mov	[bp+var_E4], ax
		cmp	byte_18044, 0
		jnz	short loc_8CFC
		push	ds
		mov	ax, 18FEh
		push	ax
		push	ss
		lea	ax, [bp+var_65]
		push	ax
		call	sub_13669
		add	sp, 8
		jmp	short loc_8D0E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8CFC:				; CODE XREF: sub_8C1A+CCj
		push	ds
		mov	ax, 190Bh
		push	ax
		push	ss
		lea	ax, [bp+var_65]
		push	ax
		call	sub_13669
		add	sp, 8

loc_8D0E:				; CODE XREF: sub_8C1A+E0j
		mov	[bp+var_F], 4Ah	; 'J'
		mov	ax, [bp+var_E4]
		add	ax, 0Bh
		mov	[bp+var_E2], ax
		push	ds
		mov	ax, 1917h
		push	ax
		push	ss
		lea	ax, [bp+var_3C]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_E], 43h	; 'C'
		push	ds
		mov	ax, 1881h
		push	ax
		push	ss
		lea	ax, [bp+var_C]
		push	ax
		call	sub_13669
		add	sp, 8
		xor	di, di
		jmp	loc_8E41
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8D4A:				; CODE XREF: sub_8C1A+22Cj
		push	di
		call	sub_439E
		inc	sp
		inc	sp
		or	di, di
		jnz	short loc_8D5B
		mov	ax, 1
		jmp	short loc_8D5D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8D5B:				; CODE XREF: sub_8C1A+13Aj
		xor	ax, ax

loc_8D5D:				; CODE XREF: sub_8C1A+13Fj
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1883h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B0h ; 'А'
		push	ax
		mov	ax, 1Eh
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 192Ah
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B9h ; 'Й'
		push	ax
		mov	ax, 1Eh
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		xor	si, si
		jmp	short loc_8E3B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8DDD:				; CODE XREF: sub_8C1A+224j
		mov	ax, si
		mov	dx, 29h	; ')'
		mul	dx
		mov	cx, ss
		lea	bx, [bp+var_E0]
		add	bx, ax
		push	cx
		push	bx
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	bx, si
		shl	bx, 1
		lea	ax, [bp+var_EA]
		add	bx, ax
		push	word ptr ss:[bx]
		push	[bp+var_6]
		call	sub_D3D2
		add	sp, 0Ch
		db	36h
		mov	al, [bp+si+var_12]
		mov	byte ptr [bp+var_C], al
		push	ss
		lea	ax, [bp+var_C]
		push	ax
		mov	ax, 6
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	bx, si
		shl	bx, 1
		lea	ax, [bp+var_EA]
		add	bx, ax
		push	word ptr ss:[bx]
		push	[bp+var_6]
		call	sub_D3D2
		add	sp, 0Ch
		inc	si

loc_8E3B:				; CODE XREF: sub_8C1A+1C1j
		cmp	si, 5
		jl	short loc_8DDD
		inc	di

loc_8E41:				; CODE XREF: sub_8C1A+12Dj
		cmp	di, 2
		jge	short loc_8E49
		jmp	loc_8D4A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8E49:				; CODE XREF: sub_8C1A+22Aj
					; sub_8C1A+23Dj
		call	sub_12B2C
		or	ax, ax
		jz	short loc_8E59
		call	sub_12827
		jmp	short loc_8E49
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8E59:				; CODE XREF: sub_8C1A+236j
		mov	[bp+var_EB], 0
		mov	[bp+var_2], 0
		xor	si, si
		call	sub_F2C7
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp

loc_8E7E:				; CODE XREF: sub_8C1A+29Bj
					; sub_8C1A+29Fj
		cmp	[bp+var_2], 0
		jnz	short loc_8EBB
		cmp	[bp+var_EB], 1Bh
		jz	short loc_8EBB
		push	si
		call	sub_F3F4
		inc	sp
		inc	sp
		mov	[bp+var_EB], al
		xor	di, di
		jmp	short loc_8EAC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8E9B:				; CODE XREF: sub_8C1A+295j
		db	36h
		mov	al, [bp+di+var_12]
		cmp	al, [bp+var_EB]
		jnz	short loc_8EAB
		mov	ax, di
		inc	ax
		mov	[bp+var_2], ax

loc_8EAB:				; CODE XREF: sub_8C1A+289j
		inc	di

loc_8EAC:				; CODE XREF: sub_8C1A+27Fj
		cmp	di, 5
		jl	short loc_8E9B
		inc	si
		cmp	si, 3Ch	; '<'
		jl	short loc_8E7E
		xor	si, si
		jmp	short loc_8E7E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8EBB:				; CODE XREF: sub_8C1A+268j
					; sub_8C1A+26Fj
		call	sub_134DF
		mov	ax, [bp+var_2]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_8C1A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_8EC9	proc far		; CODE XREF: sub_3DEF:loc_3EB9P

var_15		= byte ptr -15h
var_14		= word ptr -14h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 16h
		cmp	word_17D9E, sp
		ja	short loc_8EDC
		call	far ptr	errStackOverflow

loc_8EDC:				; CODE XREF: sub_8EC9+Cj
		mov	ax, word_197A2
		mov	[bp+var_2], ax

loc_8EE2:				; CODE XREF: sub_8EC9+27j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_8EF2
		call	sub_12827
		jmp	short loc_8EE2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8EF2:				; CODE XREF: sub_8EC9+20j
					; sub_8EC9+52Cj ...
		mov	[bp+var_8], 26h	; '&'
		mov	[bp+var_6], 2Eh	; '.'
		mov	[bp+var_A], 0
		cmp	word_197A2, 7
		jle	short loc_8F0D
		mov	[bp+var_A], 8

loc_8F0D:				; CODE XREF: sub_8EC9+3Dj
		call	sub_134DF
		push	ds
		mov	ax, 1881h
		push	ax
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	[bp+var_E], 0
		jmp	loc_91FE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8F2C:				; CODE XREF: sub_8EC9+33Bj
		mov	di, [bp+var_A]
		push	[bp+var_E]
		call	sub_439E
		inc	sp
		inc	sp
		cmp	[bp+var_E], 0
		jnz	short loc_8F44
		mov	ax, 1
		jmp	short loc_8F46
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_8F44:				; CODE XREF: sub_8EC9+74j
		xor	ax, ax

loc_8F46:				; CODE XREF: sub_8EC9+79j
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1944h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B0h ; 'А'
		push	ax
		mov	ax, 16h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1967h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B9h ; 'Й'
		push	ax
		mov	ax, 1Eh
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1988h
		push	ax
		mov	ax, 6
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, [bp+var_6]
		add	ax, 63h	; 'c'
		push	ax
		push	[bp+var_8]
		call	sub_D3D2
		add	sp, 0Ch
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		push	word_14394
		call	sub_12BDF
		add	sp, 8
		push	dx
		push	ax
		mov	ax, 6
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, [bp+var_6]
		add	ax, 63h	; 'c'
		push	ax
		mov	ax, [bp+var_8]
		add	ax, 90h	; ''
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 199Ah
		push	ax
		mov	ax, 6
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, [bp+var_6]
		add	ax, 0FFECh
		push	ax
		push	[bp+var_8]
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 19A6h
		push	ax
		mov	ax, 6
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, [bp+var_6]
		add	ax, 0FFECh
		push	ax
		mov	ax, [bp+var_8]
		add	ax, 60h	; '`'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		xor	si, si
		jmp	loc_91F3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_905D:				; CODE XREF: sub_8EC9+32Fj
		push	ds
		mov	ax, 19B8h
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, si
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		push	[bp+var_8]
		call	sub_D3D2
		add	sp, 0Ch
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		call	sub_12BDF
		add	sp, 8
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, si
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		mov	ax, [bp+var_8]
		add	ax, 38h	; '8'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		mov	bx, di
		shl	bx, 1
		push	word ptr [bx+192h]
		call	sub_12BDF
		add	sp, 8
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, si
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		mov	ax, 12h
		push	ax
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		call	sub_13692
		add	sp, 4
		pop	dx
		sub	dx, ax
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		add	dx, [bp+var_8]
		add	dx, 4
		push	dx
		call	sub_D3D2
		add	sp, 0Ch
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		mov	bx, di
		shl	bx, 1
		push	word ptr [bx+1B4h]
		call	sub_12BDF
		add	sp, 8
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, si
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		mov	ax, 18h
		push	ax
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		call	sub_13692
		add	sp, 4
		pop	dx
		sub	dx, ax
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		add	dx, [bp+var_8]
		add	dx, 4
		push	dx
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 19C0h
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, si
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		mov	ax, [bp+var_8]
		add	ax, 0C4h ; 'Ф'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		mov	bx, di
		shl	bx, 1
		push	word ptr [bx+172h]
		call	sub_12BDF
		add	sp, 8
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, si
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		mov	ax, 1Fh
		push	ax
		push	ss
		lea	ax, [bp+var_14]
		push	ax
		call	sub_13692
		add	sp, 4
		pop	dx
		sub	dx, ax
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		add	dx, [bp+var_8]
		add	dx, 4
		push	dx
		call	sub_D3D2
		add	sp, 0Ch
		inc	di
		inc	si

loc_91F3:				; CODE XREF: sub_8EC9+191j
		cmp	si, 8
		jge	short loc_91FB
		jmp	loc_905D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_91FB:				; CODE XREF: sub_8EC9+32Dj
		inc	[bp+var_E]

loc_91FE:				; CODE XREF: sub_8EC9+60j
		cmp	[bp+var_E], 2
		jge	short loc_9207
		jmp	loc_8F2C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9207:				; CODE XREF: sub_8EC9+339j
		mov	[bp+var_15], 0
		mov	[bp+var_4], 0
		xor	si, si
		call	sub_F2C7
		mov	di, word_197A2
		cmp	di, 7
		jle	short loc_9223
		sub	di, 8

loc_9223:				; CODE XREF: sub_8EC9+355j
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		push	ds
		mov	ax, 19C5h
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, di
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		mov	ax, [bp+var_8]
		add	ax, 0FFF0h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_925E:				; CODE XREF: sub_8EC9+61Aj
					; sub_8EC9+61Fj
		cmp	[bp+var_4], 0
		jz	short loc_9267
		jmp	loc_94EB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9267:				; CODE XREF: sub_8EC9+399j
		cmp	[bp+var_15], 1Bh
		jnz	short loc_9270
		jmp	loc_94EB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9270:				; CODE XREF: sub_8EC9+3A2j
		push	si
		call	sub_F3F4
		inc	sp
		inc	sp
		mov	[bp+var_15], al
		cmp	[bp+var_15], 0
		jz	short loc_92BD
		cmp	[bp+var_15], 0Dh
		jz	short loc_92BD
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, di
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		add	ax, 8
		push	ax
		mov	ax, [bp+var_8]
		add	ax, 0FFF7h
		push	ax
		mov	ax, di
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		mov	ax, [bp+var_8]
		add	ax, 0FFF0h
		push	ax
		call	sub_4676
		add	sp, 0Ch

loc_92BD:				; CODE XREF: sub_8EC9+3B6j
					; sub_8EC9+3BCj
		cmp	[bp+var_15], 0Dh
		jz	short loc_92C6
		jmp	loc_93F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_92C6:				; CODE XREF: sub_8EC9+3F8j
		mov	ax, [bp+var_A]
		add	ax, di
		inc	ax
		mov	[bp+var_4], ax
		dec	ax
		mov	word_197A2, ax
		mov	bx, [bp+var_4]
		dec	bx
		shl	bx, 1
		mov	ax, [bx+192h]
		cmp	ax, word_14394
		jg	short loc_92E6
		jmp	loc_93F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_92E6:				; CODE XREF: sub_8EC9+418j
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 19C7h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B0h ; 'А'
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 19DEh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B9h ; 'Й'
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	[bp+var_C], 1B8h
		jmp	loc_936A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9346:				; CODE XREF: sub_8EC9+4A8j
		cmp	byte_1A13E, 0
		jnz	short loc_9350
		jmp	loc_9367
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9350:				; CODE XREF: sub_8EC9+482j
		push	[bp+var_C]
		call	sub_134B3
		inc	sp
		inc	sp
		mov	ax, [bp+var_C]
		shl	ax, 1
		push	ax
		call	sub_134B3
		inc	sp
		inc	sp

loc_9367:				; CODE XREF: sub_8EC9+484j
		inc	[bp+var_C]

loc_936A:				; CODE XREF: sub_8EC9+47Aj
		cmp	[bp+var_C], 1130h
		jge	short loc_9374
		jmp	loc_9346
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9374:				; CODE XREF: sub_8EC9+4A6j
		call	sub_134DF

loc_9379:				; CODE XREF: sub_8EC9+4C7j
		push	si
		call	sub_F3F4
		inc	sp
		inc	sp
		mov	[bp+var_15], al
		inc	si
		cmp	si, 3Ch	; '<'
		jl	short loc_938C
		xor	si, si

loc_938C:				; CODE XREF: sub_8EC9+4BFj
		cmp	[bp+var_15], 0
		jz	short loc_9379
		cmp	[bp+var_15], 0FFh
		jnz	short loc_939D
		call	sub_12827

loc_939D:				; CODE XREF: sub_8EC9+4CDj
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 19F8h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B0h ; 'А'
		push	ax
		mov	ax, 1Eh
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1967h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B9h ; 'Й'
		push	ax
		mov	ax, 1Ah
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		jmp	loc_8EF2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_93F8:				; CODE XREF: sub_8EC9+3FAj
					; sub_8EC9+41Aj
		cmp	[bp+var_15], 38h ; '8'
		jnz	short loc_941C
		or	di, di
		jz	short loc_9405
		dec	di
		jmp	short loc_941C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9405:				; CODE XREF: sub_8EC9+537j
		cmp	[bp+var_A], 0
		jnz	short loc_940E
		jmp	loc_947A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_940E:				; CODE XREF: sub_8EC9+540j
					; sub_8EC9+5AEj
		mov	[bp+var_A], 0
		mov	word_197A2, 7
		jmp	loc_8EF2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_941C:				; CODE XREF: sub_8EC9+533j
					; sub_8EC9+53Aj
		cmp	[bp+var_15], 32h ; '2'
		jnz	short loc_9441
		cmp	di, 7
		jge	short loc_942A
		inc	di
		jmp	short loc_9441
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_942A:				; CODE XREF: sub_8EC9+55Cj
		cmp	[bp+var_A], 0
		jnz	short loc_9433
		jmp	loc_949F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9433:				; CODE XREF: sub_8EC9+565j
					; sub_8EC9+5D3j
		mov	[bp+var_A], 0

loc_9438:				; CODE XREF: sub_8EC9+597j
		mov	word_197A2, 0
		jmp	loc_8EF2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9441:				; CODE XREF: sub_8EC9+557j
					; sub_8EC9+55Fj
		cmp	[bp+var_15], 0FFh
		jnz	short loc_94AD
		call	sub_12827
		mov	[bp+var_15], al
		cmp	[bp+var_15], 49h ; 'I'
		jz	short loc_945B
		cmp	[bp+var_15], 51h ; 'Q'
		jnz	short loc_9464

loc_945B:				; CODE XREF: sub_8EC9+58Aj
		cmp	word_197A2, 7
		jg	short loc_9438
		jmp	short loc_94A4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9464:				; CODE XREF: sub_8EC9+590j
		cmp	[bp+var_15], 48h ; 'H'
		jnz	short loc_9488
		or	di, di
		jz	short loc_9471
		dec	di
		jmp	short loc_9488
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9471:				; CODE XREF: sub_8EC9+5A3j
		cmp	[bp+var_A], 0
		jz	short loc_947A
		jmp	loc_940E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_947A:				; CODE XREF: sub_8EC9+542j
					; sub_8EC9+5ACj
		mov	[bp+var_A], 8
		mov	word_197A2, 0Fh
		jmp	loc_8EF2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9488:				; CODE XREF: sub_8EC9+59Fj
					; sub_8EC9+5A6j
		cmp	[bp+var_15], 50h ; 'P'
		jnz	short loc_94AD
		cmp	di, 7
		jge	short loc_9496
		inc	di
		jmp	short loc_94AD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9496:				; CODE XREF: sub_8EC9+5C8j
		cmp	[bp+var_A], 0
		jz	short loc_949F
		jmp	loc_9433
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_949F:				; CODE XREF: sub_8EC9+567j
					; sub_8EC9+5D1j
		mov	[bp+var_A], 8

loc_94A4:				; CODE XREF: sub_8EC9+599j
		mov	word_197A2, 8
		jmp	loc_8EF2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_94AD:				; CODE XREF: sub_8EC9+57Cj
					; sub_8EC9+5C3j ...
		cmp	[bp+var_15], 0
		jnz	short loc_94B6
		jmp	loc_94DD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_94B6:				; CODE XREF: sub_8EC9+5E8j
		push	ds
		mov	ax, 19C5h
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, di
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		mov	ax, [bp+var_8]
		add	ax, 0FFF0h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_94DD:				; CODE XREF: sub_8EC9+5EAj
		inc	si
		cmp	si, 3Ch	; '<'
		jge	short loc_94E6
		jmp	loc_925E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_94E6:				; CODE XREF: sub_8EC9+618j
		xor	si, si
		jmp	loc_925E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_94EB:				; CODE XREF: sub_8EC9+39Bj
					; sub_8EC9+3A4j
		cmp	[bp+var_15], 1Bh
		jnz	short loc_94FC
		mov	ax, [bp+var_2]
		mov	word_197A2, ax
		mov	[bp+var_4], 0

loc_94FC:				; CODE XREF: sub_8EC9+626j
		call	sub_134DF
		mov	ax, [bp+var_4]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_8EC9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_950A	proc far		; CODE XREF: sub_9B11+F9p

var_9		= byte ptr -9
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= word ptr  0Eh

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		cmp	word_17D9E, sp
		ja	short loc_951D
		call	far ptr	errStackOverflow

loc_951D:				; CODE XREF: sub_950A+Cj
		mov	di, 38h	; '8'
		mov	[bp+var_6], 32h	; '2'
		mov	[bp+var_8], 0
		jmp	loc_9647
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_952D:				; CODE XREF: sub_950A+143j
		push	[bp+var_8]
		call	sub_439E
		inc	sp
		inc	sp
		cmp	[bp+var_8], 0
		jnz	short loc_9542
		mov	ax, 1
		jmp	short loc_9544
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9542:				; CODE XREF: sub_950A+31j
		xor	ax, ax

loc_9544:				; CODE XREF: sub_950A+36j
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1A15h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B0h ; 'А'
		push	ax
		mov	ax, 1Eh
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1967h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B9h ; 'Й'
		push	ax
		mov	ax, 1Ah
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	[bp+arg_2]
		push	[bp+arg_0]
		mov	ax, 6
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, [bp+var_6]
		add	ax, 0FFECh
		push	ax
		push	di
		call	sub_D3D2
		add	sp, 0Ch
		xor	si, si
		jmp	short loc_963F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_95E2:				; CODE XREF: sub_950A+138j
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, si
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		push	di
		call	sub_D3D2
		add	sp, 0Ch
		mov	bx, si
		add	bx, 9
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, si
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		mov	ax, di
		add	ax, 78h	; 'x'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		inc	si

loc_963F:				; CODE XREF: sub_950A+D6j
		cmp	si, 9
		jl	short loc_95E2
		inc	[bp+var_8]

loc_9647:				; CODE XREF: sub_950A+20j
		cmp	[bp+var_8], 2
		jge	short loc_9650
		jmp	loc_952D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9650:				; CODE XREF: sub_950A+141j
					; sub_950A+154j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_9660
		call	sub_12827
		jmp	short loc_9650
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9660:				; CODE XREF: sub_950A+14Dj
		mov	[bp+var_9], 0
		mov	[bp+var_4], 0
		cmp	[bp+arg_4], 9
		jle	short loc_967A
		mov	[bp+var_2], 1
		sub	[bp+arg_4], 9
		jmp	short loc_967F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_967A:				; CODE XREF: sub_950A+163j
		mov	[bp+var_2], 0

loc_967F:				; CODE XREF: sub_950A+16Ej
		mov	si, [bp+arg_4]
		call	sub_F2C7
		mov	[bp+var_8], 0
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		push	ds
		mov	ax, 19C5h
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, si
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		mov	ax, [bp+var_2]
		mov	dx, 78h	; 'x'
		mul	dx
		add	ax, di
		add	ax, 0FFF0h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_96CE:				; CODE XREF: sub_950A+2BFj
					; sub_950A+2C7j
		cmp	[bp+var_4], 0
		jz	short loc_96D7
		jmp	loc_97D4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_96D7:				; CODE XREF: sub_950A+1C8j
		cmp	[bp+var_9], 1Bh
		jnz	short loc_96E0
		jmp	loc_97D4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_96E0:				; CODE XREF: sub_950A+1D1j
		push	[bp+var_8]
		call	sub_F3F4
		inc	sp
		inc	sp
		mov	[bp+var_9], al
		cmp	[bp+var_9], 0Dh
		jnz	short loc_9701
		mov	ax, [bp+var_2]
		mov	dx, 9
		mul	dx
		add	ax, si
		inc	ax
		mov	[bp+var_4], ax

loc_9701:				; CODE XREF: sub_950A+1E7j
		cmp	[bp+var_9], 0FFh
		jz	short loc_970A
		jmp	loc_97C0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_970A:				; CODE XREF: sub_950A+1FBj
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, si
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		add	ax, 8
		push	ax
		mov	ax, [bp+var_2]
		mov	dx, 78h	; 'x'
		mul	dx
		add	ax, di
		add	ax, 0FFF7h
		push	ax
		mov	ax, si
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		mov	ax, [bp+var_2]
		mov	dx, 78h	; 'x'
		mul	dx
		add	ax, di
		add	ax, 0FFF0h
		push	ax
		call	sub_4676
		add	sp, 0Ch
		call	sub_12827
		mov	[bp+var_9], al
		cmp	[bp+var_9], 48h	; 'H'
		jnz	short loc_9766
		or	si, si
		jz	short loc_9763
		dec	si
		jmp	short loc_9766
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9763:				; CODE XREF: sub_950A+254j
		mov	si, 8

loc_9766:				; CODE XREF: sub_950A+250j
					; sub_950A+257j
		cmp	[bp+var_9], 50h	; 'P'
		jnz	short loc_9776
		cmp	si, 8
		jge	short loc_9774
		inc	si
		jmp	short loc_9776
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9774:				; CODE XREF: sub_950A+265j
		xor	si, si

loc_9776:				; CODE XREF: sub_950A+260j
					; sub_950A+268j
		cmp	[bp+var_9], 4Dh	; 'M'
		jz	short loc_9782
		cmp	[bp+var_9], 4Bh	; 'K'
		jnz	short loc_9792

loc_9782:				; CODE XREF: sub_950A+270j
		cmp	[bp+var_2], 0
		jnz	short loc_978D
		mov	ax, 1
		jmp	short loc_978F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_978D:				; CODE XREF: sub_950A+27Cj
		xor	ax, ax

loc_978F:				; CODE XREF: sub_950A+281j
		mov	[bp+var_2], ax

loc_9792:				; CODE XREF: sub_950A+276j
		push	ds
		mov	ax, 19C5h
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, si
		mov	dx, 0Bh
		mul	dx
		add	ax, [bp+var_6]
		push	ax
		mov	ax, [bp+var_2]
		mov	dx, 78h	; 'x'
		mul	dx
		add	ax, di
		add	ax, 0FFF0h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_97C0:				; CODE XREF: sub_950A+1FDj
		inc	[bp+var_8]
		cmp	[bp+var_8], 3Ch	; '<'
		jge	short loc_97CC
		jmp	loc_96CE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_97CC:				; CODE XREF: sub_950A+2BDj
		mov	[bp+var_8], 0
		jmp	loc_96CE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_97D4:				; CODE XREF: sub_950A+1CAj
					; sub_950A+1D3j
		call	sub_134DF
		mov	ax, [bp+var_4]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_950A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_97E2	proc far		; CODE XREF: sub_9B11+1Cp

var_9		= byte ptr -9
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		cmp	word_17D9E, sp
		ja	short loc_97F5
		call	far ptr	errStackOverflow

loc_97F5:				; CODE XREF: sub_97E2+Cj
		mov	si, 38h	; '8'
		mov	di, 3Dh	; '='
		mov	[bp+var_8], 0
		jmp	loc_99C0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9803:				; CODE XREF: sub_97E2+1E4j
		push	[bp+var_8]
		call	sub_439E
		inc	sp
		inc	sp
		cmp	[bp+var_8], 0
		jnz	short loc_9818
		mov	ax, 1
		jmp	short loc_981A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9818:				; CODE XREF: sub_97E2+2Fj
		xor	ax, ax

loc_981A:				; CODE XREF: sub_97E2+34j
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 1A32h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B0h ; 'А'
		push	ax
		mov	ax, 1Ah
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1967h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B9h ; 'Й'
		push	ax
		mov	ax, 1Ah
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1A51h
		push	ax
		mov	ax, 6
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, di
		add	ax, 0FFECh
		push	ax
		push	si
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1A67h
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		push	di
		push	si
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1A75h
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, di
		add	ax, 0Bh
		push	ax
		push	si
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1A83h
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, di
		add	ax, 16h
		push	ax
		push	si
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1A91h
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, di
		add	ax, 21h	; '!'
		push	ax
		push	si
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1A9Fh
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, di
		add	ax, 2Ch	; ','
		push	ax
		push	si
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1AADh
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, di
		add	ax, 37h	; '7'
		push	ax
		push	si
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1ABBh
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, di
		add	ax, 42h	; 'B'
		push	ax
		push	si
		call	sub_D3D2
		add	sp, 0Ch
		mov	[bp+var_6], 0
		jmp	loc_99B4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9979:				; CODE XREF: sub_97E2+1D8j
		mov	bx, [bp+var_6]
		mov	al, [bx+80Ah]
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		mov	ax, 4
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, [bp+var_6]
		mov	dx, 0Bh
		mul	dx
		add	ax, di
		push	ax
		mov	ax, si
		add	ax, 70h	; 'p'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		inc	[bp+var_6]

loc_99B4:				; CODE XREF: sub_97E2+194j
		cmp	[bp+var_6], 7
		jge	short loc_99BD
		jmp	loc_9979
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_99BD:				; CODE XREF: sub_97E2+1D6j
		inc	[bp+var_8]

loc_99C0:				; CODE XREF: sub_97E2+1Ej
		cmp	[bp+var_8], 2
		jge	short loc_99C9
		jmp	loc_9803
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_99C9:				; CODE XREF: sub_97E2+1E2j
					; sub_97E2+1F5j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_99D9
		call	sub_12827
		jmp	short loc_99C9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_99D9:				; CODE XREF: sub_97E2+1EEj
		mov	[bp+var_9], 0
		mov	[bp+var_2], 0
		mov	ax, [bp+arg_0]
		mov	[bp+var_4], ax
		call	sub_F2C7
		mov	[bp+var_8], 0
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		push	ds
		mov	ax, 19C5h
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, [bp+var_4]
		mov	dx, 0Bh
		mul	dx
		add	ax, di
		push	ax
		mov	ax, si
		add	ax, 0FFF0h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_9A2C:				; CODE XREF: sub_97E2+316j
					; sub_97E2+31Ej
		cmp	[bp+var_2], 0
		jz	short loc_9A35
		jmp	loc_9B03
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9A35:				; CODE XREF: sub_97E2+24Ej
		cmp	[bp+var_9], 1Bh
		jnz	short loc_9A3E
		jmp	loc_9B03
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9A3E:				; CODE XREF: sub_97E2+257j
		push	[bp+var_8]
		call	sub_F3F4
		inc	sp
		inc	sp
		mov	[bp+var_9], al
		cmp	[bp+var_9], 0Dh
		jnz	short loc_9A58
		mov	ax, [bp+var_4]
		inc	ax
		mov	[bp+var_2], ax

loc_9A58:				; CODE XREF: sub_97E2+26Dj
		cmp	[bp+var_9], 0FFh
		jz	short loc_9A61
		jmp	loc_9AEF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9A61:				; CODE XREF: sub_97E2+27Aj
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, [bp+var_4]
		mov	dx, 0Bh
		mul	dx
		add	ax, di
		add	ax, 8
		push	ax
		mov	ax, si
		add	ax, 0FFF7h
		push	ax
		mov	ax, [bp+var_4]
		mov	dx, 0Bh
		mul	dx
		add	ax, di
		push	ax
		mov	ax, si
		add	ax, 0FFF0h
		push	ax
		call	sub_4676
		add	sp, 0Ch
		call	sub_12827
		mov	[bp+var_9], al
		cmp	[bp+var_9], 48h	; 'H'
		jnz	short loc_9AB3
		cmp	[bp+var_4], 0
		jz	short loc_9AAE
		dec	[bp+var_4]
		jmp	short loc_9AB3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9AAE:				; CODE XREF: sub_97E2+2C5j
		mov	[bp+var_4], 6

loc_9AB3:				; CODE XREF: sub_97E2+2BFj
					; sub_97E2+2CAj
		cmp	[bp+var_9], 50h	; 'P'
		jnz	short loc_9AC9
		cmp	[bp+var_4], 6
		jge	short loc_9AC4
		inc	[bp+var_4]
		jmp	short loc_9AC9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9AC4:				; CODE XREF: sub_97E2+2DBj
		mov	[bp+var_4], 0

loc_9AC9:				; CODE XREF: sub_97E2+2D5j
					; sub_97E2+2E0j
		push	ds
		mov	ax, 19C5h
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, [bp+var_4]
		mov	dx, 0Bh
		mul	dx
		add	ax, di
		push	ax
		mov	ax, si
		add	ax, 0FFF0h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_9AEF:				; CODE XREF: sub_97E2+27Cj
		inc	[bp+var_8]
		cmp	[bp+var_8], 3Ch	; '<'
		jge	short loc_9AFB
		jmp	loc_9A2C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9AFB:				; CODE XREF: sub_97E2+314j
		mov	[bp+var_8], 0
		jmp	loc_9A2C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9B03:				; CODE XREF: sub_97E2+250j
					; sub_97E2+259j
		call	sub_134DF
		mov	ax, [bp+var_2]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_97E2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_9B11	proc far		; CODE XREF: sub_DE8+ED9P
					; sub_3DEF+31FP

var_2C		= word ptr -2Ch
var_2A		= word ptr -2Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 2Ch
		cmp	word_17D9E, sp
		ja	short loc_9B24
		call	far ptr	errStackOverflow

loc_9B24:				; CODE XREF: sub_9B11+Cj
		mov	[bp+var_2C], 0

loc_9B29:				; CODE XREF: sub_9B11+105j
					; sub_9B11+111j
		push	[bp+var_2C]
		push	cs
		call	near ptr sub_97E2
		inc	sp
		inc	sp
		mov	si, ax
		or	si, si
		jz	short loc_9B3E
		mov	ax, si
		dec	ax
		mov	[bp+var_2C], ax

loc_9B3E:				; CODE XREF: sub_9B11+25j
		mov	ax, si
		cmp	ax, 7		; switch 8 cases
		jbe	short loc_9B48
		jmp	loc_9BEB	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9B48:				; CODE XREF: sub_9B11+32j
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_9B51[bx]	; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_9B51	dw offset loc_9C25	; DATA XREF: sub_9B11+3Br
		dw offset loc_9B61	; jump table for switch	statement
		dw offset loc_9B75
		dw offset loc_9B89
		dw offset loc_9B9D
		dw offset loc_9BB1
		dw offset loc_9BC5
		dw offset loc_9BD9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9B61:				; CODE XREF: sub_9B11+3Bj
					; DATA XREF: sub_9B11:off_9B51o
		push	ds		; case 0x1
		mov	ax, 1AC9h
		push	ax
		push	ss
		lea	ax, [bp+var_2A]
		push	ax
		call	sub_13669
		add	sp, 8
		jmp	short loc_9BEB	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9B75:				; CODE XREF: sub_9B11+3Bj
					; DATA XREF: sub_9B11:off_9B51o
		push	ds		; case 0x2
		mov	ax, 1AD3h
		push	ax
		push	ss
		lea	ax, [bp+var_2A]
		push	ax
		call	sub_13669
		add	sp, 8
		jmp	short loc_9BEB	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9B89:				; CODE XREF: sub_9B11+3Bj
					; DATA XREF: sub_9B11:off_9B51o
		push	ds		; case 0x3
		mov	ax, 1ADEh
		push	ax
		push	ss
		lea	ax, [bp+var_2A]
		push	ax
		call	sub_13669
		add	sp, 8
		jmp	short loc_9BEB	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9B9D:				; CODE XREF: sub_9B11+3Bj
					; DATA XREF: sub_9B11:off_9B51o
		push	ds		; case 0x4
		mov	ax, 1AE3h
		push	ax
		push	ss
		lea	ax, [bp+var_2A]
		push	ax
		call	sub_13669
		add	sp, 8
		jmp	short loc_9BEB	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9BB1:				; CODE XREF: sub_9B11+3Bj
					; DATA XREF: sub_9B11:off_9B51o
		push	ds		; case 0x5
		mov	ax, 1AE9h
		push	ax
		push	ss
		lea	ax, [bp+var_2A]
		push	ax
		call	sub_13669
		add	sp, 8
		jmp	short loc_9BEB	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9BC5:				; CODE XREF: sub_9B11+3Bj
					; DATA XREF: sub_9B11:off_9B51o
		push	ds		; case 0x6
		mov	ax, 1AF0h
		push	ax
		push	ss
		lea	ax, [bp+var_2A]
		push	ax
		call	sub_13669
		add	sp, 8
		jmp	short loc_9BEB	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9BD9:				; CODE XREF: sub_9B11+3Bj
					; DATA XREF: sub_9B11:off_9B51o
		push	ds		; case 0x7
		mov	ax, 1AFAh
		push	ax
		push	ss
		lea	ax, [bp+var_2A]
		push	ax
		call	sub_13669
		add	sp, 8

loc_9BEB:				; CODE XREF: sub_9B11+34j sub_9B11+62j ...
		push	ds		; default
		mov	ax, 1B06h
		push	ax
		push	ss
		lea	ax, [bp+var_2A]
		push	ax
		call	sub_13602
		add	sp, 8
		mov	al, [si+809h]
		mov	ah, 0
		push	ax
		push	ss
		lea	ax, [bp+var_2A]
		push	ax
		push	cs
		call	near ptr sub_950A
		add	sp, 6
		mov	di, ax
		or	di, di
		jnz	short loc_9C19
		jmp	loc_9B29
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9C19:				; CODE XREF: sub_9B11+103j
		mov	ax, di

loc_9C1B:
		add	al, 0FFh

loc_9C1E:
		mov	[si+809h], al
		jmp	loc_9B29
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9C25:				; CODE XREF: sub_9B11+3Bj
					; DATA XREF: sub_9B11:off_9B51o
		mov	sp, bp		; case 0x0
		pop	bp
		pop	di
		pop	si
		retf
sub_9B11	endp

seg003		ends

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg004		segment	byte public 'CODE' use16
		assume cs:seg004
		;org 0Bh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
		push	si
		push	bp

loc_9C2D:
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_9C3A
		call	far ptr	errStackOverflow

loc_9C3A:				; CODE XREF: seg004:0013j
		mov	ax, 1F4h
		push	ax
		call	sub_134B3
		inc	sp
		inc	sp
		xor	si, si
		jmp	short loc_9C4A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9C49:				; CODE XREF: seg004:002Ej
		inc	si

loc_9C4A:				; CODE XREF: seg004:0027j
		cmp	si, 1F4h
		jl	short loc_9C49
		call	sub_134DF
		pop	bp
		pop	si
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_9C58	proc far		; CODE XREF: sub_DE8+531P
					; sub_DE8:loc_1E49P ...
		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_9C68
		call	far ptr	errStackOverflow

loc_9C68:				; CODE XREF: sub_9C58+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_9CD0
		or	di, di
		jz	short loc_9CD0
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax

loc_9CD0:				; CODE XREF: sub_9C58+59j sub_9C58+5Dj
		or	si, si
		jnz	short loc_9D11
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_9D11
		or	di, di
		jz	short loc_9D11
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax

loc_9D11:				; CODE XREF: sub_9C58+7Aj sub_9C58+9Aj ...
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_9C58	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_9D17	proc far		; CODE XREF: sub_DE8+5B6P
					; sub_DE8+1057P ...
		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_9D27
		call	far ptr	errStackOverflow

loc_9D27:				; CODE XREF: sub_9D17+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		inc	word_1A516
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_9D93
		or	di, di
		jnz	short loc_9D93
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax

loc_9D93:				; CODE XREF: sub_9D17+5Dj sub_9D17+61j
		or	si, si
		jnz	short loc_9DD4
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_9DD4
		or	di, di
		jnz	short loc_9DD4
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax

loc_9DD4:				; CODE XREF: sub_9D17+7Ej sub_9D17+9Ej ...
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_9D17	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_9DDA	proc far		; CODE XREF: sub_DE8:loc_146DP
					; sub_23BE:loc_29E3P

var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		cmp	word_17D9E, sp
		ja	short loc_9DEC
		call	far ptr	errStackOverflow

loc_9DEC:				; CODE XREF: sub_9DDA+Bj
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_2], dx
		dec	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		cmp	[bp+var_2], 0
		jz	short loc_9E5B
		or	si, si
		jnz	short loc_9E5B
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax

loc_9E5B:				; CODE XREF: sub_9DDA+62j sub_9DDA+66j
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	di, ax
		cmp	[bp+var_2], 0
		jz	short loc_9E9A
		or	di, di
		jnz	short loc_9E9A
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	di, ax

loc_9E9A:				; CODE XREF: sub_9DDA+A1j sub_9DDA+A5j
		or	di, di
		jz	short loc_9EA3
		mov	si, 2
		jmp	short loc_9EAA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9EA3:				; CODE XREF: sub_9DDA+C2j
		or	si, si
		jz	short loc_9EAA
		mov	si, 1

loc_9EAA:				; CODE XREF: sub_9DDA+C7j sub_9DDA+CBj
		mov	ax, si
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_9DDA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_9EB2	proc far		; CODE XREF: sub_DE8+67BP
					; sub_23BE+61BP

var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		cmp	word_17D9E, sp
		ja	short loc_9EC4
		call	far ptr	errStackOverflow

loc_9EC4:				; CODE XREF: sub_9EB2+Bj
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_2], dx
		inc	word_1A516
		dec	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		cmp	[bp+var_2], 0
		jnz	short loc_9F37
		or	si, si
		jnz	short loc_9F37
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax

loc_9F37:				; CODE XREF: sub_9EB2+66j sub_9EB2+6Aj
		inc	word_1A518
		dec	word_1A516
		inc	word_1A516
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	di, ax
		cmp	[bp+var_2], 0
		jnz	short loc_9F7E
		or	di, di
		jnz	short loc_9F7E
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	di, ax

loc_9F7E:				; CODE XREF: sub_9EB2+ADj sub_9EB2+B1j
		dec	word_1A516
		or	di, di
		jz	short loc_9F8B
		mov	si, 2
		jmp	short loc_9F92
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_9F8B:				; CODE XREF: sub_9EB2+D2j
		or	si, si
		jz	short loc_9F92
		mov	si, 1

loc_9F92:				; CODE XREF: sub_9EB2+D7j sub_9EB2+DBj
		mov	ax, si
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_9EB2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_9F9A	proc far		; CODE XREF: sub_DE8+4A9P sub_DE8+71CP ...

arg_0		= dword	ptr  0Ah
arg_4		= dword	ptr  0Eh

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_9FAA
		call	far ptr	errStackOverflow

loc_9FAA:				; CODE XREF: sub_9F9A+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		les	bx, [bp+arg_0]
		mov	byte ptr es:[bx], 0
		les	bx, [bp+arg_4]
		mov	byte ptr es:[bx], 0
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	di, di
		jz	short loc_A024
		or	si, si
		jnz	short loc_A024
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax

loc_A024:				; CODE XREF: sub_9F9A+6Bj sub_9F9A+6Fj
		or	si, si
		jnz	short loc_A067
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	di, di
		jz	short loc_A06E
		or	si, si
		jnz	short loc_A06E
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax
		jmp	short loc_A06E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_A067:				; CODE XREF: sub_9F9A+8Cj
		les	bx, [bp+arg_0]
		mov	byte ptr es:[bx], 1

loc_A06E:				; CODE XREF: sub_9F9A+ACj sub_9F9A+B0j ...
		mov	al, byte_1A804
		mov	ah, 0
		cmp	ax, si
		jg	short loc_A087
		mov	al, byte_1A805
		mov	ah, 0
		cmp	ax, si
		jl	short loc_A087
		les	bx, [bp+arg_4]
		mov	byte ptr es:[bx], 1

loc_A087:				; CODE XREF: sub_9F9A+DBj sub_9F9A+E4j
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_9F9A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_A08D	proc far		; CODE XREF: sub_DE8+492P sub_DE8+705P ...

arg_0		= dword	ptr  0Ah
arg_4		= dword	ptr  0Eh

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_A09D
		call	far ptr	errStackOverflow

loc_A09D:				; CODE XREF: sub_A08D+9j
		les	bx, [bp+arg_0]
		mov	byte ptr es:[bx], 0
		les	bx, [bp+arg_4]
		mov	byte ptr es:[bx], 0
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		inc	word_1A516
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	di, di
		jnz	short loc_A11B
		or	si, si
		jnz	short loc_A11B
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax

loc_A11B:				; CODE XREF: sub_A08D+6Fj sub_A08D+73j
		or	si, si
		jnz	short loc_A15E
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	di, di
		jnz	short loc_A165
		or	si, si
		jnz	short loc_A165
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		jmp	short loc_A165
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_A15E:				; CODE XREF: sub_A08D+90j
		les	bx, [bp+arg_0]
		mov	byte ptr es:[bx], 1

loc_A165:				; CODE XREF: sub_A08D+B0j sub_A08D+B4j ...
		mov	al, byte_1A804
		mov	ah, 0
		cmp	ax, si
		jg	short loc_A17E
		mov	al, byte_1A805
		mov	ah, 0
		cmp	ax, si
		jl	short loc_A17E
		les	bx, [bp+arg_4]
		mov	byte ptr es:[bx], 1

loc_A17E:				; CODE XREF: sub_A08D+DFj sub_A08D+E8j
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_A08D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_A184	proc far		; CODE XREF: sub_DE8+BD6P
					; sub_DE8+110BP ...

arg_0		= dword	ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_A194
		call	far ptr	errStackOverflow

loc_A194:				; CODE XREF: sub_A184+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_A223
		or	di, di
		jz	short loc_A223
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		inc	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_A223:				; CODE XREF: sub_A184+6Ej sub_A184+72j
		cmp	si, 78h	; 'x'
		jl	short loc_A22E
		cmp	si, 0C7h ; 'Ч'
		jle	short loc_A230

loc_A22E:				; CODE XREF: sub_A184+A2j
		xor	si, si

loc_A230:				; CODE XREF: sub_A184+A8j
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_A184	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_A236	proc far		; CODE XREF: sub_DE8+BC4P
					; sub_DE8+10F9P ...

arg_0		= dword	ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_A246
		call	far ptr	errStackOverflow

loc_A246:				; CODE XREF: sub_A236+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		inc	word_1A516
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_A2D9
		or	di, di
		jnz	short loc_A2D9
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		dec	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_A2D9:				; CODE XREF: sub_A236+72j sub_A236+76j
		cmp	si, 78h	; 'x'
		jl	short loc_A2E4
		cmp	si, 0C7h ; 'Ч'
		jle	short loc_A2E6

loc_A2E4:				; CODE XREF: sub_A236+A6j
		xor	si, si

loc_A2E6:				; CODE XREF: sub_A236+ACj
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_A236	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_A2EC	proc far		; CODE XREF: sub_DE8:loc_1E6EP
					; sub_23BE:loc_31D9P
		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_A2FC
		call	far ptr	errStackOverflow

loc_A2FC:				; CODE XREF: sub_A2EC+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_A364
		or	di, di
		jz	short loc_A364
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax

loc_A364:				; CODE XREF: sub_A2EC+59j sub_A2EC+5Dj
		cmp	si, 4
		jl	short loc_A381
		cmp	si, 17h
		jg	short loc_A381
		mov	ax, si
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5632h], 0
		jnz	short loc_A383

loc_A381:				; CODE XREF: sub_A2EC+7Bj sub_A2EC+80j
		xor	si, si

loc_A383:				; CODE XREF: sub_A2EC+93j
		or	si, si
		jz	short loc_A38A
		jmp	loc_A455
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_A38A:				; CODE XREF: sub_A2EC+99j
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_A3C7
		or	di, di
		jz	short loc_A3C7
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax

loc_A3C7:				; CODE XREF: sub_A2EC+BCj sub_A2EC+C0j
		cmp	si, 4
		jl	short loc_A3E4
		cmp	si, 17h
		jg	short loc_A3E4
		mov	ax, si
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5632h], 0
		jnz	short loc_A3E6

loc_A3E4:				; CODE XREF: sub_A2EC+DEj sub_A2EC+E3j
		xor	si, si

loc_A3E6:				; CODE XREF: sub_A2EC+F6j
		or	si, si
		jnz	short loc_A451
		cmp	word_1A13A, 0
		jz	short loc_A451
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_A42E
		or	di, di
		jz	short loc_A42E
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax

loc_A42E:				; CODE XREF: sub_A2EC+123j
					; sub_A2EC+127j
		cmp	si, 4
		jl	short loc_A44B
		cmp	si, 17h
		jg	short loc_A44B
		mov	ax, si
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5632h], 0
		jnz	short loc_A44D

loc_A44B:				; CODE XREF: sub_A2EC+145j
					; sub_A2EC+14Aj
		xor	si, si

loc_A44D:				; CODE XREF: sub_A2EC+15Dj
		dec	word_1A518

loc_A451:				; CODE XREF: sub_A2EC+FCj
					; sub_A2EC+103j
		dec	word_1A518

loc_A455:				; CODE XREF: sub_A2EC+9Bj
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_A2EC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_A45B	proc far		; CODE XREF: sub_DE8+107CP
					; sub_23BE+E11P
		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_A46B
		call	far ptr	errStackOverflow

loc_A46B:				; CODE XREF: sub_A45B+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		inc	word_1A516
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_A4D7
		or	di, di
		jnz	short loc_A4D7
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax

loc_A4D7:				; CODE XREF: sub_A45B+5Dj sub_A45B+61j
		cmp	si, 4
		jl	short loc_A4F4
		cmp	si, 17h
		jg	short loc_A4F4
		mov	ax, si
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5632h], 0
		jnz	short loc_A4F6

loc_A4F4:				; CODE XREF: sub_A45B+7Fj sub_A45B+84j
		xor	si, si

loc_A4F6:				; CODE XREF: sub_A45B+97j
		or	si, si
		jz	short loc_A4FD
		jmp	loc_A5C8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_A4FD:				; CODE XREF: sub_A45B+9Dj
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_A53A
		or	di, di
		jnz	short loc_A53A
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax

loc_A53A:				; CODE XREF: sub_A45B+C0j sub_A45B+C4j
		cmp	si, 4
		jl	short loc_A557
		cmp	si, 17h
		jg	short loc_A557
		mov	ax, si
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5632h], 0
		jnz	short loc_A559

loc_A557:				; CODE XREF: sub_A45B+E2j sub_A45B+E7j
		xor	si, si

loc_A559:				; CODE XREF: sub_A45B+FAj
		or	si, si
		jnz	short loc_A5C4
		cmp	word_1A13A, 0
		jz	short loc_A5C4
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_A5A1
		or	di, di
		jnz	short loc_A5A1
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax

loc_A5A1:				; CODE XREF: sub_A45B+127j
					; sub_A45B+12Bj
		cmp	si, 4
		jl	short loc_A5BE
		cmp	si, 17h
		jg	short loc_A5BE
		mov	ax, si
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+5632h], 0
		jnz	short loc_A5C0

loc_A5BE:				; CODE XREF: sub_A45B+149j
					; sub_A45B+14Ej
		xor	si, si

loc_A5C0:				; CODE XREF: sub_A45B+161j
		dec	word_1A518

loc_A5C4:				; CODE XREF: sub_A45B+100j
					; sub_A45B+107j
		dec	word_1A518

loc_A5C8:				; CODE XREF: sub_A45B+9Fj
		dec	word_1A516
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_A45B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_A5D2	proc far		; CODE XREF: sub_DE8+A88P
					; sub_23BE+98EP

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_A5E5
		call	far ptr	errStackOverflow

loc_A5E5:				; CODE XREF: sub_A5D2+Cj
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_4], dx
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		mov	di, word_1A516
		mov	ax, word_1A518
		mov	[bp+var_2], ax
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, di
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_A67B
		cmp	[bp+var_4], 0
		jz	short loc_A67B
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, di
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, di
		inc	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		inc	di
		mov	ax, word_1A518
		mov	[bp+var_2], ax

loc_A67B:				; CODE XREF: sub_A5D2+73j sub_A5D2+79j
		cmp	si, 0C8h ; 'Ш'
		jl	short loc_A6AC
		cmp	si, 0FEh ; 'ў'
		jg	short loc_A6AC
		mov	bx, si
		add	bx, 0FF38h
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+3E8Ah]
		cmp	ax, di
		jnz	short loc_A6AE
		mov	bx, si
		add	bx, 0FF38h
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+3E8Ch]
		cmp	ax, [bp+var_2]
		jnz	short loc_A6AE

loc_A6AC:				; CODE XREF: sub_A5D2+ADj sub_A5D2+B3j
		xor	si, si

loc_A6AE:				; CODE XREF: sub_A5D2+C5j sub_A5D2+D8j
		mov	ax, si
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_A5D2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_A6B6	proc far		; CODE XREF: sub_DE8+A76P
					; sub_23BE+97CP

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_A6C9
		call	far ptr	errStackOverflow

loc_A6C9:				; CODE XREF: sub_A6B6+Cj
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_4], dx
		inc	word_1A516
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		mov	di, word_1A516
		mov	ax, word_1A518
		mov	[bp+var_2], ax
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, di
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_A763
		cmp	[bp+var_4], 0
		jnz	short loc_A763
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, di
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, di
		dec	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		dec	di
		mov	ax, word_1A518
		mov	[bp+var_2], ax

loc_A763:				; CODE XREF: sub_A6B6+77j sub_A6B6+7Dj
		cmp	si, 0C8h ; 'Ш'
		jl	short loc_A794
		cmp	si, 0FEh ; 'ў'
		jg	short loc_A794
		mov	bx, si
		add	bx, 0FF38h
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+3E8Ah]
		cmp	ax, di
		jnz	short loc_A796
		mov	bx, si
		add	bx, 0FF38h
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+3E8Ch]
		cmp	ax, [bp+var_2]
		jnz	short loc_A796

loc_A794:				; CODE XREF: sub_A6B6+B1j sub_A6B6+B7j
		xor	si, si

loc_A796:				; CODE XREF: sub_A6B6+C9j sub_A6B6+DCj
		mov	ax, si
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_A6B6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_A79E	proc far		; CODE XREF: sub_DE8+87FP
					; sub_23BE+7C6P

arg_0		= dword	ptr  8

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_A7AD
		call	far ptr	errStackOverflow

loc_A7AD:				; CODE XREF: sub_A79E+8j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		inc	word_1A516
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		inc	word_1A518
		or	si, si
		jz	short loc_A7F9
		xor	ax, ax
		jmp	short loc_A838
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_A7F9:				; CODE XREF: sub_A79E+55j
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A7FA
		mov	ah, 0
		cmp	ax, si
		jg	short loc_A823
		mov	al, byte_1A7FB
		mov	ah, 0
		cmp	ax, si
		jge	short loc_A825

loc_A823:				; CODE XREF: sub_A79E+7Aj
		xor	si, si

loc_A825:				; CODE XREF: sub_A79E+83j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		mov	ax, si

loc_A838:				; CODE XREF: sub_A79E+59j
		pop	bp
		pop	si
		retf
sub_A79E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_A83B	proc far		; CODE XREF: sub_DE8+86DP
					; sub_23BE+7B4P

arg_0		= dword	ptr  8

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_A84A
		call	far ptr	errStackOverflow

loc_A84A:				; CODE XREF: sub_A83B+8j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		inc	word_1A518
		or	si, si
		jz	short loc_A892
		xor	ax, ax
		jmp	short loc_A8D3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_A892:				; CODE XREF: sub_A83B+51j
		xor	si, si
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A7FA
		mov	ah, 0
		cmp	ax, si
		jg	short loc_A8BE
		mov	al, byte_1A7FB
		mov	ah, 0
		cmp	ax, si
		jge	short loc_A8C0

loc_A8BE:				; CODE XREF: sub_A83B+78j
		xor	si, si

loc_A8C0:				; CODE XREF: sub_A83B+81j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		mov	ax, si

loc_A8D3:				; CODE XREF: sub_A83B+55j
		pop	bp
		pop	si
		retf
sub_A83B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_A8D6	proc far		; CODE XREF: sub_DE8+98AP
					; sub_23BE+8CCP

arg_0		= dword	ptr  8

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_A8E5
		call	far ptr	errStackOverflow

loc_A8E5:				; CODE XREF: sub_A8D6+8j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		inc	word_1A516
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		inc	word_1A518
		or	si, si
		jnz	short loc_A95C
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_A95C
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		jmp	short loc_A960
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_A95C:				; CODE XREF: sub_A8D6+4Ej sub_A8D6+6Aj
		xor	ax, ax
		jmp	short loc_A97E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_A960:				; CODE XREF: sub_A8D6+84j
		mov	al, byte_1A7FE
		mov	ah, 0
		cmp	ax, si
		jz	short loc_A96B
		xor	si, si

loc_A96B:				; CODE XREF: sub_A8D6+91j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		mov	ax, si

loc_A97E:				; CODE XREF: sub_A8D6+88j
		pop	bp
		pop	si
		retf
sub_A8D6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_A981	proc far		; CODE XREF: sub_DE8+978P
					; sub_23BE+8BAP

arg_0		= dword	ptr  8

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_A990
		call	far ptr	errStackOverflow

loc_A990:				; CODE XREF: sub_A981+8j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mul	word_1A5AE
		les	bx, dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		inc	word_1A518
		or	si, si
		jnz	short loc_AA03
		mov	ax, word_1A518
		mul	word_1A5AE
		mov	bx, word ptr dword_18398
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		or	si, si
		jnz	short loc_AA03
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		jmp	short loc_AA07
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_AA03:				; CODE XREF: sub_A981+4Aj sub_A981+66j
		xor	ax, ax
		jmp	short loc_AA25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_AA07:				; CODE XREF: sub_A981+80j
		mov	al, byte_1A7FE
		mov	ah, 0
		cmp	ax, si
		jz	short loc_AA12
		xor	si, si

loc_AA12:				; CODE XREF: sub_A981+8Dj
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		mov	ax, si

loc_AA25:				; CODE XREF: sub_A981+84j
		pop	bp
		pop	si
		retf
sub_A981	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_AA28	proc far		; CODE XREF: sub_DE8+F4DP
					; sub_23BE+D0CP

arg_0		= dword	ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_AA38
		call	far ptr	errStackOverflow

loc_AA38:				; CODE XREF: sub_AA28+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A800
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AA91
		mov	al, byte_1A801
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AA93

loc_AA91:				; CODE XREF: sub_AA28+5Ej
		xor	si, si

loc_AA93:				; CODE XREF: sub_AA28+67j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		or	si, si
		jnz	short loc_AAEB
		or	di, di
		jz	short loc_AAEB
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A800
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AAD7
		mov	al, byte_1A801
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AAD9

loc_AAD7:				; CODE XREF: sub_AA28+A4j
		xor	si, si

loc_AAD9:				; CODE XREF: sub_AA28+ADj
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		inc	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_AAEB:				; CODE XREF: sub_AA28+7Ej sub_AA28+82j
		or	si, si
		jz	short loc_AAF2
		jmp	loc_AB7A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_AAF2:				; CODE XREF: sub_AA28+C5j
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A800
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AB20
		mov	al, byte_1A801
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AB22

loc_AB20:				; CODE XREF: sub_AA28+EDj
		xor	si, si

loc_AB22:				; CODE XREF: sub_AA28+F6j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		or	si, si
		jnz	short loc_AB7A
		or	di, di
		jz	short loc_AB7A
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A800
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AB66
		mov	al, byte_1A801
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AB68

loc_AB66:				; CODE XREF: sub_AA28+133j
		xor	si, si

loc_AB68:				; CODE XREF: sub_AA28+13Cj
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		inc	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_AB7A:				; CODE XREF: sub_AA28+C7j
					; sub_AA28+10Dj ...
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_AA28	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_AB80	proc far		; CODE XREF: sub_DE8+F3BP
					; sub_23BE+CFAP

arg_0		= dword	ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_AB90
		call	far ptr	errStackOverflow

loc_AB90:				; CODE XREF: sub_AB80+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		inc	word_1A516
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A800
		mov	ah, 0
		cmp	ax, si
		jg	short loc_ABED
		mov	al, byte_1A801
		mov	ah, 0
		cmp	ax, si
		jge	short loc_ABEF

loc_ABED:				; CODE XREF: sub_AB80+62j
		xor	si, si

loc_ABEF:				; CODE XREF: sub_AB80+6Bj
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		or	si, si
		jnz	short loc_AC47
		or	di, di
		jnz	short loc_AC47
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A800
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AC33
		mov	al, byte_1A801
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AC35

loc_AC33:				; CODE XREF: sub_AB80+A8j
		xor	si, si

loc_AC35:				; CODE XREF: sub_AB80+B1j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		dec	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_AC47:				; CODE XREF: sub_AB80+82j sub_AB80+86j
		or	si, si
		jz	short loc_AC4E
		jmp	loc_ACD6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_AC4E:				; CODE XREF: sub_AB80+C9j
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A800
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AC7C
		mov	al, byte_1A801
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AC7E

loc_AC7C:				; CODE XREF: sub_AB80+F1j
		xor	si, si

loc_AC7E:				; CODE XREF: sub_AB80+FAj
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		or	si, si
		jnz	short loc_ACD6
		or	di, di
		jnz	short loc_ACD6
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A800
		mov	ah, 0
		cmp	ax, si
		jg	short loc_ACC2
		mov	al, byte_1A801
		mov	ah, 0
		cmp	ax, si
		jge	short loc_ACC4

loc_ACC2:				; CODE XREF: sub_AB80+137j
		xor	si, si

loc_ACC4:				; CODE XREF: sub_AB80+140j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		dec	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_ACD6:				; CODE XREF: sub_AB80+CBj
					; sub_AB80+111j ...
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_AB80	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_ACDC	proc far		; CODE XREF: sub_DE8+FBAP
					; sub_23BE+D79P

arg_0		= dword	ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_ACEC
		call	far ptr	errStackOverflow

loc_ACEC:				; CODE XREF: sub_ACDC+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A802
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AD45
		mov	al, byte_1A803
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AD47

loc_AD45:				; CODE XREF: sub_ACDC+5Ej
		xor	si, si

loc_AD47:				; CODE XREF: sub_ACDC+67j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		or	si, si
		jnz	short loc_AD9F
		or	di, di
		jz	short loc_AD9F
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A802
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AD8B
		mov	al, byte_1A803
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AD8D

loc_AD8B:				; CODE XREF: sub_ACDC+A4j
		xor	si, si

loc_AD8D:				; CODE XREF: sub_ACDC+ADj
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		inc	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_AD9F:				; CODE XREF: sub_ACDC+7Ej sub_ACDC+82j
		or	si, si
		jz	short loc_ADA6
		jmp	loc_AE2E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_ADA6:				; CODE XREF: sub_ACDC+C5j
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A802
		mov	ah, 0
		cmp	ax, si
		jg	short loc_ADD4
		mov	al, byte_1A803
		mov	ah, 0
		cmp	ax, si
		jge	short loc_ADD6

loc_ADD4:				; CODE XREF: sub_ACDC+EDj
		xor	si, si

loc_ADD6:				; CODE XREF: sub_ACDC+F6j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		or	si, si
		jnz	short loc_AE2E
		or	di, di
		jz	short loc_AE2E
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A802
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AE1A
		mov	al, byte_1A803
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AE1C

loc_AE1A:				; CODE XREF: sub_ACDC+133j
		xor	si, si

loc_AE1C:				; CODE XREF: sub_ACDC+13Cj
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		inc	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_AE2E:				; CODE XREF: sub_ACDC+C7j
					; sub_ACDC+10Dj ...
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_ACDC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_AE34	proc far		; CODE XREF: sub_DE8+FA8P
					; sub_23BE+D67P

arg_0		= dword	ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_AE44
		call	far ptr	errStackOverflow

loc_AE44:				; CODE XREF: sub_AE34+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		inc	word_1A516
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A802
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AEA1
		mov	al, byte_1A803
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AEA3

loc_AEA1:				; CODE XREF: sub_AE34+62j
		xor	si, si

loc_AEA3:				; CODE XREF: sub_AE34+6Bj
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		or	si, si
		jnz	short loc_AEFB
		or	di, di
		jnz	short loc_AEFB
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A802
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AEE7
		mov	al, byte_1A803
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AEE9

loc_AEE7:				; CODE XREF: sub_AE34+A8j
		xor	si, si

loc_AEE9:				; CODE XREF: sub_AE34+B1j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		dec	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_AEFB:				; CODE XREF: sub_AE34+82j sub_AE34+86j
		or	si, si
		jz	short loc_AF02
		jmp	loc_AF8A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_AF02:				; CODE XREF: sub_AE34+C9j
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A802
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AF30
		mov	al, byte_1A803
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AF32

loc_AF30:				; CODE XREF: sub_AE34+F1j
		xor	si, si

loc_AF32:				; CODE XREF: sub_AE34+FAj
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		or	si, si
		jnz	short loc_AF8A
		or	di, di
		jnz	short loc_AF8A
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	al, byte_1A802
		mov	ah, 0
		cmp	ax, si
		jg	short loc_AF76
		mov	al, byte_1A803
		mov	ah, 0
		cmp	ax, si
		jge	short loc_AF78

loc_AF76:				; CODE XREF: sub_AE34+137j
		xor	si, si

loc_AF78:				; CODE XREF: sub_AE34+140j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		dec	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_AF8A:				; CODE XREF: sub_AE34+CBj
					; sub_AE34+111j ...
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_AE34	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_AF90	proc far		; CODE XREF: sub_DE8+101AP
					; sub_23BE+DD9P

arg_0		= dword	ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_AFA0
		call	far ptr	errStackOverflow

loc_AFA0:				; CODE XREF: sub_AF90+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+784h]
		mov	ah, 0
		cmp	ax, si
		jg	short loc_B007
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+785h]
		mov	ah, 0
		cmp	ax, si
		jge	short loc_B009

loc_B007:				; CODE XREF: sub_AF90+65j
		xor	si, si

loc_B009:				; CODE XREF: sub_AF90+75j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		or	si, si
		jnz	short loc_B06F
		or	di, di
		jz	short loc_B06F
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+784h]
		mov	ah, 0
		cmp	ax, si
		jg	short loc_B05B
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+785h]
		mov	ah, 0
		cmp	ax, si
		jge	short loc_B05D

loc_B05B:				; CODE XREF: sub_AF90+B9j
		xor	si, si

loc_B05D:				; CODE XREF: sub_AF90+C9j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		inc	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_B06F:				; CODE XREF: sub_AF90+8Cj sub_AF90+90j
		or	si, si
		jz	short loc_B076
		jmp	loc_B11A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B076:				; CODE XREF: sub_AF90+E1j
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+784h]
		mov	ah, 0
		cmp	ax, si
		jg	short loc_B0B2
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+785h]
		mov	ah, 0
		cmp	ax, si
		jge	short loc_B0B4

loc_B0B2:				; CODE XREF: sub_AF90+110j
		xor	si, si

loc_B0B4:				; CODE XREF: sub_AF90+120j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		or	si, si
		jnz	short loc_B11A
		or	di, di
		jz	short loc_B11A
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+784h]
		mov	ah, 0
		cmp	ax, si
		jg	short loc_B106
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+785h]
		mov	ah, 0
		cmp	ax, si
		jge	short loc_B108

loc_B106:				; CODE XREF: sub_AF90+164j
		xor	si, si

loc_B108:				; CODE XREF: sub_AF90+174j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		inc	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_B11A:				; CODE XREF: sub_AF90+E3j
					; sub_AF90+137j ...
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_AF90	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_B120	proc far		; CODE XREF: sub_DE8+1008P
					; sub_23BE+DC7P

arg_0		= dword	ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_B130
		call	far ptr	errStackOverflow

loc_B130:				; CODE XREF: sub_B120+9j
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	di, dx
		inc	word_1A516
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+784h]
		mov	ah, 0
		cmp	ax, si
		jg	short loc_B19B
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+785h]
		mov	ah, 0
		cmp	ax, si
		jge	short loc_B19D

loc_B19B:				; CODE XREF: sub_B120+69j
		xor	si, si

loc_B19D:				; CODE XREF: sub_B120+79j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		or	si, si
		jnz	short loc_B203
		or	di, di
		jnz	short loc_B203
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+784h]
		mov	ah, 0
		cmp	ax, si
		jg	short loc_B1EF
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+785h]
		mov	ah, 0
		cmp	ax, si
		jge	short loc_B1F1

loc_B1EF:				; CODE XREF: sub_B120+BDj
		xor	si, si

loc_B1F1:				; CODE XREF: sub_B120+CDj
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		dec	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_B203:				; CODE XREF: sub_B120+90j sub_B120+94j
		or	si, si
		jz	short loc_B20A
		jmp	loc_B2AE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B20A:				; CODE XREF: sub_B120+E5j
		inc	word_1A518
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+784h]
		mov	ah, 0
		cmp	ax, si
		jg	short loc_B246
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+785h]
		mov	ah, 0
		cmp	ax, si
		jge	short loc_B248

loc_B246:				; CODE XREF: sub_B120+114j
		xor	si, si

loc_B248:				; CODE XREF: sub_B120+124j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		or	si, si
		jnz	short loc_B2AE
		or	di, di
		jnz	short loc_B2AE
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+784h]
		mov	ah, 0
		cmp	ax, si
		jg	short loc_B29A
		mov	bx, word_197A2
		shl	bx, 1
		mov	al, [bx+785h]
		mov	ah, 0
		cmp	ax, si
		jge	short loc_B29C

loc_B29A:				; CODE XREF: sub_B120+168j
		xor	si, si

loc_B29C:				; CODE XREF: sub_B120+178j
		mov	ax, word_1A518
		mul	word_1A5AE
		add	ax, word_1A516
		dec	ax
		les	bx, [bp+arg_0]
		mov	es:[bx], ax

loc_B2AE:				; CODE XREF: sub_B120+E7j
					; sub_B120+13Bj ...
		mov	ax, si
		pop	bp
		pop	di
		pop	si
		retf
sub_B120	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_B2B4	proc far		; CODE XREF: sub_DE8:loc_1E93P
					; sub_23BE:loc_31FEP

var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_B2C7
		call	far ptr	errStackOverflow

loc_B2C7:				; CODE XREF: sub_B2B4+Cj
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		inc	ax
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_4], dx
		mov	[bp+var_2], 0
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	di, ax
		xor	si, si
		jmp	short loc_B357
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B319:				; CODE XREF: sub_B2B4+A6j
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		mov	al, [bx+75Eh]
		mov	ah, 0
		cmp	ax, di
		jg	short loc_B356
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		mov	al, [bx+75Fh]
		mov	ah, 0
		cmp	ax, di
		jl	short loc_B356
		mov	[bp+var_2], 1

loc_B356:				; CODE XREF: sub_B2B4+7Fj sub_B2B4+9Bj
		inc	si

loc_B357:				; CODE XREF: sub_B2B4+63j
		cmp	si, 3
		jl	short loc_B319
		cmp	[bp+var_2], 0
		jnz	short loc_B3C8
		cmp	[bp+var_4], 0
		jz	short loc_B3C8
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	di, ax
		xor	si, si
		jmp	short loc_B3C3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B385:				; CODE XREF: sub_B2B4+112j
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		mov	al, [bx+75Eh]
		mov	ah, 0
		cmp	ax, di
		jg	short loc_B3C2
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		mov	al, [bx+75Fh]
		mov	ah, 0
		cmp	ax, di
		jl	short loc_B3C2
		mov	[bp+var_2], 1

loc_B3C2:				; CODE XREF: sub_B2B4+EBj
					; sub_B2B4+107j
		inc	si

loc_B3C3:				; CODE XREF: sub_B2B4+CFj
		cmp	si, 3
		jl	short loc_B385

loc_B3C8:				; CODE XREF: sub_B2B4+ACj sub_B2B4+B2j
		mov	ax, [bp+var_2]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_B2B4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_B3D1	proc far		; CODE XREF: sub_DE8+10A1P
					; sub_23BE+E36P

var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_B3E4
		call	far ptr	errStackOverflow

loc_B3E4:				; CODE XREF: sub_B3D1+Cj
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		inc	ax
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_4], dx
		inc	word_1A516
		mov	[bp+var_2], 0
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	di, ax
		xor	si, si
		jmp	short loc_B478
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B43A:				; CODE XREF: sub_B3D1+AAj
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		mov	al, [bx+75Eh]
		mov	ah, 0
		cmp	ax, di
		jg	short loc_B477
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		mov	al, [bx+75Fh]
		mov	ah, 0
		cmp	ax, di
		jl	short loc_B477
		mov	[bp+var_2], 1

loc_B477:				; CODE XREF: sub_B3D1+83j sub_B3D1+9Fj
		inc	si

loc_B478:				; CODE XREF: sub_B3D1+67j
		cmp	si, 3
		jl	short loc_B43A
		cmp	[bp+var_2], 0
		jnz	short loc_B4E9
		cmp	[bp+var_4], 0
		jnz	short loc_B4E9
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_18394
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	di, ax
		xor	si, si
		jmp	short loc_B4E4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B4A6:				; CODE XREF: sub_B3D1+116j
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		mov	al, [bx+75Eh]
		mov	ah, 0
		cmp	ax, di
		jg	short loc_B4E3
		mov	al, byte_1A5B8
		mov	ah, 0
		mov	dx, 6
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		add	bx, ax
		mov	al, [bx+75Fh]
		mov	ah, 0
		cmp	ax, di
		jl	short loc_B4E3
		mov	[bp+var_2], 1

loc_B4E3:				; CODE XREF: sub_B3D1+EFj
					; sub_B3D1+10Bj
		inc	si

loc_B4E4:				; CODE XREF: sub_B3D1+D3j
		cmp	si, 3
		jl	short loc_B4A6

loc_B4E9:				; CODE XREF: sub_B3D1+B0j sub_B3D1+B6j
		mov	ax, [bp+var_2]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_B3D1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_B4F2	proc far		; CODE XREF: sub_DE8:loc_1EB8P
					; sub_23BE:loc_3223P

var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_B505
		call	far ptr	errStackOverflow

loc_B505:				; CODE XREF: sub_B4F2+Cj
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_4], dx
		mov	[bp+var_2], 0
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	ax, word_1A518
		inc	ax
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	di, ax
		cmp	si, 65h	; 'e'
		jl	short loc_B58D
		cmp	si, 68h	; 'h'
		jg	short loc_B58D
		mov	ax, si
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+563Fh], 4
		jbe	short loc_B58D
		mov	[bp+var_2], 1

loc_B58D:				; CODE XREF: sub_B4F2+7Cj sub_B4F2+81j ...
		cmp	di, 65h	; 'e'
		jl	short loc_B5AF
		cmp	di, 68h	; 'h'
		jg	short loc_B5AF
		mov	ax, di
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+563Fh], 4
		jbe	short loc_B5AF
		mov	[bp+var_2], 1

loc_B5AF:				; CODE XREF: sub_B4F2+9Ej sub_B4F2+A3j ...
		cmp	[bp+var_2], 0
		jz	short loc_B5B8
		jmp	loc_B638
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B5B8:				; CODE XREF: sub_B4F2+C1j
		cmp	[bp+var_4], 0
		jnz	short loc_B5C1
		jmp	loc_B638
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B5C1:				; CODE XREF: sub_B4F2+CAj
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	si, ax
		mov	ax, word_1A518
		inc	ax
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx+1]
		mov	ah, 0
		mov	di, ax
		cmp	si, 65h	; 'e'
		jl	short loc_B616
		cmp	si, 68h	; 'h'
		jg	short loc_B616
		mov	ax, si
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+563Fh], 4
		jbe	short loc_B616
		mov	[bp+var_2], 1

loc_B616:				; CODE XREF: sub_B4F2+105j
					; sub_B4F2+10Aj ...
		cmp	di, 65h	; 'e'
		jl	short loc_B638
		cmp	di, 68h	; 'h'
		jg	short loc_B638
		mov	ax, di
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+563Fh], 4
		jbe	short loc_B638
		mov	[bp+var_2], 1

loc_B638:				; CODE XREF: sub_B4F2+C3j sub_B4F2+CCj ...
		mov	ax, [bp+var_2]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_B4F2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_B641	proc far		; CODE XREF: sub_DE8+10C6P
					; sub_23BE+E5BP

var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_B654
		call	far ptr	errStackOverflow

loc_B654:				; CODE XREF: sub_B641+Cj
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_4], dx
		inc	word_1A516
		mov	[bp+var_2], 0
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	ax, word_1A518
		inc	ax
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, word_1A516
		mov	al, es:[bx]
		mov	ah, 0
		mov	di, ax
		cmp	si, 65h	; 'e'
		jl	short loc_B6E0
		cmp	si, 68h	; 'h'
		jg	short loc_B6E0
		mov	ax, si
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+563Fh], 4
		jbe	short loc_B6E0
		mov	[bp+var_2], 1

loc_B6E0:				; CODE XREF: sub_B641+80j sub_B641+85j ...
		cmp	di, 65h	; 'e'
		jl	short loc_B702
		cmp	di, 68h	; 'h'
		jg	short loc_B702
		mov	ax, di
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+563Fh], 4
		jbe	short loc_B702
		mov	[bp+var_2], 1

loc_B702:				; CODE XREF: sub_B641+A2j sub_B641+A7j ...
		cmp	[bp+var_2], 0
		jz	short loc_B70B
		jmp	loc_B78B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B70B:				; CODE XREF: sub_B641+C5j
		cmp	[bp+var_4], 0
		jz	short loc_B714
		jmp	loc_B78B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B714:				; CODE XREF: sub_B641+CEj
		mov	ax, word_1A518
		mul	word_1A5AE
		les	bx, dword_1839C
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	si, ax
		mov	ax, word_1A518
		inc	ax
		mul	word_1A5AE
		mov	bx, word ptr dword_1839C
		add	bx, ax
		add	bx, word_1A516
		dec	bx
		mov	al, es:[bx]
		mov	ah, 0
		mov	di, ax
		cmp	si, 65h	; 'e'
		jl	short loc_B769
		cmp	si, 68h	; 'h'
		jg	short loc_B769
		mov	ax, si
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+563Fh], 4
		jbe	short loc_B769
		mov	[bp+var_2], 1

loc_B769:				; CODE XREF: sub_B641+109j
					; sub_B641+10Ej ...
		cmp	di, 65h	; 'e'
		jl	short loc_B78B
		cmp	di, 68h	; 'h'
		jg	short loc_B78B
		mov	ax, di
		add	ax, 0FFFCh
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+563Fh], 4
		jbe	short loc_B78B
		mov	[bp+var_2], 1

loc_B78B:				; CODE XREF: sub_B641+C7j sub_B641+D0j ...
		mov	ax, [bp+var_2]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_B641	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_B794	proc far		; CODE XREF: sub_DE8:loc_182EP
					; sub_23BE:loc_2D0AP

var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		cmp	word_17D9E, sp
		ja	short loc_B7A6
		call	far ptr	errStackOverflow

loc_B7A6:				; CODE XREF: sub_B794+Bj
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_2], dx
		xor	si, si
		mov	di, si
		jmp	loc_B861
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B7DD:				; CODE XREF: sub_B794+D2j
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		mov	ax, [bx+4CEh]
		cmp	ax, word_1A516
		jnz	short loc_B818
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		mov	ax, [bx+4D0h]
		cmp	ax, word_1A518
		jnz	short loc_B818
		mov	di, si
		inc	di

loc_B818:				; CODE XREF: sub_B794+63j sub_B794+7Fj
		or	di, di
		jnz	short loc_B860
		cmp	[bp+var_2], 0
		jz	short loc_B860
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		mov	ax, [bx+4CEh]
		mov	dx, word_1A516
		inc	dx
		cmp	ax, dx
		jnz	short loc_B860
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		mov	ax, [bx+4D0h]
		cmp	ax, word_1A518
		jnz	short loc_B860
		mov	di, si
		inc	di

loc_B860:				; CODE XREF: sub_B794+86j sub_B794+8Cj ...
		inc	si

loc_B861:				; CODE XREF: sub_B794+46j
		cmp	si, 0Ah
		jge	short loc_B869
		jmp	loc_B7DD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B869:				; CODE XREF: sub_B794+D0j
		mov	ax, di
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_B794	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_B871	proc far		; CODE XREF: sub_DE8+A3CP
					; sub_23BE+942P

var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		cmp	word_17D9E, sp
		ja	short loc_B883
		call	far ptr	errStackOverflow

loc_B883:				; CODE XREF: sub_B871+Bj
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	word_1A516, ax
		mov	ax, word_1A5A8
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, word_1A5AC
		mov	word_1A518, ax
		mov	ax, word_1A5AA
		add	ax, word_1A5A6
		mov	bx, 2
		cwd
		idiv	bx
		mov	[bp+var_2], dx
		inc	word_1A516
		xor	si, si
		mov	di, si
		jmp	loc_B942
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B8BE:				; CODE XREF: sub_B871+D6j
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		mov	ax, [bx+4CEh]
		cmp	ax, word_1A516
		jnz	short loc_B8F9
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		mov	ax, [bx+4D0h]
		cmp	ax, word_1A518
		jnz	short loc_B8F9
		mov	di, si
		inc	di

loc_B8F9:				; CODE XREF: sub_B871+67j sub_B871+83j
		or	di, di
		jnz	short loc_B941
		cmp	[bp+var_2], 0
		jnz	short loc_B941
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		mov	ax, [bx+4CEh]
		mov	dx, word_1A516
		dec	dx
		cmp	ax, dx
		jnz	short loc_B941
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, si
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		mov	ax, [bx+4D0h]
		cmp	ax, word_1A518
		jnz	short loc_B941
		mov	di, si
		inc	di

loc_B941:				; CODE XREF: sub_B871+8Aj sub_B871+90j ...
		inc	si

loc_B942:				; CODE XREF: sub_B871+4Aj
		cmp	si, 0Ah
		jge	short loc_B94A
		jmp	loc_B8BE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B94A:				; CODE XREF: sub_B871+D4j
		mov	ax, di
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_B871	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_B952	proc far		; CODE XREF: sub_D95E+1ADP
					; sub_D95E+1E2P ...

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_B965
		call	far ptr	errStackOverflow

loc_B965:				; CODE XREF: sub_B952+Cj
		mov	di, [bp+arg_0]
		xor	si, si
		push	si
		push	si
		mov	ax, si
		push	ax
		call	sub_11DA3
		add	sp, 6
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax

loc_B97D:				; CODE XREF: sub_B952+5Dj sub_B952+70j
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		call	sub_11DA3
		add	sp, 6
		sub	ax, [bp+var_4]
		sbb	dx, [bp+var_2]
		push	dx
		push	ax
		mov	ax, di
		cwd
		pop	bx
		pop	cx
		cmp	cx, dx
		jg	short loc_B9C7
		jl	short loc_B9A1
		cmp	bx, ax
		jnb	short loc_B9C7

loc_B9A1:				; CODE XREF: sub_B952+49j
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_B9C7
		cmp	byte_18044, 0
		jz	short loc_B97D
		call	sub_7D5D
		cmp	byte_17E3A, 0
		jnz	short loc_B9C4
		cmp	byte_1A104, 0
		jz	short loc_B97D

loc_B9C4:				; CODE XREF: sub_B952+69j
		mov	si, 1

loc_B9C7:				; CODE XREF: sub_B952+47j sub_B952+4Dj ...
		call	sub_12B2C
		or	ax, ax
		jz	short loc_B9DA
		mov	si, 1
		call	sub_12827
		jmp	short loc_B9C7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_B9DA:				; CODE XREF: sub_B952+7Cj
		mov	ax, si
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_B952	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_B9E2	proc far		; CODE XREF: sub_7F60+16P
					; sub_7F60:loc_82DCP ...
		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_B9F1
		call	far ptr	errStackOverflow

loc_B9F1:				; CODE XREF: sub_B9E2+8j
		mov	ax, 1
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		mov	ax, 0Ah
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 2710h

loc_BA61:				; CODE XREF: sub_B9E2+A1j
		or	si, si
		jle	short loc_BA85
		cmp	byte_1A13E, 0
		jz	short loc_BA80
		call	sub_12FD1
		cwd
		idiv	si
		add	dx, 1F4h
		push	dx
		call	sub_134B3
		inc	sp
		inc	sp

loc_BA80:				; CODE XREF: sub_B9E2+88j
		sub	si, 19h
		jmp	short loc_BA61
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_BA85:				; CODE XREF: sub_B9E2+81j
		call	sub_134DF
		pop	bp
		pop	si
		retf
sub_B9E2	endp ; sp = -0Ah


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_BA8D	proc far		; CODE XREF: sub_D95E+1FAP
					; sub_D95E+216P ...

var_2		= word ptr -2
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= word ptr  0Eh
arg_6		= word ptr  10h
arg_8		= dword	ptr  12h

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		cmp	word_17D9E, sp
		ja	short loc_BA9F
		call	far ptr	errStackOverflow

loc_BA9F:				; CODE XREF: sub_BA8D+Bj
		mov	di, [bp+arg_0]
		mov	byte ptr [bp+var_2+1], 0

loc_BAA6:				; CODE XREF: sub_BA8D+55j
		les	bx, [bp+arg_8]
		cmp	byte ptr es:[bx], 0
		jz	short loc_BAE4
		mov	al, es:[bx]
		mov	byte ptr [bp+var_2], al
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	di
		call	sub_D3D2
		add	sp, 0Ch
		call	sub_134DF
		xor	si, si
		jmp	short loc_BAD6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_BAD5:				; CODE XREF: sub_BA8D+4Dj
		inc	si

loc_BAD6:				; CODE XREF: sub_BA8D+46j
		cmp	si, 1F40h
		jb	short loc_BAD5
		add	di, 8
		inc	word ptr [bp+arg_8]
		jmp	short loc_BAA6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_BAE4:				; CODE XREF: sub_BA8D+20j
		call	sub_134DF
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_BA8D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_BAEF	proc far		; CODE XREF: sub_DE8+F12P
					; sub_3DEF+369P

var_5C		= word ptr -5Ch
var_5A		= word ptr -5Ah
var_58		= word ptr -58h
var_56		= word ptr -56h
var_54		= word ptr -54h
var_52		= word ptr -52h

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 5Ch
		cmp	word_17D9E, sp
		ja	short loc_BB02
		call	far ptr	errStackOverflow

loc_BB02:				; CODE XREF: sub_BAEF+Cj
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_58], dx
		mov	[bp+var_5A], ax
		or	ax, dx
		jnz	short loc_BB28
		push	ds
		mov	ax, 1B0Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_BB28:				; CODE XREF: sub_BAEF+2Aj
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_54], dx
		mov	[bp+var_56], ax
		or	ax, dx
		jnz	short loc_BB4E
		push	ds
		mov	ax, 1B2Dh
		push	ax
		call	sub_6927
		add	sp, 4

loc_BB4E:				; CODE XREF: sub_BAEF+50j
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 1B4Fh
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	di, ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		push	ds
		mov	ax, 553Ah
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_19700
		push	word_196FE
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1976C
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_1976C
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_BBDF
		push	ds
		mov	ax, 1B5Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_BBDF:				; CODE XREF: sub_BAEF+E1j
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 1B6Eh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 50h	; 'P'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 1B83h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BA8h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 32h	; '2'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BCBh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BEFh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 46h	; 'F'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	al, byte_149CA
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 64h	; 'd'
		push	ax
		mov	ax, 60h	; '`'
		push	ax
		mov	al, byte_149CA
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		call	sub_13692
		add	sp, 4
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	dx, ax
		pop	ax
		sub	ax, dx
		mov	bx, 2
		cwd
		idiv	bx
		add	ax, 2Ch	; ','
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	al, byte_149CB
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 64h	; 'd'
		push	ax
		mov	ax, 60h	; '`'
		push	ax
		mov	al, byte_149CB
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		call	sub_13692
		add	sp, 4
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	dx, ax
		pop	ax
		sub	ax, dx
		mov	bx, 2
		cwd
		idiv	bx
		add	ax, 0B4h ; 'Д'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	al, byte_149CC
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 55h	; 'U'
		push	ax
		mov	ax, 60h	; '`'
		push	ax
		mov	al, byte_149CC
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		call	sub_13692
		add	sp, 4
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	dx, ax
		pop	ax
		sub	ax, dx
		mov	bx, 2
		cwd
		idiv	bx
		add	ax, 6Eh	; 'n'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_BDBD:				; CODE XREF: sub_BAEF+2DCj
		call	sub_12B2C
		or	ax, ax
		jz	short loc_BDCD
		call	sub_12827
		jmp	short loc_BDBD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_BDCD:				; CODE XREF: sub_BAEF+2D5j
					; sub_BAEF+2EAj
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_BDCD
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_19704
		push	word_19702
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1976E
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_1976E
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_BE3D
		push	ds
		mov	ax, 1B5Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_BE3D:				; CODE XREF: sub_BAEF+33Fj
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 1B6Eh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 50h	; 'P'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 1C05h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1C28h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 32h	; '2'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1C4Ah
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1C6Eh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 46h	; 'F'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1C90h
		push	ax
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	al, byte_149CD
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		call	sub_13602
		add	sp, 8
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 57h	; 'W'
		push	ax
		mov	ax, 140h
		push	ax
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		call	sub_13692
		add	sp, 4
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	dx, ax
		pop	ax
		sub	ax, dx
		mov	bx, 2
		cwd
		idiv	bx
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_BF7A:				; CODE XREF: sub_BAEF+499j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_BF8A
		call	sub_12827
		jmp	short loc_BF7A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_BF8A:				; CODE XREF: sub_BAEF+492j
					; sub_BAEF+4A7j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_BF8A
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_19708
		push	word_19706
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_19770
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_19770
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_BFFA
		push	ds
		mov	ax, 1B5Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_BFFA:				; CODE XREF: sub_BAEF+4FCj
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 1B6Eh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 50h	; 'P'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 1C9Bh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1CBDh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 32h	; '2'
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1CE0h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1D04h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 46h	; 'F'
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1D24h
		push	ax
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	al, byte_149CE
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		call	sub_13602
		add	sp, 8
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 57h	; 'W'
		push	ax
		mov	ax, 140h
		push	ax
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		call	sub_13692
		add	sp, 4
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	dx, ax
		pop	ax
		sub	ax, dx
		mov	bx, 2
		cwd
		idiv	bx
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_C137:				; CODE XREF: sub_BAEF+656j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_C147
		call	sub_12827
		jmp	short loc_C137
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_C147:				; CODE XREF: sub_BAEF+64Fj
					; sub_BAEF+664j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_C147
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_19710
		push	word_1970E
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_19774
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_19774
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_C1B7
		push	ds
		mov	ax, 1B5Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_C1B7:				; CODE XREF: sub_BAEF+6B9j
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 1B6Eh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 50h	; 'P'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 1D31h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1D54h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 32h	; '2'
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1D75h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1D93h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 46h	; 'F'
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1DB5h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_C2A3:				; CODE XREF: sub_BAEF+7C2j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_C2B3
		call	sub_12827
		jmp	short loc_C2A3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_C2B3:				; CODE XREF: sub_BAEF+7BBj
					; sub_BAEF+7D0j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_C2B3
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_1970C
		push	word_1970A
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_19772
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_19772
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_C323
		push	ds
		mov	ax, 1B5Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_C323:				; CODE XREF: sub_BAEF+825j
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 1B6Eh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 50h	; 'P'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 1DD7h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1DF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 32h	; '2'
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1E1Dh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_C3D7:				; CODE XREF: sub_BAEF+8F6j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_C3E7
		call	sub_12827
		jmp	short loc_C3D7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_C3E7:				; CODE XREF: sub_BAEF+8EFj
					; sub_BAEF+904j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_C3E7
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_19714
		push	word_19712
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_19776
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_19776
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_C457
		push	ds
		mov	ax, 1B5Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_C457:				; CODE XREF: sub_BAEF+959j
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h

loc_C47F:				; CODE XREF: sub_BAEF+99Ej
		call	sub_12B2C
		or	ax, ax
		jz	short loc_C48F
		call	sub_12827
		jmp	short loc_C47F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_C48F:				; CODE XREF: sub_BAEF+997j
		push	ds
		mov	ax, 1B6Eh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 50h	; 'P'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 1E3Ch
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1E60h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 32h	; '2'
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1E81h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1EA4h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 46h	; 'F'
		push	ax
		mov	ax, 14h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_C537:				; CODE XREF: sub_BAEF+A54j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_C537
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_196FC
		push	word_196FA
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_C5A7
		push	ds
		mov	ax, 1B5Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_C5A7:				; CODE XREF: sub_BAEF+AA9j
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 1EC8h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 68h	; 'h'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 1ED7h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1EE6h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1F0Bh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 46h	; 'F'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1F2Fh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1F4Eh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 5Ah	; 'Z'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1F73h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 64h	; 'd'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1F98h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 6Eh	; 'n'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1FB9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 78h	; 'x'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1FD7h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 82h	; ''
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_C703:				; CODE XREF: sub_BAEF+C22j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_C713
		call	sub_12827
		jmp	short loc_C703
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_C713:				; CODE XREF: sub_BAEF+C1Bj
					; sub_BAEF+C30j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_C713
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_196FC
		push	word_196FA
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_C783
		push	ds
		mov	ax, 1B5Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_C783:				; CODE XREF: sub_BAEF+C85j
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 1EC8h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 68h	; 'h'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 1FF3h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2003h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2028h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 46h	; 'F'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 204Dh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2069h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 5Ah	; 'Z'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 208Bh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 64h	; 'd'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 20AEh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 6Eh	; 'n'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 20B4h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 78h	; 'x'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 20D3h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 82h	; ''
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 20F4h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 8Ch	; ''
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2115h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 96h	; ''
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2138h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 0A0h ; ' '
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_C933:				; CODE XREF: sub_BAEF+E52j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_C943
		call	sub_12827
		jmp	short loc_C933
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_C943:				; CODE XREF: sub_BAEF+E4Bj
					; sub_BAEF+E60j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_C943
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_196FC
		push	word_196FA
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_C9B3
		push	ds
		mov	ax, 1B5Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_C9B3:				; CODE XREF: sub_BAEF+EB5j
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 1EC8h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 68h	; 'h'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 2159h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2168h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2189h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 46h	; 'F'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 21ACh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 21CEh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 5Ah	; 'Z'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 21EDh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 64h	; 'd'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 220Dh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 6Eh	; 'n'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_CAD7:				; CODE XREF: sub_BAEF+FF6j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_CAE7
		call	sub_12827
		jmp	short loc_CAD7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_CAE7:				; CODE XREF: sub_BAEF+FEFj
					; sub_BAEF+1004j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_CAE7
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_196FC
		push	word_196FA
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_CB57
		push	ds
		mov	ax, 1B5Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_CB57:				; CODE XREF: sub_BAEF+1059j
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 1EC8h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 68h	; 'h'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 2229h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2230h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2255h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 46h	; 'F'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2279h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2296h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 64h	; 'd'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 22B9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 6Eh	; 'n'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 22DBh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 78h	; 'x'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_CC7B:				; CODE XREF: sub_BAEF+119Aj
		call	sub_12B2C
		or	ax, ax
		jz	short loc_CC8B
		call	sub_12827
		jmp	short loc_CC7B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_CC8B:				; CODE XREF: sub_BAEF+1193j
					; sub_BAEF+11A8j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_CC8B
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_196FC
		push	word_196FA
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_CCFB
		push	ds
		mov	ax, 22FDh
		push	ax
		call	sub_6927
		add	sp, 4

loc_CCFB:				; CODE XREF: sub_BAEF+11FDj
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 1EC8h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 68h	; 'h'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 230Fh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2324h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2348h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 46h	; 'F'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 236Bh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 238Fh
		push	ax
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	al, byte_149CF
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		call	sub_13602
		add	sp, 8
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 64h	; 'd'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 23A2h
		push	ax
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	al, byte_149D0
		mov	ah, 0
		mov	bx, ax
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+7C4h]
		push	word ptr [bx+7C2h]
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		call	sub_13602
		add	sp, 8
		push	ss
		lea	ax, [bp+var_52]
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 6Eh	; 'n'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_CE67:				; CODE XREF: sub_BAEF+1386j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_CE77
		call	sub_12827
		jmp	short loc_CE67
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_CE77:				; CODE XREF: sub_BAEF+137Fj
					; sub_BAEF+1394j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_CE77
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_196FC
		push	word_196FA
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_CEE7
		push	ds
		mov	ax, 1B5Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_CEE7:				; CODE XREF: sub_BAEF+13E9j
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 1EC8h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 68h	; 'h'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 23B5h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 23C3h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 23E8h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 46h	; 'F'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 240Dh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2430h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 5Ah	; 'Z'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2450h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 64h	; 'd'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2474h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 6Eh	; 'n'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2495h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 78h	; 'x'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_D027:				; CODE XREF: sub_BAEF+1546j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_D037
		call	sub_12827
		jmp	short loc_D027
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D037:				; CODE XREF: sub_BAEF+153Fj
					; sub_BAEF+1554j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_D037
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_196FC
		push	word_196FA
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_58]
		push	[bp+var_5A]
		push	word_1976A
		push	[bp+var_54]
		push	[bp+var_56]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_5C], ax
		or	ax, ax
		jnz	short loc_D0A7
		push	ds
		mov	ax, 1B5Ch
		push	ax
		call	sub_6927
		add	sp, 4

loc_D0A7:				; CODE XREF: sub_BAEF+15A9j
		push	[bp+var_58]
		push	[bp+var_5A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 1EC8h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 68h	; 'h'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		add	si, 14h
		push	ds
		mov	ax, 24ACh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, 28h	; '('
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 24C7h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 24ECh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 46h	; 'F'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2511h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 50h	; 'P'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2535h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 5Ah	; 'Z'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2557h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 64h	; 'd'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2577h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 78h	; 'x'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2597h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 82h	; ''
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 25BBh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 96h	; ''
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 1BF9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_D203:				; CODE XREF: sub_BAEF+1722j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_D213
		call	sub_12827
		jmp	short loc_D203
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D213:				; CODE XREF: sub_BAEF+171Bj
					; sub_BAEF+1730j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_D213
		push	di
		call	sub_11DD6
		inc	sp
		inc	sp
		push	[bp+var_54]
		push	[bp+var_56]
		call	sub_12481
		add	sp, 4
		push	[bp+var_58]
		push	[bp+var_5A]
		call	sub_12481
		add	sp, 4
		call	sub_12B2C
		or	ax, ax
		jz	short loc_D25E

loc_D24E:				; CODE XREF: sub_BAEF:loc_D25Cj
		call	sub_12B2C
		or	ax, ax
		jz	short loc_D25E
		call	sub_12827

loc_D25C:
		jmp	short loc_D24E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D25E:				; CODE XREF: sub_BAEF+175Dj
					; sub_BAEF+1766j
		mov	sp, bp

loc_D260:
		pop	bp
		pop	di
		pop	si
		retf
sub_BAEF	endp

seg004		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg005		segment	byte public 'CODE' use16
		assume cs:seg005
		;org 4
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_D264	proc far		; CODE XREF: sub_3DEF+8DP
		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_D273

loc_D26E:
		call	far ptr	errStackOverflow

loc_D273:				; CODE XREF: sub_D264+8j
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 25DEh
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	si, ax
		mov	ax, 2D0h
		push	ax
		push	word ptr dword_197DE+2
		push	word ptr dword_197DE
		push	si
		call	sub_12FF7
		add	sp, 8
		push	si
		call	sub_11DD6
		inc	sp
		inc	sp
		pop	bp
		pop	si
		retf
sub_D264	endp ; sp = -2


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_D2A6	proc far		; CODE XREF: sub_D3D2+22p sub_D3D2+37p

var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_9		= byte ptr -9
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= byte ptr  0Eh
arg_6		= dword	ptr  10h

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 12h
		cmp	word_17D9E, sp
		ja	short loc_D2B9
		call	far ptr	errStackOverflow

loc_D2B9:				; CODE XREF: sub_D2A6+Cj
		mov	al, 8
		mov	dx, 3CEh
		out	dx, al		; EGA: graph 1 and 2 addr reg:
					; bit mask
					; Bits 0-7 select bits to be masked in all planes
		mov	al, 2
		mov	dx, 3C4h
		out	dx, al		; EGA: sequencer address reg
					; map mask: data bits 0-3 enable writes	to bit planes 0-3
		push	word ptr [bp+arg_6+2]
		push	word ptr [bp+arg_6]
		call	sub_13692
		add	sp, 4
		mov	[bp+var_12], ax
		xor	di, di

loc_D2D8:				; CODE XREF: sub_D2A6+123j
		cmp	[bp+var_12], 0
		jnz	short loc_D2E1
		jmp	loc_D3CC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D2E1:				; CODE XREF: sub_D2A6+36j
		les	bx, [bp+arg_6]
		cmp	byte ptr es:[bx+di], 21h ; '!'
		jnb	short loc_D2ED
		jmp	loc_D3C5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D2ED:				; CODE XREF: sub_D2A6+42j
		cmp	byte ptr es:[bx+di], 7Ah ; 'z'
		jbe	short loc_D2F6
		jmp	loc_D3C5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D2F6:				; CODE XREF: sub_D2A6+4Bj
		mov	ax, [bp+arg_0]
		shr	ax, 1
		shr	ax, 1
		shr	ax, 1
		mov	[bp+var_10], ax
		mov	ax, [bp+arg_0]
		mov	dx, [bp+var_10]
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		sub	ax, dx
		mov	[bp+var_E], ax
		mov	ax, 8
		sub	ax, [bp+var_E]
		mov	[bp+var_C], ax
		mov	al, es:[bx+di]
		mov	ah, 0
		add	ax, 0FFDFh
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		les	bx, dword_197DE
		add	bx, ax
		mov	word ptr [bp+var_8+2], es
		mov	word ptr [bp+var_8], bx
		mov	ax, [bp+arg_2]
		mov	dx, 28h	; '('
		mul	dx
		les	bx, dword_1A1C0
		add	bx, ax
		add	bx, [bp+var_10]
		add	bx, di
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		mov	si, 8

loc_D352:				; CODE XREF: sub_D2A6+11Dj
		or	si, si
		jz	short loc_D3C5
		les	bx, [bp+var_8]
		mov	al, es:[bx]
		mov	ah, 0
		mov	cx, [bp+var_E]
		sar	ax, cl
		mov	[bp+var_9], al
		mov	al, [bp+var_9]
		mov	dx, 3CFh
		out	dx, al		; EGA port: graphics controller	data register
		les	bx, [bp+var_4]
		mov	al, es:[bx]
		mov	byte_196F8, al
		mov	al, 0FFh
		mov	dx, 3C5h
		out	dx, al		; EGA port: sequencer data register
		mov	byte ptr es:[bx], 0
		mov	al, [bp+arg_4]
		out	dx, al		; EGA port: sequencer data register
		mov	byte ptr es:[bx], 0FFh
		inc	word ptr [bp+var_4]
		les	bx, [bp+var_8]
		mov	al, es:[bx]
		mov	cx, [bp+var_C]
		shl	al, cl
		mov	[bp+var_9], al
		mov	al, [bp+var_9]
		mov	dx, 3CFh
		out	dx, al		; EGA port: graphics controller	data register
		les	bx, [bp+var_4]
		mov	al, es:[bx]
		mov	byte_196F8, al
		mov	al, 0FFh
		mov	dx, 3C5h
		out	dx, al		; EGA port: sequencer data register
		mov	byte ptr es:[bx], 0
		mov	al, [bp+arg_4]
		out	dx, al		; EGA port: sequencer data register
		mov	byte ptr es:[bx], 0FFh
		inc	word ptr [bp+var_8]
		add	word ptr [bp+var_4], 27h ; '''
		dec	si
		jmp	short loc_D352
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D3C5:				; CODE XREF: sub_D2A6+44j sub_D2A6+4Dj ...
		dec	[bp+var_12]
		inc	di
		jmp	loc_D2D8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D3CC:				; CODE XREF: sub_D2A6+38j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_D2A6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_D3D2	proc far		; CODE XREF: sub_3634+56FP
					; sub_3634+5A0P ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h

		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_D3E0
		call	far ptr	errStackOverflow

loc_D3E0:				; CODE XREF: sub_D3D2+7j
		push	[bp+arg_A]
		push	[bp+arg_8]
		push	[bp+arg_6]
		mov	ax, [bp+arg_2]
		inc	ax
		push	ax
		mov	ax, [bp+arg_0]
		inc	ax
		push	ax
		push	cs
		call	near ptr sub_D2A6
		mov	sp, bp
		push	[bp+arg_A]
		push	[bp+arg_8]
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_D2A6
		mov	sp, bp
		pop	bp
		retf
sub_D3D2	endp

seg005		ends

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg006		segment	byte public 'CODE' use16
		assume cs:seg006
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 7Ch
		cmp	word_17D9E, sp
		ja	short loc_D423

loc_D41E:
		call	far ptr	errStackOverflow

loc_D423:				; CODE XREF: seg006:000Cj
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp-76h], dx
		mov	[bp-78h], ax
		or	ax, dx
		jnz	short loc_D449
		push	ds
		mov	ax, 25EDh
		push	ax
		call	sub_6927
		add	sp, 4

loc_D449:				; CODE XREF: seg006:002Aj
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp-72h], dx
		mov	[bp-74h], ax
		or	ax, dx
		jnz	short loc_D46F
		push	ds
		mov	ax, 260Eh
		push	ax
		call	sub_6927
		add	sp, 4

loc_D46F:				; CODE XREF: seg006:0050j
		push	ds
		mov	ax, 2630h
		push	ax
		call	sub_13A4B
		add	sp, 4
		mov	ax, 180h
		push	ax
		mov	ax, 8100h
		push	ax
		push	ds
		mov	ax, 2630h
		push	ax
		call	sub_12E18
		add	sp, 8
		mov	[bp-7Ch], ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		push	ds
		mov	ax, 553Ah
		push	ax
		push	word ptr [bp-7Ch]
		call	sub_14020
		add	sp, 8
		mov	word ptr [bp-6], 0
		mov	word ptr [bp-8], 0A8h ;	'Ј'
		mov	word ptr [bp-70h], 0
		jmp	loc_D5D4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D4BA:				; CODE XREF: seg006:01CAj
		push	ds
		mov	ax, 263Dh
		push	ax
		push	ss
		lea	ax, [bp-6Eh]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp-1Ch]
		push	ax
		mov	ax, [bp-70h]
		inc	ax
		push	ax
		call	sub_12BDF
		add	sp, 8
		push	dx
		push	ax
		push	ss
		lea	ax, [bp-6Eh]
		push	ax
		call	sub_13602
		add	sp, 8
		push	ds
		mov	ax, 263Fh
		push	ax
		push	ss
		lea	ax, [bp-6Eh]
		push	ax
		call	sub_13602
		add	sp, 8
		mov	ax, 8004h
		push	ax
		push	ss
		lea	ax, [bp-6Eh]
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	si, ax
		mov	ax, 7D00h
		push	ax
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		push	si
		call	sub_12FF7
		add	sp, 8
		push	si
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 7D00h
		push	ax
		push	word ptr [bp-76h]
		push	word ptr [bp-78h]
		push	ax
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		call	sub_FF99
		add	sp, 0Ch
		mov	[bp-7Ah], ax
		or	ax, ax
		jnz	short loc_D58E
		push	ds
		mov	ax, 2644h
		push	ax
		call	sub_6927
		add	sp, 4

loc_D58E:				; CODE XREF: seg006:016Fj
		mov	dx, [bp-6]
		mov	ax, [bp-8]
		mov	bx, [bp-70h]
		shl	bx, 1
		shl	bx, 1
		mov	[bx+553Ch], dx
		mov	[bx+553Ah], ax
		mov	ax, [bp-7Ah]
		mov	bx, [bp-70h]
		shl	bx, 1
		mov	[bx+55AAh], ax
		xor	dx, dx
		add	ax, [bp-8]
		adc	dx, [bp-6]
		mov	[bp-6],	dx
		mov	[bp-8],	ax
		push	word ptr [bp-7Ah]
		push	word ptr [bp-76h]
		push	word ptr [bp-78h]
		push	word ptr [bp-7Ch]
		call	sub_14020
		add	sp, 8
		inc	word ptr [bp-70h]

loc_D5D4:				; CODE XREF: seg006:00A7j
		cmp	word ptr [bp-70h], 0Dh
		jge	short loc_D5DD
		jmp	loc_D4BA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D5DD:				; CODE XREF: seg006:01C8j
		mov	word ptr [bp-70h], 0
		jmp	loc_D6D1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D5E5:				; CODE XREF: seg006:02C7j
		push	ds
		mov	ax, 2654h
		push	ax
		push	ss

loc_D5EB:
		lea	ax, [bp-6Eh]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp-1Ch]
		push	ax
		mov	ax, [bp-70h]
		inc	ax
		push	ax
		call	sub_12BDF
		add	sp, 8
		push	dx
		push	ax
		push	ss
		lea	ax, [bp-6Eh]
		push	ax
		call	sub_13602
		add	sp, 8
		push	ds
		mov	ax, 2638h
		push	ax
		push	ss
		lea	ax, [bp-6Eh]
		push	ax
		call	sub_13602
		add	sp, 8
		mov	ax, 8004h
		push	ax
		push	ss
		lea	ax, [bp-6Eh]
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	si, ax
		mov	ax, 2
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	si
		call	sub_12B32
		add	sp, 8
		push	si
		call	sub_136AB
		inc	sp
		inc	sp
		mov	[bp-2],	dx
		mov	[bp-4],	ax
		mov	di, ax
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		push	si
		call	sub_12B32
		add	sp, 8
		push	di
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		push	si
		call	sub_12FF7
		add	sp, 8
		push	si
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	dx, [bp-6]
		mov	ax, [bp-8]
		mov	bx, [bp-70h]
		add	bx, 0Dh
		shl	bx, 1
		shl	bx, 1
		mov	[bx+553Ch], dx
		mov	[bx+553Ah], ax
		mov	bx, [bp-70h]
		add	bx, 0Dh
		shl	bx, 1
		mov	[bx+55AAh], di
		mov	ax, di
		xor	dx, dx
		add	ax, [bp-8]
		adc	dx, [bp-6]
		mov	[bp-6],	dx
		mov	[bp-8],	ax
		push	di
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		push	word ptr [bp-7Ch]
		call	sub_14020
		add	sp, 8
		inc	word ptr [bp-70h]

loc_D6D1:				; CODE XREF: seg006:01D2j
		cmp	word ptr [bp-70h], 5
		jge	short loc_D6DA
		jmp	loc_D5E5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_D6DA:				; CODE XREF: seg006:02C5j
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 265Bh
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	si, ax
		mov	ax, 2
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	si
		call	sub_12B32
		add	sp, 8
		push	si
		call	sub_136AB
		inc	sp
		inc	sp
		mov	[bp-2],	dx
		mov	[bp-4],	ax
		mov	di, ax
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		push	si
		call	sub_12B32
		add	sp, 8
		push	di
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		push	si
		call	sub_12FF7
		add	sp, 8
		push	si
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	dx, [bp-6]
		mov	ax, [bp-8]
		mov	word_19744, dx
		mov	word_19742, ax
		mov	word_1978E, di
		mov	ax, di
		xor	dx, dx
		add	ax, [bp-8]
		adc	dx, [bp-6]
		mov	[bp-6],	dx
		mov	[bp-8],	ax
		push	di
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		push	word ptr [bp-7Ch]
		call	sub_14020
		add	sp, 8
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 2663h
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	si, ax
		mov	ax, 2
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	si
		call	sub_12B32
		add	sp, 8
		push	si
		call	sub_136AB
		inc	sp
		inc	sp
		mov	[bp-2],	dx
		mov	[bp-4],	ax
		mov	di, ax

loc_D79B:
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		push	si
		call	sub_12B32
		add	sp, 8
		push	di
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		push	si
		call	sub_12FF7
		add	sp, 8
		push	si
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	dx, [bp-6]
		mov	ax, [bp-8]
		mov	word_19748, dx
		mov	word_19746, ax
		mov	word_19790, di
		mov	ax, di
		xor	dx, dx
		add	ax, [bp-8]
		adc	dx, [bp-6]
		mov	[bp-6],	dx
		mov	[bp-8],	ax
		push	di
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		push	word ptr [bp-7Ch]
		call	sub_14020
		add	sp, 8
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 266Ch
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	si, ax
		mov	ax, 2
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	si
		call	sub_12B32
		add	sp, 8
		push	si
		call	sub_136AB
		inc	sp
		inc	sp
		mov	[bp-2],	dx
		mov	[bp-4],	ax
		mov	di, ax
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		push	si
		call	sub_12B32
		add	sp, 8
		push	di
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		push	si
		call	sub_12FF7
		add	sp, 8
		push	si
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	dx, [bp-6]
		mov	ax, [bp-8]
		mov	word_1974C, dx
		mov	word_1974A, ax
		mov	word_19792, di
		mov	ax, di
		xor	dx, dx
		add	ax, [bp-8]
		adc	dx, [bp-6]
		mov	[bp-6],	dx
		mov	[bp-8],	ax
		push	di
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		push	word ptr [bp-7Ch]
		call	sub_14020
		add	sp, 8
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 2675h
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	si, ax
		mov	ax, 2
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	si
		call	sub_12B32
		add	sp, 8
		push	si
		call	sub_136AB
		inc	sp
		inc	sp
		mov	[bp-2],	dx
		mov	[bp-4],	ax
		mov	di, ax
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		push	si
		call	sub_12B32
		add	sp, 8
		push	di
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		push	si
		call	sub_12FF7
		add	sp, 8
		push	si
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	dx, [bp-6]
		mov	ax, [bp-8]
		mov	word_19750, dx
		mov	word_1974E, ax
		mov	word_19794, di
		mov	ax, di
		xor	dx, dx
		add	ax, [bp-8]
		adc	dx, [bp-6]
		mov	[bp-6],	dx
		mov	[bp-8],	ax
		push	di
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		push	word ptr [bp-7Ch]
		call	sub_14020
		add	sp, 8
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		push	word ptr [bp-7Ch]
		call	sub_12B32
		add	sp, 8
		mov	ax, 0A8h ; 'Ј'
		push	ax
		push	ds
		mov	ax, 553Ah
		push	ax
		push	word ptr [bp-7Ch]
		call	sub_14020
		add	sp, 8
		push	word ptr [bp-7Ch]
		call	sub_11DD6
		inc	sp
		inc	sp
		push	word ptr [bp-72h]
		push	word ptr [bp-74h]
		call	sub_12481
		add	sp, 4
		push	word ptr [bp-76h]
		push	word ptr [bp-78h]
		call	sub_12481
		add	sp, 4
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_D95E	proc far		; CODE XREF: sub_3DEF+2ADP

var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 14h
		cmp	word_17D9E, sp
		ja	short loc_D971
		call	far ptr	errStackOverflow

loc_D971:				; CODE XREF: sub_D95E+Cj
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_8], dx
		mov	[bp+var_A], ax
		or	ax, dx
		jnz	short loc_D997
		push	ds
		mov	ax, 25EDh
		push	ax
		call	sub_6927
		add	sp, 4

loc_D997:				; CODE XREF: sub_D95E+2Aj
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_4], dx
		mov	[bp+var_6], ax
		or	ax, dx
		jnz	short loc_D9BD
		push	ds
		mov	ax, 260Eh
		push	ax
		call	sub_6927
		add	sp, 4

loc_D9BD:				; CODE XREF: sub_D95E+50j
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 2630h
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	[bp+var_E], ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		push	ds
		mov	ax, 553Ah
		push	ax
		push	[bp+var_E]
		call	sub_12FF7
		add	sp, 8
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_196FC
		push	word_196FA
		push	[bp+var_E]
		call	sub_12B32
		add	sp, 8
		push	word_1976A
		push	[bp+var_4]
		push	[bp+var_6]
		push	[bp+var_E]
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_8]
		push	[bp+var_A]
		push	word_1976A
		push	[bp+var_4]
		push	[bp+var_6]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_C], ax
		or	ax, ax
		jnz	short loc_DA4B
		push	ds
		mov	ax, 2680h
		push	ax
		call	sub_6927
		add	sp, 4

loc_DA4B:				; CODE XREF: sub_D95E+DEj
		push	[bp+var_8]
		push	[bp+var_A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 0Fh
		push	ax
		call	sub_462B
		inc	sp
		inc	sp
		mov	si, 2328h
		mov	[bp+var_12], 0
		jmp	short loc_DAE7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_DA85:				; CODE XREF: sub_D95E+18Cj
		call	sub_12FD1
		cwd
		idiv	si
		add	dx, si
		push	dx
		call	sub_12FD1
		cwd
		idiv	si
		pop	ax
		sub	ax, dx
		mov	[bp+var_14], ax
		cmp	ax, 1Eh
		jge	short loc_DAA8
		mov	[bp+var_14], 1Eh

loc_DAA8:				; CODE XREF: sub_D95E+143j
		cmp	byte_1A13E, 0
		jz	short loc_DAB9
		push	[bp+var_14]
		call	sub_134B3
		inc	sp
		inc	sp

loc_DAB9:				; CODE XREF: sub_D95E+14Fj
		cmp	[bp+var_12], 0
		jz	short loc_DACB
		xor	ax, ax
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		jmp	short loc_DAD6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_DACB:				; CODE XREF: sub_D95E+15Fj
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp

loc_DAD6:				; CODE XREF: sub_D95E+16Bj
		cmp	[bp+var_12], 0
		jnz	short loc_DAE1
		mov	ax, 1
		jmp	short loc_DAE3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_DAE1:				; CODE XREF: sub_D95E+17Cj
		xor	ax, ax

loc_DAE3:				; CODE XREF: sub_D95E+181j
		mov	[bp+var_12], ax
		dec	si

loc_DAE7:				; CODE XREF: sub_D95E+125j
		cmp	si, 1Eh
		jg	short loc_DA85
		call	sub_134DF
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 28h	; '('
		push	ax
		call	sub_B952
		inc	sp
		inc	sp
		mov	ax, 0Fh
		push	ax
		call	sub_11BBC
		inc	sp
		inc	sp
		mov	di, 14h
		push	ds
		mov	ax, 2692h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	di
		mov	ax, 60h	; '`'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	di, 28h	; '('
		mov	ax, 14h
		push	ax
		call	sub_B952
		inc	sp
		inc	sp
		push	ds
		mov	ax, 26A3h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 26C6h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 26EAh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 14h
		push	ds
		mov	ax, 26FEh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 2721h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 14h
		push	ds
		mov	ax, 2744h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		push	ds
		mov	ax, 2760h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_DC08:				; CODE XREF: sub_D95E+2B8j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_DC18
		call	sub_12827
		jmp	short loc_DC08
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_DC18:				; CODE XREF: sub_D95E+2B1j
					; sub_D95E+2C6j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_DC18
		mov	ax, 1
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		xor	ax, ax
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, word_197A2
		mov	[bp+var_10], ax
		mov	[bp+var_2], 0
		jmp	loc_DDA2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_DC81:				; CODE XREF: sub_D95E+44Aj
		mov	ax, [bp+var_2]
		mov	word_197A2, ax
		call	couldBeLoadCastle
		mov	ax, word_197A2
		mov	dx, 0Ah
		mul	dx
		mov	bx, ax
		mov	ax, [bx+0B4h]
		mov	word_1A5A8, ax
		mov	ax, word_197A2
		mov	dx, 0Ah
		mul	dx
		mov	bx, ax
		mov	ax, [bx+0B6h]
		mov	word_1A5A6, ax
		mov	ax, word_197A2
		mov	dx, 0Ah
		mul	dx
		mov	bx, ax
		mov	ax, [bx+0B0h]
		sub	ax, word_1A5A8
		mov	word_1A5AC, ax
		mov	ax, word_197A2
		mov	dx, 0Ah
		mul	dx
		mov	bx, ax
		mov	ax, [bx+0AEh]
		sub	ax, word_1A5A6
		mov	word_1A5AA, ax
		mov	ax, word_197A2
		mov	dx, 0Ah
		mul	dx
		mov	bx, ax
		cmp	word ptr [bx+0B2h], 0
		jz	short loc_DCF1
		mov	word_1A596, 0
		jmp	short loc_DCF7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_DCF1:				; CODE XREF: sub_D95E+389j
		mov	word_1A596, 1

loc_DCF7:				; CODE XREF: sub_D95E+391j
		mov	ax, word_1A5A8
		mov	cx, 4
		shl	ax, cl
		mov	word_1A5A8, ax
		mov	ax, word_1A5A6
		shl	ax, 1
		mov	word_1A5A6, ax
		mov	ax, word_1A5AA
		shl	ax, 1
		mov	word_1A5AA, ax
		mov	byte_19FFE, 0
		mov	byte_1841B, 1
		mov	word_14A6C, 0FFFFh
		cmp	word_197A2, 8
		jge	short loc_DD7F
		mov	word_18316, 0
		xor	si, si
		jmp	short loc_DD7A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_DD33:				; CODE XREF: sub_D95E+41Fj
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		mov	bx, si
		shl	bx, 1
		mov	[bx+5624h], dx
		call	sub_12FD1
		mov	bx, 13Bh
		cwd
		idiv	bx
		mov	bx, si
		shl	bx, 1
		mov	[bx+63FCh], dx
		call	sub_12FD1
		mov	bx, 3Ch	; '<'
		cwd
		idiv	bx
		add	dx, 14h
		mov	bx, si
		shl	bx, 1
		mov	[bx+4076h], dx
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+4148h], 0
		inc	si

loc_DD7A:				; CODE XREF: sub_D95E+3D3j
		cmp	si, 7
		jl	short loc_DD33

loc_DD7F:				; CODE XREF: sub_D95E+3C9j
		cmp	word_197A2, 8
		jl	short loc_DD9A
		xor	si, si
		jmp	short loc_DD95
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_DD8A:				; CODE XREF: sub_D95E+43Aj
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+640Ah], 0FFFFh
		inc	si

loc_DD95:				; CODE XREF: sub_D95E+42Aj
		cmp	si, 14h
		jl	short loc_DD8A

loc_DD9A:				; CODE XREF: sub_D95E+426j
		call	sub_3634
		inc	[bp+var_2]

loc_DDA2:				; CODE XREF: sub_D95E+320j
		cmp	[bp+var_2], 10h
		jge	short loc_DDAB
		jmp	loc_DC81
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_DDAB:				; CODE XREF: sub_D95E+448j
		mov	ax, [bp+var_10]
		mov	word_197A2, ax
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_196FC
		push	word_196FA
		push	[bp+var_E]
		call	sub_12B32
		add	sp, 8
		push	word_1976A
		push	[bp+var_4]
		push	[bp+var_6]
		push	[bp+var_E]
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_8]
		push	[bp+var_A]
		push	word_1976A
		push	[bp+var_4]
		push	[bp+var_6]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_C], ax
		or	ax, ax
		jnz	short loc_DE17
		push	ds
		mov	ax, 2680h
		push	ax
		call	sub_6927
		add	sp, 4

loc_DE17:				; CODE XREF: sub_D95E+4AAj
		push	[bp+var_8]
		push	[bp+var_A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	di, 14h
		push	ds
		mov	ax, 276Ch
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	di
		mov	ax, 64h	; 'd'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	di, 28h	; '('
		mov	ax, 14h
		push	ax
		call	sub_B952
		inc	sp
		inc	sp
		push	ds
		mov	ax, 277Ch
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 279Fh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 27C1h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 27E2h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 2806h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 14h
		push	ds
		mov	ax, 2812h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 2834h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 2858h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 2876h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 2898h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 28B9h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		push	ds
		mov	ax, 2760h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_DFB3:				; CODE XREF: sub_D95E+663j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_DFC3
		call	sub_12827
		jmp	short loc_DFB3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_DFC3:				; CODE XREF: sub_D95E+65Cj
					; sub_D95E+671j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_DFC3
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_196FC
		push	word_196FA
		push	[bp+var_E]
		call	sub_12B32
		add	sp, 8
		push	word_1976A
		push	[bp+var_4]
		push	[bp+var_6]
		push	[bp+var_E]
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_8]
		push	[bp+var_A]
		push	word_1976A
		push	[bp+var_4]
		push	[bp+var_6]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_C], ax
		or	ax, ax
		jnz	short loc_E037
		push	ds
		mov	ax, 2680h
		push	ax
		call	sub_6927
		add	sp, 4

loc_E037:				; CODE XREF: sub_D95E+6CAj
		push	[bp+var_8]
		push	[bp+var_A]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	di, 14h
		push	ds
		mov	ax, 276Ch
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	di
		mov	ax, 64h	; 'd'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	di, 28h	; '('
		mov	ax, 14h
		push	ax
		call	sub_B952
		inc	sp
		inc	sp
		push	ds
		mov	ax, 28C5h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 28E7h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 14h
		push	ds
		mov	ax, 28FDh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 291Bh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 293Eh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 0Ah
		push	ds
		mov	ax, 2961h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	di, 14h
		push	ds
		mov	ax, 2967h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	di
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		push	ds
		mov	ax, 2760h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_E163:				; CODE XREF: sub_D95E+813j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_E173
		call	sub_12827
		jmp	short loc_E163
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E173:				; CODE XREF: sub_D95E+80Cj
					; sub_D95E+821j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_E173
		push	[bp+var_E]
		call	sub_11DD6
		inc	sp
		inc	sp
		push	[bp+var_4]
		push	[bp+var_6]
		call	sub_12481
		add	sp, 4
		push	[bp+var_8]
		push	[bp+var_A]
		call	sub_12481
		add	sp, 4
		call	sub_12B2C
		or	ax, ax
		jz	short loc_E1C0

loc_E1B0:				; CODE XREF: sub_D95E+860j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_E1C0
		call	sub_12827
		jmp	short loc_E1B0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E1C0:				; CODE XREF: sub_D95E+850j
					; sub_D95E+859j
		call	sub_11C80
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_D95E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_E1CB	proc far		; CODE XREF: sub_3DEF+35EP

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		cmp	word_17D9E, sp
		ja	short loc_E1DE
		call	far ptr	errStackOverflow

loc_E1DE:				; CODE XREF: sub_E1CB+Cj
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		or	ax, dx
		jnz	short loc_E204
		push	ds
		mov	ax, 25EDh
		push	ax
		call	sub_6927
		add	sp, 4

loc_E204:				; CODE XREF: sub_E1CB+2Aj
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jnz	short loc_E22A
		push	ds
		mov	ax, 260Eh
		push	ax
		call	sub_6927
		add	sp, 4

loc_E22A:				; CODE XREF: sub_E1CB+50j
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 2630h
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	di, ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		push	ds
		mov	ax, 553Ah
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_196FC
		push	word_196FA
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1976A
		push	[bp+var_2]
		push	[bp+var_4]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_6]
		push	[bp+var_8]
		push	word_1976A
		push	[bp+var_2]
		push	[bp+var_4]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	[bp+var_A], ax
		or	ax, ax
		jnz	short loc_E2B1
		push	ds
		mov	ax, 2680h
		push	ax
		call	sub_6927
		add	sp, 4

loc_E2B1:				; CODE XREF: sub_E1CB+D7j
		push	[bp+var_6]
		push	[bp+var_8]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	si, 14h
		push	ds
		mov	ax, 2970h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	si
		mov	ax, 78h	; 'x'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	si, 28h	; '('
		push	ds
		mov	ax, 297Bh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	si
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	si, 0Ah
		push	ds
		mov	ax, 299Eh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	si
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	si, 0Ah
		push	ds
		mov	ax, 29C1h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	si
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	si, 0Ah
		push	ds
		mov	ax, 29E4h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	si
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	si, 0Ah
		push	ds
		mov	ax, 2A06h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	si
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	si, 0Ah
		push	ds
		mov	ax, 2A29h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	si
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	si, 0Ah
		push	ds
		mov	ax, 2A49h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		push	si
		mov	ax, 14h
		push	ax
		call	sub_BA8D
		add	sp, 0Ch
		add	si, 0Ah
		push	ds
		mov	ax, 2760h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 0B2h ; 'В'
		push	ax
		mov	ax, 74h	; 't'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_E3D5:				; CODE XREF: sub_E1CB+218j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_E3E5
		call	sub_12827
		jmp	short loc_E3D5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E3E5:				; CODE XREF: sub_E1CB+211j
					; sub_E1CB+226j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_E3E5
		push	di
		call	sub_11DD6
		inc	sp
		inc	sp
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_12481
		add	sp, 4
		push	[bp+var_6]
		push	[bp+var_8]
		call	sub_12481
		add	sp, 4
		call	sub_12B2C
		or	ax, ax
		jz	short loc_E430

loc_E420:				; CODE XREF: sub_E1CB+263j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_E430
		call	sub_12827
		jmp	short loc_E420
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E430:				; CODE XREF: sub_E1CB+253j
					; sub_E1CB+25Cj
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_E1CB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_E436	proc far		; CODE XREF: sub_E849+28Bp
					; sub_E849+322p ...

var_26		= word ptr -26h
var_24		= word ptr -24h
var_22		= word ptr -22h
var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_1C		= word ptr -1Ch
var_1A		= word ptr -1Ah
var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 26h
		cmp	word_17D9E, sp
		ja	short loc_E449
		call	far ptr	errStackOverflow

loc_E449:				; CODE XREF: sub_E436+Cj
		mov	[bp+var_20], 0
		mov	[bp+var_22], 0
		mov	[bp+var_1E], 0
		mov	[bp+var_1C], 0
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		call	sub_11DA3
		add	sp, 6
		mov	[bp+var_24], dx
		mov	[bp+var_26], ax

loc_E470:				; CODE XREF: sub_E436+C2j sub_E436+E4j ...
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		call	sub_11DA3
		add	sp, 6
		sub	ax, [bp+var_26]
		sbb	dx, [bp+var_24]
		push	dx
		push	ax
		mov	ax, [bp+arg_0]
		cwd
		pop	bx
		pop	cx
		cmp	cx, dx
		jle	short loc_E492
		jmp	loc_E82B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E492:				; CODE XREF: sub_E436+57j
		jl	short loc_E49B
		cmp	bx, ax
		jb	short loc_E49B
		jmp	loc_E82B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E49B:				; CODE XREF: sub_E436:loc_E492j
					; sub_E436+60j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_E4A7
		jmp	loc_E82B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E4A7:				; CODE XREF: sub_E436+6Cj
		cmp	byte_18044, 0
		jz	short loc_E4C9
		call	sub_7D5D
		cmp	byte_17E3A, 0
		jnz	short loc_E4C1
		cmp	byte_1A104, 0
		jz	short loc_E4C9

loc_E4C1:				; CODE XREF: sub_E436+82j
		mov	[bp+var_1E], 1
		jmp	loc_E82B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E4C9:				; CODE XREF: sub_E436+76j sub_E436+89j
		cmp	[bp+var_1C], 0
		jnz	short loc_E503
		call	sub_12FD1
		mov	bx, 140h
		cwd
		idiv	bx
		mov	si, dx
		call	sub_12FD1
		mov	bx, 0BEh ; 'О'
		cwd
		idiv	bx
		mov	di, dx
		push	di
		push	si
		call	sub_5D63
		add	sp, 4
		cmp	ax, 8
		jg	short loc_E4FB
		jmp	loc_E470
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E4FB:				; CODE XREF: sub_E436+C0j
		mov	[bp+var_1C], 1
		jmp	loc_E80D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E503:				; CODE XREF: sub_E436+97j
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		call	sub_11DA3
		add	sp, 6
		sub	ax, [bp+var_22]
		sbb	dx, [bp+var_20]
		or	dx, dx
		jge	short loc_E51D
		jmp	loc_E470
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E51D:				; CODE XREF: sub_E436+E2j
		jg	short loc_E527
		cmp	ax, 1
		ja	short loc_E527
		jmp	loc_E470
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E527:				; CODE XREF: sub_E436:loc_E51Dj
					; sub_E436+ECj
		cmp	[bp+var_1C], 1
		jnz	short loc_E548
		push	di
		push	si
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_1A], ax
		mov	ax, 0Fh
		push	ax
		push	di
		push	si
		call	sub_5C9A
		add	sp, 6

loc_E548:				; CODE XREF: sub_E436+F5j
		cmp	[bp+var_1C], 2
		jz	short loc_E551
		jmp	loc_E5D5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E551:				; CODE XREF: sub_E436+116j
		push	di
		mov	ax, si
		dec	ax
		push	ax
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_18], ax
		mov	ax, 0Fh
		push	ax
		push	di
		mov	ax, si
		dec	ax
		push	ax
		call	sub_5C9A
		add	sp, 6
		push	di
		mov	ax, si
		inc	ax
		push	ax
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_16], ax
		mov	ax, 0Fh
		push	ax
		push	di
		mov	ax, si
		inc	ax
		push	ax
		call	sub_5C9A
		add	sp, 6
		mov	ax, di
		dec	ax
		push	ax
		push	si
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_14], ax
		mov	ax, 0Fh
		push	ax
		mov	ax, di
		dec	ax
		push	ax
		push	si
		call	sub_5C9A
		add	sp, 6
		mov	ax, di
		inc	ax
		push	ax
		push	si
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_12], ax
		mov	ax, 0Fh
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		push	si
		call	sub_5C9A
		add	sp, 6

loc_E5D5:				; CODE XREF: sub_E436+118j
		cmp	[bp+var_1C], 3
		jz	short loc_E5DE
		jmp	loc_E672
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E5DE:				; CODE XREF: sub_E436+1A3j
		push	di
		mov	ax, si
		add	ax, 0FFFEh
		push	ax
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_10], ax
		mov	ax, 0Fh
		push	ax
		push	di
		mov	ax, si
		add	ax, 0FFFEh
		push	ax
		call	sub_5C9A
		add	sp, 6
		push	di
		mov	ax, si
		add	ax, 2
		push	ax
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_E], ax
		mov	ax, 0Fh
		push	ax
		push	di
		mov	ax, si
		add	ax, 2
		push	ax
		call	sub_5C9A
		add	sp, 6
		mov	ax, di
		add	ax, 0FFFEh
		push	ax
		push	si
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_C], ax
		mov	ax, 0Fh
		push	ax
		mov	ax, di
		add	ax, 0FFFEh
		push	ax
		push	si
		call	sub_5C9A
		add	sp, 6
		mov	ax, di
		add	ax, 2
		push	ax
		push	si
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_A], ax
		mov	ax, 0Fh
		push	ax
		mov	ax, di
		add	ax, 2
		push	ax
		push	si
		call	sub_5C9A
		add	sp, 6

loc_E672:				; CODE XREF: sub_E436+1A5j
		cmp	[bp+var_1C], 4
		jz	short loc_E67B
		jmp	loc_E70F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E67B:				; CODE XREF: sub_E436+240j
		push	di
		mov	ax, si
		add	ax, 0FFFDh
		push	ax
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_8], ax
		mov	ax, 0Fh
		push	ax
		push	di
		mov	ax, si
		add	ax, 0FFFDh
		push	ax
		call	sub_5C9A
		add	sp, 6
		push	di
		mov	ax, si
		add	ax, 3
		push	ax
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_6], ax
		mov	ax, 0Fh
		push	ax
		push	di
		mov	ax, si
		add	ax, 3
		push	ax
		call	sub_5C9A
		add	sp, 6
		mov	ax, di
		add	ax, 0FFFDh
		push	ax
		push	si
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_4], ax
		mov	ax, 0Fh
		push	ax
		mov	ax, di
		add	ax, 0FFFDh
		push	ax
		push	si
		call	sub_5C9A
		add	sp, 6
		mov	ax, di
		add	ax, 3
		push	ax
		push	si
		call	sub_5D63
		add	sp, 4
		mov	[bp+var_2], ax
		mov	ax, 0Fh
		push	ax
		mov	ax, di
		add	ax, 3
		push	ax
		push	si
		call	sub_5C9A
		add	sp, 6

loc_E70F:				; CODE XREF: sub_E436+242j
		cmp	[bp+var_1C], 5
		jnz	short loc_E75D
		push	[bp+var_8]
		push	di
		mov	ax, si
		add	ax, 0FFFDh
		push	ax
		call	sub_5C9A
		add	sp, 6
		push	[bp+var_6]
		push	di
		mov	ax, si
		add	ax, 3
		push	ax
		call	sub_5C9A
		add	sp, 6
		push	[bp+var_4]
		mov	ax, di
		add	ax, 0FFFDh
		push	ax
		push	si
		call	sub_5C9A
		add	sp, 6
		push	[bp+var_2]
		mov	ax, di
		add	ax, 3
		push	ax
		push	si
		call	sub_5C9A
		add	sp, 6

loc_E75D:				; CODE XREF: sub_E436+2DDj
		cmp	[bp+var_1C], 6
		jnz	short loc_E7AB
		push	[bp+var_10]
		push	di
		mov	ax, si
		add	ax, 0FFFEh
		push	ax
		call	sub_5C9A
		add	sp, 6
		push	[bp+var_E]
		push	di
		mov	ax, si
		add	ax, 2
		push	ax
		call	sub_5C9A
		add	sp, 6
		push	[bp+var_C]
		mov	ax, di
		add	ax, 0FFFEh
		push	ax
		push	si
		call	sub_5C9A
		add	sp, 6
		push	[bp+var_A]
		mov	ax, di
		add	ax, 2
		push	ax
		push	si
		call	sub_5C9A
		add	sp, 6

loc_E7AB:				; CODE XREF: sub_E436+32Bj
		cmp	[bp+var_1C], 7
		jnz	short loc_E7F1
		push	[bp+var_18]
		push	di
		mov	ax, si
		dec	ax
		push	ax
		call	sub_5C9A
		add	sp, 6
		push	[bp+var_16]
		push	di
		mov	ax, si
		inc	ax
		push	ax
		call	sub_5C9A
		add	sp, 6
		push	[bp+var_14]
		mov	ax, di
		dec	ax
		push	ax
		push	si
		call	sub_5C9A
		add	sp, 6
		push	[bp+var_12]
		mov	ax, di
		inc	ax
		push	ax
		push	si
		call	sub_5C9A
		add	sp, 6

loc_E7F1:				; CODE XREF: sub_E436+379j
		cmp	[bp+var_1C], 8
		jnz	short loc_E804
		push	[bp+var_1A]
		push	di
		push	si
		call	sub_5C9A
		add	sp, 6

loc_E804:				; CODE XREF: sub_E436+3BFj
		cmp	[bp+var_1C], 8
		jge	short loc_E823
		inc	[bp+var_1C]

loc_E80D:				; CODE XREF: sub_E436+CAj
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		call	sub_11DA3
		add	sp, 6
		mov	[bp+var_20], dx
		mov	[bp+var_22], ax
		jmp	loc_E470
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E823:				; CODE XREF: sub_E436+3D2j
		mov	[bp+var_1C], 0
		jmp	loc_E470
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E82B:				; CODE XREF: sub_E436+59j sub_E436+62j ...
		call	sub_12B2C
		or	ax, ax
		jz	short loc_E840
		mov	[bp+var_1E], 1
		call	sub_12827
		jmp	short loc_E82B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E840:				; CODE XREF: sub_E436+3FCj
		mov	ax, [bp+var_1E]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_E436	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_E849	proc far		; CODE XREF: sub_3DEF+9CP
					; sub_3DEF+395P

var_32		= word ptr -32h
var_30		= word ptr -30h
var_2E		= word ptr -2Eh
var_2C		= word ptr -2Ch
var_2A		= word ptr -2Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 32h
		cmp	word_17D9E, sp
		ja	short loc_E85C
		call	far ptr	errStackOverflow

loc_E85C:				; CODE XREF: sub_E849+Cj
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_30], dx
		mov	[bp+var_32], ax
		or	ax, dx
		jnz	short loc_E882
		push	ds
		mov	ax, 25EDh
		push	ax
		call	sub_6927
		add	sp, 4

loc_E882:				; CODE XREF: sub_E849+2Aj
		xor	dx, dx
		mov	ax, 7D01h
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	[bp+var_2C], dx
		mov	[bp+var_2E], ax
		or	ax, dx
		jnz	short loc_E8A8
		push	ds
		mov	ax, 260Eh
		push	ax
		call	sub_6927
		add	sp, 4

loc_E8A8:				; CODE XREF: sub_E849+50j
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 2630h
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	di, ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		push	ds
		mov	ax, 553Ah
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		cmp	byte_14244, 0
		jz	short loc_E8D7
		jmp	loc_EAE0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E8D7:				; CODE XREF: sub_E849+89j
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		push	ds
		mov	ax, 2A6Ch
		push	ax
		push	ds
		mov	ax, 85h	; ''
		push	ax
		call	sub_13640
		add	sp, 8
		or	ax, ax
		jz	short loc_E93F
		xor	ax, ax
		push	ax
		push	word_1972C
		push	word_1972A
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_19782
		push	[bp+var_2C]
		push	[bp+var_2E]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_30]
		push	[bp+var_32]
		push	word_19782
		push	[bp+var_2C]
		push	[bp+var_2E]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	si, ax
		jmp	short loc_E984
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E93F:				; CODE XREF: sub_E849+ADj
		xor	ax, ax
		push	ax
		push	word_19718
		push	word_19716
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_19778
		push	[bp+var_2C]
		push	[bp+var_2E]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_30]
		push	[bp+var_32]
		push	word_19778
		push	[bp+var_2C]
		push	[bp+var_2E]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	si, ax

loc_E984:				; CODE XREF: sub_E849+F4j
		or	si, si
		jnz	short loc_E995
		push	ds
		mov	ax, 2680h
		push	ax
		call	sub_6927
		add	sp, 4

loc_E995:				; CODE XREF: sub_E849+13Dj
		push	[bp+var_30]
		push	[bp+var_32]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		push	ds
		mov	ax, 2A6Ch
		push	ax
		push	ds
		mov	ax, 85h	; ''
		push	ax
		call	sub_13640
		add	sp, 8
		or	ax, ax
		jnz	short loc_E9C8
		jmp	loc_EA74
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E9C8:				; CODE XREF: sub_E849+17Aj
		xor	si, si
		jmp	short loc_E9D9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_E9CC:				; CODE XREF: sub_E849+19Fj
		cmp	byte ptr [si+85h], 5Fh ; '_'
		jnz	short loc_E9D8
		mov	byte ptr [si+85h], 20h ; ' '

loc_E9D8:				; CODE XREF: sub_E849+188j
		inc	si

loc_E9D9:				; CODE XREF: sub_E849+181j
		push	ds
		mov	ax, 85h	; ''
		push	ax
		call	sub_13692
		add	sp, 4
		cmp	ax, si
		ja	short loc_E9CC
		push	ds
		mov	ax, 2A79h
		push	ax
		push	ss
		lea	ax, [bp+var_2A]
		push	ax
		call	sub_13669
		add	sp, 8
		push	ss
		lea	ax, [bp+var_2A]
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 64h	; 'd'
		push	ax
		mov	ax, 140h
		push	ax
		push	ss
		lea	ax, [bp+var_2A]
		push	ax
		call	sub_13692
		add	sp, 4
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	dx, ax
		pop	ax
		sub	ax, dx
		mov	bx, 2
		cwd
		idiv	bx
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 85h	; ''
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 78h	; 'x'
		push	ax
		mov	ax, 140h
		push	ax
		push	ds
		mov	ax, 85h	; ''
		push	ax
		call	sub_13692
		add	sp, 4
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	dx, ax
		pop	ax
		sub	ax, dx
		mov	bx, 2
		cwd
		idiv	bx
		push	ax
		call	sub_D3D2
		add	sp, 0Ch

loc_EA74:				; CODE XREF: sub_E849+17Cj
		cmp	byte_167AC, 0
		jz	short loc_EAC4
		cmp	byte_1A13E, 0
		jz	short loc_EABA
		cmp	byte_18141, 0
		jnz	short loc_EABA
		mov	ax, 1B8h
		push	ax
		call	sub_134B3
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		call	sub_B952
		inc	sp
		inc	sp
		mov	ax, 370h
		push	ax
		call	sub_134B3
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		call	sub_B952
		inc	sp
		inc	sp
		call	sub_134DF

loc_EABA:				; CODE XREF: sub_E849+237j
					; sub_E849+23Ej
		call	sub_118A9
		mov	byte_167AC, 0

loc_EAC4:				; CODE XREF: sub_E849+230j
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 64h	; 'd'
		push	ax
		push	cs
		call	near ptr sub_E436
		inc	sp
		inc	sp
		or	ax, ax
		jz	short loc_EAE0
		jmp	loc_ED52
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EAE0:				; CODE XREF: sub_E849+8Bj
					; sub_E849+292j
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_1971C
		push	word_1971A
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1977A
		push	[bp+var_2C]
		push	[bp+var_2E]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_30]
		push	[bp+var_32]
		push	word_1977A
		push	[bp+var_2C]
		push	[bp+var_2E]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	si, ax
		or	si, si
		jnz	short loc_EB41
		push	ds
		mov	ax, 2680h
		push	ax
		call	sub_6927
		add	sp, 4

loc_EB41:				; CODE XREF: sub_E849+2E9j
		push	[bp+var_30]
		push	[bp+var_32]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 96h	; ''
		push	ax
		push	cs
		call	near ptr sub_E436
		inc	sp
		inc	sp
		or	ax, ax
		jz	short loc_EB77
		jmp	loc_ED52
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EB77:				; CODE XREF: sub_E849+329j
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_19720
		push	word_1971E
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1977C
		push	[bp+var_2C]
		push	[bp+var_2E]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_30]
		push	[bp+var_32]
		push	word_1977C
		push	[bp+var_2C]
		push	[bp+var_2E]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	si, ax
		or	si, si
		jnz	short loc_EBD8
		push	ds
		mov	ax, 2680h
		push	ax
		call	sub_6927
		add	sp, 4

loc_EBD8:				; CODE XREF: sub_E849+380j
		push	[bp+var_30]
		push	[bp+var_32]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		push	ds
		mov	ax, 2A88h
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0BEh ; 'О'
		push	ax
		mov	ax, 20h	; ' '
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 96h	; ''
		push	ax
		push	cs
		call	near ptr sub_E436
		inc	sp
		inc	sp
		or	ax, ax
		jz	short loc_EC2B
		jmp	loc_ED52
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EC2B:				; CODE XREF: sub_E849+3DDj
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_19724
		push	word_19722
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_1977E
		push	[bp+var_2C]
		push	[bp+var_2E]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_30]
		push	[bp+var_32]
		push	word_1977E
		push	[bp+var_2C]
		push	[bp+var_2E]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	si, ax
		or	si, si
		jnz	short loc_EC8C
		push	ds
		mov	ax, 2680h
		push	ax
		call	sub_6927
		add	sp, 4

loc_EC8C:				; CODE XREF: sub_E849+434j
		push	[bp+var_30]
		push	[bp+var_32]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 96h	; ''
		push	ax
		push	cs
		call	near ptr sub_E436
		inc	sp
		inc	sp
		or	ax, ax
		jz	short loc_ECC2
		jmp	loc_ED52
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_ECC2:				; CODE XREF: sub_E849+474j
		mov	ax, 6
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	word_19728
		push	word_19726
		push	di
		call	sub_12B32
		add	sp, 8
		push	word_19780
		push	[bp+var_2C]
		push	[bp+var_2E]
		push	di
		call	sub_12FF7
		add	sp, 8
		mov	ax, 7D01h
		push	ax
		push	[bp+var_30]
		push	[bp+var_32]
		push	word_19780
		push	[bp+var_2C]
		push	[bp+var_2E]
		call	couldItBeDecompress
		add	sp, 0Ch
		mov	si, ax
		or	si, si
		jnz	short loc_ED23
		push	ds
		mov	ax, 2680h
		push	ax
		call	sub_6927
		add	sp, 4

loc_ED23:				; CODE XREF: sub_E849+4CBj
		push	[bp+var_30]
		push	[bp+var_32]
		mov	ax, 0C8h ; 'Ш'
		push	ax
		mov	ax, 28h	; '('
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	sub_4845
		add	sp, 0Ch
		mov	ax, 6
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 96h	; ''
		push	ax
		push	cs
		call	near ptr sub_E436
		inc	sp
		inc	sp

loc_ED52:				; CODE XREF: sub_E849+294j
					; sub_E849+32Bj ...
		push	di
		call	sub_11DD6
		inc	sp
		inc	sp
		push	[bp+var_2C]
		push	[bp+var_2E]
		call	sub_12481
		add	sp, 4
		push	[bp+var_30]
		push	[bp+var_32]
		call	sub_12481
		add	sp, 4
		call	sub_12B2C
		or	ax, ax
		jz	short loc_ED8F

loc_ED7F:				; CODE XREF: sub_E849+544j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_ED8F
		call	sub_12827
		jmp	short loc_ED7F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_ED8F:				; CODE XREF: sub_E849+534j
					; sub_E849+53Dj
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_E849	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_ED95	proc far		; CODE XREF: sub_DE8+A5BP

var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 10h
		cmp	word_17D9E, sp
		ja	short loc_EDA8
		call	far ptr	errStackOverflow

loc_EDA8:				; CODE XREF: sub_ED95+Cj
		call	sub_134DF
		xor	di, di
		mov	[bp+var_C], di
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, [bp+arg_0]
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+250h]
		push	word ptr [bx+24Eh]
		call	sub_13692
		add	sp, 4
		mov	[bp+var_A], ax
		xor	si, si
		mov	[bp+var_8], si
		jmp	short loc_EE13
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EDDF:				; CODE XREF: sub_ED95+81j
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, [bp+arg_0]
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		les	bx, [bx+24Eh]
		cmp	byte ptr es:[bx+si], 7Eh ; '~'
		jnz	short loc_EE0F
		mov	ax, [bp+var_8]
		cmp	ax, di
		jle	short loc_EE05
		mov	di, ax

loc_EE05:				; CODE XREF: sub_ED95+6Cj
		mov	[bp+var_8], 0
		inc	[bp+var_C]
		jmp	short loc_EE12
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EE0F:				; CODE XREF: sub_ED95+65j
		inc	[bp+var_8]

loc_EE12:				; CODE XREF: sub_ED95+78j
		inc	si

loc_EE13:				; CODE XREF: sub_ED95+48j
		cmp	si, [bp+var_A]
		jl	short loc_EDDF
		mov	ax, [bp+var_8]
		cmp	ax, di
		jle	short loc_EE21
		mov	di, ax

loc_EE21:				; CODE XREF: sub_ED95+88j
		mov	ax, 7
		push	ax
		cmp	byte_1841B, 0
		jnz	short loc_EE31
		mov	ax, 1
		jmp	short loc_EE33
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EE31:				; CODE XREF: sub_ED95+95j
		xor	ax, ax

loc_EE33:				; CODE XREF: sub_ED95+9Aj
		push	ax
		call	sub_4540
		add	sp, 4
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, di
		add	ax, 2
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		dec	ax
		mov	di, ax
		mov	ax, [bp+var_C]
		add	ax, 2
		mov	dx, 0Ah
		mul	dx
		dec	ax
		mov	[bp+var_C], ax
		mov	ax, 130h
		sub	ax, di
		mov	bx, 2
		cwd
		idiv	bx
		add	ax, 8
		mov	[bp+var_10], ax
		mov	ax, 0A0h ; ' '
		sub	ax, [bp+var_C]
		cwd
		idiv	bx
		add	ax, 5
		mov	[bp+var_E], ax
		xor	ax, ax
		push	ax
		push	ax
		mov	ax, [bp+var_E]
		add	ax, [bp+var_C]
		push	ax
		mov	ax, [bp+var_10]
		add	ax, di
		push	ax
		push	[bp+var_E]
		push	[bp+var_10]
		call	sub_4676
		add	sp, 0Ch
		xor	ax, ax
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, [bp+var_E]
		add	ax, [bp+var_C]
		dec	ax
		push	ax
		mov	ax, [bp+var_10]
		add	ax, di
		dec	ax
		push	ax
		mov	ax, [bp+var_E]
		inc	ax
		push	ax
		mov	ax, [bp+var_10]
		inc	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, [bp+var_E]
		add	ax, [bp+var_C]
		add	ax, 0FFFEh
		push	ax
		mov	ax, [bp+var_10]
		add	ax, di
		add	ax, 0FFFEh
		push	ax
		mov	ax, [bp+var_E]
		add	ax, 2
		push	ax
		mov	ax, [bp+var_10]
		add	ax, 2
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, [bp+var_10]
		add	ax, 8
		mov	[bp+var_6], ax
		mov	ax, [bp+var_E]
		add	ax, 6
		mov	[bp+var_4], ax
		mov	byte ptr [bp+var_2+1], 0
		xor	si, si
		jmp	loc_EF80
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EF17:				; CODE XREF: sub_ED95+1F0j
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, [bp+arg_0]
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		les	bx, [bx+24Eh]
		cmp	byte ptr es:[bx+si], 7Eh ; '~'
		jnz	short loc_EF44
		mov	ax, [bp+var_10]
		add	ax, 8
		mov	[bp+var_6], ax
		add	[bp+var_4], 0Ah
		jmp	loc_EF7F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EF44:				; CODE XREF: sub_ED95+19Dj
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, [bp+arg_0]
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		les	bx, [bx+24Eh]
		mov	al, es:[bx+si]
		mov	byte ptr [bp+var_2], al
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	[bp+var_4]
		push	[bp+var_6]
		call	sub_D3D2
		add	sp, 0Ch
		add	[bp+var_6], 8

loc_EF7F:				; CODE XREF: sub_ED95+1ACj
		inc	si

loc_EF80:				; CODE XREF: sub_ED95+17Fj
		cmp	si, [bp+var_A]
		jge	short loc_EF88
		jmp	loc_EF17
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EF88:				; CODE XREF: sub_ED95+1EEj
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		call	sub_6901

loc_EF98:				; CODE XREF: sub_ED95+211j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_EFA8
		call	sub_12827
		jmp	short loc_EF98
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EFA8:				; CODE XREF: sub_ED95+20Aj
					; sub_ED95+221j ...
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_EFE0
		cmp	byte_18044, 0
		jz	short loc_EFA8
		call	sub_7D5D
		cmp	byte_17E3A, 0
		jnz	short loc_EFCB
		cmp	byte_1A104, 0
		jz	short loc_EFA8

loc_EFCB:				; CODE XREF: sub_ED95+22Dj
					; sub_ED95+249j
		cmp	byte_17E3A, 0
		jnz	short loc_EFD9
		cmp	byte_1A104, 0
		jz	short loc_EFF0

loc_EFD9:				; CODE XREF: sub_ED95+23Bj
		call	sub_7D5D
		jmp	short loc_EFCB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EFE0:				; CODE XREF: sub_ED95+21Aj
					; sub_ED95+259j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_EFF0
		call	sub_12827
		jmp	short loc_EFE0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EFF0:				; CODE XREF: sub_ED95+242j
					; sub_ED95+252j
		call	sub_68C6
		cmp	byte_1841B, 0
		jz	short loc_EFFF
		jmp	loc_F004
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_EFFF:				; CODE XREF: sub_ED95+265j
		mov	ax, 1
		jmp	short loc_F006
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F004:				; CODE XREF: sub_ED95+267j
		xor	ax, ax

loc_F006:				; CODE XREF: sub_ED95+26Dj
		push	ax
		mov	ax, 7
		push	ax
		call	sub_4540
		add	sp, 4
		mov	al, byte_19FFE
		mov	ah, 0
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_ED95	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_F026	proc far		; CODE XREF: sub_23BE+961P

var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 12h
		cmp	word_17D9E, sp
		ja	short loc_F039
		call	far ptr	errStackOverflow

loc_F039:				; CODE XREF: sub_F026+Cj
		mov	[bp+var_2], 3E8h
		call	sub_134DF
		xor	di, di
		mov	[bp+var_E], di
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, [bp+arg_0]
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		push	word ptr [bx+250h]
		push	word ptr [bx+24Eh]
		call	sub_13692
		add	sp, 4
		mov	[bp+var_C], ax
		xor	si, si
		mov	[bp+var_A], si
		jmp	short loc_F0A9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F075:				; CODE XREF: sub_F026+86j
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, [bp+arg_0]
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		les	bx, [bx+24Eh]
		cmp	byte ptr es:[bx+si], 7Eh ; '~'
		jnz	short loc_F0A5
		mov	ax, [bp+var_A]
		cmp	ax, di
		jle	short loc_F09B
		mov	di, ax

loc_F09B:				; CODE XREF: sub_F026+71j
		mov	[bp+var_A], 0
		inc	[bp+var_E]
		jmp	short loc_F0A8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F0A5:				; CODE XREF: sub_F026+6Aj
		inc	[bp+var_A]

loc_F0A8:				; CODE XREF: sub_F026+7Dj
		inc	si

loc_F0A9:				; CODE XREF: sub_F026+4Dj
		cmp	si, [bp+var_C]
		jl	short loc_F075
		mov	ax, [bp+var_A]
		cmp	ax, di
		jle	short loc_F0B7
		mov	di, ax

loc_F0B7:				; CODE XREF: sub_F026+8Dj
		mov	ax, 7
		push	ax
		cmp	byte_1841B, 0
		jnz	short loc_F0C7
		mov	ax, 1
		jmp	short loc_F0C9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F0C7:				; CODE XREF: sub_F026+9Aj
		xor	ax, ax

loc_F0C9:				; CODE XREF: sub_F026+9Fj
		push	ax
		call	sub_4540
		add	sp, 4
		mov	ax, 7
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	ax, di
		add	ax, 2
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		dec	ax
		mov	di, ax
		mov	ax, [bp+var_E]
		add	ax, 2
		mov	dx, 0Ah
		mul	dx
		dec	ax
		mov	[bp+var_E], ax
		mov	ax, 130h
		sub	ax, di
		mov	bx, 2
		cwd
		idiv	bx
		add	ax, 8
		mov	[bp+var_12], ax
		mov	ax, 0A0h ; ' '
		sub	ax, [bp+var_E]
		cwd
		idiv	bx
		add	ax, 5
		mov	[bp+var_10], ax
		xor	ax, ax
		push	ax
		push	ax
		mov	ax, [bp+var_10]
		add	ax, [bp+var_E]
		push	ax
		mov	ax, [bp+var_12]
		add	ax, di
		push	ax
		push	[bp+var_10]
		push	[bp+var_12]
		call	sub_4676
		add	sp, 0Ch
		xor	ax, ax
		push	ax
		mov	ax, 0Ch
		push	ax
		mov	ax, [bp+var_10]
		add	ax, [bp+var_E]
		dec	ax
		push	ax
		mov	ax, [bp+var_12]
		add	ax, di
		dec	ax
		push	ax
		mov	ax, [bp+var_10]
		inc	ax
		push	ax
		mov	ax, [bp+var_12]
		inc	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 4
		push	ax
		mov	ax, [bp+var_10]
		add	ax, [bp+var_E]
		add	ax, 0FFFEh
		push	ax
		mov	ax, [bp+var_12]
		add	ax, di
		add	ax, 0FFFEh
		push	ax
		mov	ax, [bp+var_10]
		add	ax, 2
		push	ax
		mov	ax, [bp+var_12]
		add	ax, 2
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, [bp+var_12]
		add	ax, 8
		mov	[bp+var_8], ax
		mov	ax, [bp+var_10]
		add	ax, 6
		mov	[bp+var_6], ax
		mov	byte ptr [bp+var_4+1], 0
		xor	si, si
		jmp	loc_F216
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F1AD:				; CODE XREF: sub_F026+1F5j
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, [bp+arg_0]
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		les	bx, [bx+24Eh]
		cmp	byte ptr es:[bx+si], 7Eh ; '~'
		jnz	short loc_F1DA
		mov	ax, [bp+var_12]
		add	ax, 8
		mov	[bp+var_8], ax
		add	[bp+var_6], 0Ah
		jmp	loc_F215
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F1DA:				; CODE XREF: sub_F026+1A2j
		mov	ax, word_197A2
		mov	dx, 28h	; '('
		mul	dx
		mov	bx, ax
		mov	ax, [bp+arg_0]
		shl	ax, 1
		shl	ax, 1
		add	bx, ax
		les	bx, [bx+24Eh]
		mov	al, es:[bx+si]
		mov	byte ptr [bp+var_4], al
		push	ss
		lea	ax, [bp+var_4]
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Fh
		push	ax
		push	[bp+var_6]
		push	[bp+var_8]
		call	sub_D3D2
		add	sp, 0Ch
		add	[bp+var_8], 8

loc_F215:				; CODE XREF: sub_F026+1B1j
		inc	si

loc_F216:				; CODE XREF: sub_F026+184j
		cmp	si, [bp+var_C]
		jge	short loc_F21E
		jmp	loc_F1AD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F21E:				; CODE XREF: sub_F026+1F3j
		mov	ax, 7
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		call	sub_6901

loc_F22E:				; CODE XREF: sub_F026+216j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_F23E
		call	sub_12827
		jmp	short loc_F22E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F23E:				; CODE XREF: sub_F026+20Fj
					; sub_F026+259j
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_F281
		call	sub_7D5D
		cmp	byte_18044, 0
		jz	short loc_F276
		cmp	byte_17E3A, 0
		jnz	short loc_F261
		cmp	byte_1A104, 0
		jz	short loc_F276

loc_F261:				; CODE XREF: sub_F026+232j
					; sub_F026+24Ej
		cmp	byte_17E3A, 0
		jnz	short loc_F26F
		cmp	byte_1A104, 0
		jz	short loc_F291

loc_F26F:				; CODE XREF: sub_F026+240j
		call	sub_7D5D
		jmp	short loc_F261
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F276:				; CODE XREF: sub_F026+22Bj
					; sub_F026+239j
		cmp	[bp+var_2], 0
		jl	short loc_F291
		dec	[bp+var_2]
		jmp	short loc_F23E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F281:				; CODE XREF: sub_F026+21Fj
					; sub_F026+269j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_F291
		call	sub_12827
		jmp	short loc_F281
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F291:				; CODE XREF: sub_F026+247j
					; sub_F026+254j ...
		call	sub_68C6
		cmp	byte_1841B, 0
		jz	short loc_F2A0
		jmp	loc_F2A5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F2A0:				; CODE XREF: sub_F026+275j
		mov	ax, 1
		jmp	short loc_F2A7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F2A5:				; CODE XREF: sub_F026+277j
		xor	ax, ax

loc_F2A7:				; CODE XREF: sub_F026+27Dj
		push	ax
		mov	ax, 7
		push	ax
		call	sub_4540
		add	sp, 4
		mov	al, byte_19FFE
		mov	ah, 0
		push	ax
		call	sub_439E
		inc	sp
		inc	sp
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_F026	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_F2C7	proc far		; CODE XREF: sub_7F60+676P
					; sub_8628+247P ...
		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_F2D6
		call	far ptr	errStackOverflow

loc_F2D6:				; CODE XREF: sub_F2C7+8j
		xor	si, si
		jmp	loc_F3E9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F2DB:				; CODE XREF: sub_F2C7+127j
		call	sub_12FD1
		mov	bx, 98h	; ''
		cwd
		idiv	bx
		push	dx
		call	sub_12FD1
		mov	bx, 98h	; ''
		cwd
		idiv	bx
		pop	ax
		sub	ax, dx
		mov	bx, si
		shl	bx, 1
		mov	[bx+5D4Ch], ax
		call	sub_12FD1
		mov	bx, 50h	; 'P'
		cwd
		idiv	bx
		push	dx
		call	sub_12FD1
		mov	bx, 50h	; 'P'
		cwd
		idiv	bx
		pop	ax
		sub	ax, dx
		mov	bx, si
		shl	bx, 1
		mov	[bx+6590h], ax
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jz	short loc_F34E
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+62DCh], 1
		call	sub_12FD1
		mov	bx, 6
		cwd
		idiv	bx
		inc	dx
		mov	bx, si
		shl	bx, 1
		mov	[bx+5F80h], dx
		jmp	short loc_F36C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F34E:				; CODE XREF: sub_F2C7+65j
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+5F80h], 1
		call	sub_12FD1
		mov	bx, 6
		cwd
		idiv	bx
		inc	dx
		mov	bx, si
		shl	bx, 1
		mov	[bx+62DCh], dx

loc_F36C:				; CODE XREF: sub_F2C7+85j
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		mov	bx, si
		shl	bx, 1
		mov	[bx+5DC4h], dx
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		mov	bx, si
		shl	bx, 1
		mov	[bx+3F82h], dx
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+62DCh]
		mov	bx, si
		shl	bx, 1
		mov	[bx+5CD2h], ax
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+5F80h]
		mov	bx, si
		shl	bx, 1
		mov	[bx+635Eh], ax
		call	sub_12FD1
		mov	bx, 4
		cwd
		idiv	bx
		add	dx, 2
		mov	bx, si
		shl	bx, 1
		mov	[bx+41E2h], dx
		call	sub_12FD1
		mov	bx, 4
		cwd
		idiv	bx
		add	dx, 2
		mov	bx, si
		shl	bx, 1
		mov	[bx+415Ch], dx
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+3FFCh], 0
		inc	si

loc_F3E9:				; CODE XREF: sub_F2C7+11j
		cmp	si, 3Ch	; '<'
		jge	short loc_F3F1
		jmp	loc_F2DB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F3F1:				; CODE XREF: sub_F2C7+125j
		pop	bp
		pop	si
		retf
sub_F2C7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_F3F4	proc far		; CODE XREF: sub_7F60+698P
					; sub_8628+274P ...

var_3		= byte ptr -3
var_2		= word ptr -2
arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_F407
		call	far ptr	errStackOverflow

loc_F407:				; CODE XREF: sub_F3F4+Cj
		mov	si, [bp+arg_0]
		mov	[bp+var_3], 0
		call	sub_12B2C
		or	ax, ax
		jz	short loc_F431
		call	sub_12827
		push	ax
		call	sub_13A23
		inc	sp
		inc	sp
		mov	[bp+var_3], al
		cmp	[bp+var_3], 0
		jnz	short loc_F431
		mov	[bp+var_3], 0FFh

loc_F431:				; CODE XREF: sub_F3F4+21j sub_F3F4+37j
		mov	bx, si
		shl	bx, 1
		cmp	word ptr [bx+3FFCh], 0
		jz	short loc_F461
		xor	ax, ax
		push	ax
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+6590h]
		add	ax, 58h	; 'X'
		push	ax
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+5D4Ch]
		add	ax, 0A0h ; ' '
		push	ax
		call	sub_5C9A
		add	sp, 6
		jmp	short loc_F473
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F461:				; CODE XREF: sub_F3F4+46j
		xor	ax, ax
		push	ax
		mov	ax, 0C7h ; 'Ч'
		push	ax
		xor	ax, ax
		push	ax
		call	sub_5C9A
		add	sp, 6

loc_F473:				; CODE XREF: sub_F3F4+6Bj
		mov	bx, si
		shl	bx, 1
		dec	word ptr [bx+62DCh]
		mov	ax, [bx+62DCh]
		or	ax, ax
		jnz	short loc_F4C0
		mov	bx, si
		shl	bx, 1
		cmp	word ptr [bx+5DC4h], 0
		jz	short loc_F4A0
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+41E2h]
		mov	bx, si
		shl	bx, 1
		sub	[bx+5D4Ch], ax
		jmp	short loc_F4B0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F4A0:				; CODE XREF: sub_F3F4+98j
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+41E2h]
		mov	bx, si
		shl	bx, 1
		add	[bx+5D4Ch], ax

loc_F4B0:				; CODE XREF: sub_F3F4+AAj
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+5CD2h]
		mov	bx, si
		shl	bx, 1
		mov	[bx+62DCh], ax

loc_F4C0:				; CODE XREF: sub_F3F4+8Dj
		mov	bx, si
		shl	bx, 1
		dec	word ptr [bx+5F80h]
		mov	ax, [bx+5F80h]
		or	ax, ax
		jnz	short loc_F50D
		mov	bx, si
		shl	bx, 1
		cmp	word ptr [bx+3F82h], 0
		jz	short loc_F4ED
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+415Ch]
		mov	bx, si
		shl	bx, 1
		sub	[bx+6590h], ax
		jmp	short loc_F4FD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F4ED:				; CODE XREF: sub_F3F4+E5j
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+415Ch]
		mov	bx, si
		shl	bx, 1
		add	[bx+6590h], ax

loc_F4FD:				; CODE XREF: sub_F3F4+F7j
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+635Eh]
		mov	bx, si
		shl	bx, 1
		mov	[bx+5F80h], ax

loc_F50D:				; CODE XREF: sub_F3F4+DAj
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+3FFCh], 0
		mov	bx, si
		shl	bx, 1
		mov	di, [bx+5D4Ch]
		add	di, 0A0h ; ' '
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+6590h]
		add	ax, 58h	; 'X'
		mov	[bp+var_2], ax
		cmp	di, 8
		jle	short loc_F549
		cmp	di, 138h
		jge	short loc_F549
		cmp	ax, 8
		jle	short loc_F549
		cmp	ax, 0A8h ; 'Ј'
		jge	short loc_F549
		jmp	loc_F666
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F549:				; CODE XREF: sub_F3F4+140j
					; sub_F3F4+146j ...
		call	sub_12FD1
		mov	bx, 98h	; ''
		cwd
		idiv	bx
		push	dx
		call	sub_12FD1
		mov	bx, 98h	; ''
		cwd
		idiv	bx
		pop	ax
		sub	ax, dx
		mov	bx, si
		shl	bx, 1
		mov	[bx+5D4Ch], ax
		call	sub_12FD1
		mov	bx, 50h	; 'P'
		cwd
		idiv	bx
		push	dx
		call	sub_12FD1
		mov	bx, 50h	; 'P'
		cwd
		idiv	bx
		pop	ax
		sub	ax, dx
		mov	bx, si
		shl	bx, 1
		mov	[bx+6590h], ax
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jz	short loc_F5BC
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+62DCh], 1
		call	sub_12FD1
		mov	bx, 6
		cwd
		idiv	bx
		inc	dx
		mov	bx, si
		shl	bx, 1
		mov	[bx+5F80h], dx
		jmp	short loc_F5DA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F5BC:				; CODE XREF: sub_F3F4+1A6j
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+5F80h], 1
		call	sub_12FD1
		mov	bx, 6
		cwd
		idiv	bx
		inc	dx
		mov	bx, si
		shl	bx, 1
		mov	[bx+62DCh], dx

loc_F5DA:				; CODE XREF: sub_F3F4+1C6j
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		mov	bx, si
		shl	bx, 1
		mov	[bx+5DC4h], dx
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		mov	bx, si
		shl	bx, 1
		mov	[bx+3F82h], dx
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+62DCh]
		mov	bx, si
		shl	bx, 1
		mov	[bx+5CD2h], ax
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+5F80h]
		mov	bx, si
		shl	bx, 1
		mov	[bx+635Eh], ax
		call	sub_12FD1
		mov	bx, 4
		cwd
		idiv	bx
		add	dx, 2
		mov	bx, si
		shl	bx, 1
		mov	[bx+41E2h], dx
		call	sub_12FD1
		mov	bx, 4
		cwd
		idiv	bx
		add	dx, 2
		mov	bx, si
		shl	bx, 1
		mov	[bx+415Ch], dx
		mov	bx, si
		shl	bx, 1
		mov	di, [bx+5D4Ch]
		add	di, 0A0h ; ' '
		mov	bx, si
		shl	bx, 1
		mov	ax, [bx+6590h]
		add	ax, 58h	; 'X'
		mov	[bp+var_2], ax

loc_F666:				; CODE XREF: sub_F3F4+152j
		push	[bp+var_2]
		push	di
		call	sub_5D63
		add	sp, 4
		or	ax, ax
		jnz	short loc_F6A7
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+3FFCh], 1
		mov	ax, 0Ah
		push	ax
		call	sub_12FD1
		mov	bx, 2
		cwd
		idiv	bx
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		pop	ax
		sub	ax, dx
		push	ax
		push	[bp+var_2]
		push	di
		call	sub_5C9A
		add	sp, 6
		jmp	short loc_F6B9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F6A7:				; CODE XREF: sub_F3F4+280j
		xor	ax, ax
		push	ax
		mov	ax, 0C7h ; 'Ч'
		push	ax
		xor	ax, ax
		push	ax
		call	sub_5C9A
		add	sp, 6

loc_F6B9:				; CODE XREF: sub_F3F4+2B1j
		mov	al, [bp+var_3]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_F3F4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_F6C2	proc far		; CODE XREF: sub_3DEF+E4P
					; sub_3DEF+3F1P

var_68		= word ptr -68h
var_16		= word ptr -16h
arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 68h
		cmp	word_17D9E, sp
		ja	short loc_F6D5
		call	far ptr	errStackOverflow

loc_F6D5:				; CODE XREF: sub_F6C2+Cj sub_F6C2+21j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_F6E5
		call	sub_12827
		jmp	short loc_F6D5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F6E5:				; CODE XREF: sub_F6C2+1Aj
		call	sub_B9E2
		push	ds
		mov	ax, 2AA9h
		push	ax
		push	ss
		lea	ax, [bp+var_68]
		push	ax
		call	sub_13669
		add	sp, 8
		mov	ax, 0Ah
		push	ax
		push	ss
		lea	ax, [bp+var_16]
		push	ax
		push	[bp+arg_0]
		call	sub_12BDF
		add	sp, 8
		push	dx
		push	ax
		push	ss
		lea	ax, [bp+var_68]
		push	ax
		call	sub_13602
		add	sp, 8
		mov	di, 5Ah	; 'Z'
		push	ss
		lea	ax, [bp+var_16]
		push	ax
		call	sub_13692
		add	sp, 4
		cmp	ax, 2
		jnz	short loc_F737
		mov	di, 56h	; 'V'

loc_F737:				; CODE XREF: sub_F6C2+70j
		xor	ax, ax
		push	ax
		call	sub_4325
		inc	sp
		inc	sp
		xor	si, si
		jmp	short loc_F7B6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F745:				; CODE XREF: sub_F6C2+F7j
		push	si
		call	sub_439E
		inc	sp
		inc	sp
		or	si, si
		jnz	short loc_F756
		mov	ax, 1
		jmp	short loc_F758
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F756:				; CODE XREF: sub_F6C2+8Dj
		xor	ax, ax

loc_F758:				; CODE XREF: sub_F6C2+92j
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ss
		lea	ax, [bp+var_68]
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0Fh
		push	ax
		mov	ax, 4Bh	; 'K'
		push	ax
		push	di
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2ABAh
		push	ax
		mov	ax, 6
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 5Fh	; '_'
		push	ax
		mov	ax, di
		add	ax, 19h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		inc	si

loc_F7B6:				; CODE XREF: sub_F6C2+81j
		cmp	si, 2
		jl	short loc_F745
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_F6C2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_F7C1	proc far		; CODE XREF: sub_DE8+F1FP
					; sub_3DEF:loc_3EC9P ...
		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_F7D0
		call	far ptr	errStackOverflow

loc_F7D0:				; CODE XREF: sub_F7C1+8j
		xor	si, si
		jmp	loc_F89D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F7D5:				; CODE XREF: sub_F7C1+E1j
		push	si
		call	sub_439E
		inc	sp
		inc	sp
		or	si, si
		jnz	short loc_F7E6
		mov	ax, 1
		jmp	short loc_F7E8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F7E6:				; CODE XREF: sub_F7C1+1Ej
		xor	ax, ax

loc_F7E8:				; CODE XREF: sub_F7C1+23j
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 2AC5h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 2
		push	ax
		mov	ax, 0B0h ; 'А'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2ACFh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B9h ; 'Й'
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2AD6h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 0B4h ; 'Д'
		push	ax
		mov	ax, 80h	; ''
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2ADCh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B0h ; 'А'
		push	ax
		mov	ax, 0F0h ; '№'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2AE5h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B9h ; 'Й'
		push	ax
		mov	ax, 0F0h ; '№'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		inc	si

loc_F89D:				; CODE XREF: sub_F7C1+11j
		cmp	si, 2
		jge	short loc_F8A5
		jmp	loc_F7D5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F8A5:				; CODE XREF: sub_F7C1+DFj
		pop	bp
		pop	si
		retf
sub_F7C1	endp ; sp = -4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_F8A8	proc far		; CODE XREF: sub_3DEF+2D6P

var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		cmp	word_17D9E, sp
		ja	short loc_F8BA
		call	far ptr	errStackOverflow

loc_F8BA:				; CODE XREF: sub_F8A8+Bj sub_F8A8+20j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_F8CA
		call	sub_12827
		jmp	short loc_F8BA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F8CA:				; CODE XREF: sub_F8A8+19j
		mov	al, byte_19E8C
		mov	ah, 0
		mov	word_14372, ax
		mov	al, byte_1A13E
		mov	ah, 0
		mov	word_14398, ax
		mov	ax, word_197A2
		mov	word_14396, ax
		mov	al, byte_18044
		mov	ah, 0
		mov	word_1439A, ax
		mov	ax, word_14968
		mov	word_1439C, ax
		mov	ax, word_1496A
		mov	word_1439E, ax
		mov	ax, word_1496C
		mov	word_143A0, ax
		mov	ax, word_1496E
		mov	word_143A2, ax
		xor	di, di
		jmp	short loc_F90D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F904:				; CODE XREF: sub_F8A8+68j
		mov	al, [di+80Ah]
		mov	[di+1E4h], al
		inc	di

loc_F90D:				; CODE XREF: sub_F8A8+5Aj
		cmp	di, 7
		jl	short loc_F904
		mov	al, byte_1493E
		mov	ah, 0
		mov	word_1440C, ax
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 2AEEh
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	[bp+var_2], ax
		xor	ax, ax
		push	ax
		mov	dx, ax
		mov	ax, 2D0h
		push	dx
		push	ax
		push	[bp+var_2]
		call	sub_12B32
		add	sp, 8
		mov	ax, 9Ch	; ''
		push	ax
		push	ds
		mov	ax, 1B2h
		push	ax
		push	[bp+var_2]
		call	sub_14020
		add	sp, 8
		push	[bp+var_2]
		call	sub_11DD6
		inc	sp
		inc	sp
		xor	di, di
		jmp	loc_FA14
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F966:				; CODE XREF: sub_F8A8+171j
		push	di
		call	sub_439E
		inc	sp
		inc	sp
		or	di, di
		jnz	short loc_F977
		mov	ax, 1
		jmp	short loc_F979
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F977:				; CODE XREF: sub_F8A8+C8j
		xor	ax, ax

loc_F979:				; CODE XREF: sub_F8A8+CDj
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 2AFBh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B4h ; 'Д'
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2B15h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 4Bh	; 'K'
		push	ax
		mov	ax, 54h	; 'T'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	si, 190h
		jmp	short loc_FA08
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_F9F8:				; CODE XREF: sub_F8A8+164j
		cmp	byte_1A13E, 0
		jz	short loc_FA07
		push	si
		call	sub_134B3
		inc	sp
		inc	sp

loc_FA07:				; CODE XREF: sub_F8A8+155j
		inc	si

loc_FA08:				; CODE XREF: sub_F8A8+14Ej
		cmp	si, 7D0h
		jl	short loc_F9F8
		call	sub_134DF
		inc	di

loc_FA14:				; CODE XREF: sub_F8A8+BBj
		cmp	di, 2
		jge	short loc_FA1C
		jmp	loc_F966
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FA1C:				; CODE XREF: sub_F8A8+16Fj
					; sub_F8A8+180j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_FA1C
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_F8A8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_FA30	proc far		; CODE XREF: sub_3DEF:loc_42C8P
		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_FA40
		call	far ptr	errStackOverflow

loc_FA40:				; CODE XREF: sub_FA30+9j
		mov	al, byte_19E8C
		mov	ah, 0
		mov	word_14372, ax
		mov	al, byte_1A13E
		mov	ah, 0
		mov	word_14398, ax
		mov	ax, word_197A2
		mov	word_14396, ax
		mov	al, byte_18044
		mov	ah, 0
		mov	word_1439A, ax
		mov	ax, word_14968
		mov	word_1439C, ax
		mov	ax, word_1496A
		mov	word_1439E, ax
		mov	ax, word_1496C
		mov	word_143A0, ax
		mov	ax, word_1496E
		mov	word_143A2, ax
		xor	si, si
		jmp	short loc_FA83
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FA7A:				; CODE XREF: sub_FA30+56j
		mov	al, [si+80Ah]
		mov	[si+1E4h], al
		inc	si

loc_FA83:				; CODE XREF: sub_FA30+48j
		cmp	si, 7
		jl	short loc_FA7A
		mov	al, byte_1493E
		mov	ah, 0
		mov	word_1440C, ax
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 2AEEh
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	di, ax
		xor	ax, ax
		push	ax
		mov	dx, ax
		mov	ax, 2D0h
		push	dx
		push	ax
		push	di
		call	sub_12B32
		add	sp, 8
		mov	ax, 9Ch	; ''
		push	ax
		push	ds
		mov	ax, 1B2h
		push	ax
		push	di
		call	sub_14020
		add	sp, 8
		push	di
		call	sub_11DD6
		inc	sp
		inc	sp
		pop	bp
		pop	di
		pop	si
		retf
sub_FA30	endp ; sp = -2

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_FAE4
		call	far ptr	errStackOverflow

loc_FAE4:				; CODE XREF: seg006:26CDj
		mov	word_14372, 1
		mov	word_14398, 1
		mov	word_14396, 0
		mov	word_1439A, 0
		mov	word_1439C, 28h	; '('
		mov	word_1439E, 78h	; 'x'
		mov	word_143A0, 28h	; '('
		mov	word_143A2, 0
		xor	si, si
		jmp	short loc_FB21
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FB18:				; CODE XREF: seg006:2714j
		mov	al, [si+80Ah]
		mov	[si+1E4h], al
		inc	si

loc_FB21:				; CODE XREF: seg006:2706j
		cmp	si, 7
		jl	short loc_FB18
		mov	word_1440C, 0
		xor	si, si
		jmp	short loc_FB4D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FB30:				; CODE XREF: seg006:2740j
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+1ECh], 0
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		mov	word ptr [bx+20Eh], 0
		mov	word ptr [bx+20Ch], 0
		inc	si

loc_FB4D:				; CODE XREF: seg006:271Ej
		cmp	si, 10h
		jl	short loc_FB30
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 2AEEh
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	di, ax
		xor	ax, ax
		push	ax
		mov	dx, ax
		mov	ax, 2D0h
		push	dx
		push	ax
		push	di
		call	sub_12B32
		add	sp, 8
		mov	ax, 9Ch	; ''
		push	ax
		push	ds
		mov	ax, 1B2h
		push	ax
		push	di
		call	sub_14020
		add	sp, 8
		push	di
		call	sub_11DD6
		inc	sp
		inc	sp
		pop	bp
		pop	di
		pop	si
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_FB96	proc far		; CODE XREF: sub_3DEF+2CBP

var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		cmp	word_17D9E, sp
		ja	short loc_FBA8
		call	far ptr	errStackOverflow

loc_FBA8:				; CODE XREF: sub_FB96+Bj sub_FB96+20j
		call	sub_12B2C
		or	ax, ax
		jz	short loc_FBB8
		call	sub_12827
		jmp	short loc_FBA8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FBB8:				; CODE XREF: sub_FB96+19j
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 2AEEh
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	[bp+var_2], ax
		xor	ax, ax
		push	ax
		mov	dx, ax
		mov	ax, 2D0h
		push	dx
		push	ax
		push	[bp+var_2]
		call	sub_12B32
		add	sp, 8
		mov	ax, 9Ch	; ''
		push	ax
		push	ds
		mov	ax, 1B2h
		push	ax
		push	[bp+var_2]
		call	sub_12FF7
		add	sp, 8
		push	[bp+var_2]
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	al, byte ptr word_14372
		mov	byte_19E8C, al
		mov	al, byte ptr word_14398
		mov	byte_1A13E, al
		mov	ax, word_14396
		mov	word_197A2, ax
		mov	al, byte ptr word_1439A
		mov	byte_18044, al
		mov	ax, word_1439C
		mov	word_14968, ax
		mov	ax, word_1439E
		mov	word_1496A, ax
		mov	ax, word_143A0
		mov	word_1496C, ax
		mov	ax, word_143A2
		mov	word_1496E, ax
		xor	di, di
		jmp	short loc_FC3C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FC33:				; CODE XREF: sub_FB96+A9j
		mov	al, [di+1E4h]
		mov	[di+80Ah], al
		inc	di

loc_FC3C:				; CODE XREF: sub_FB96+9Bj
		cmp	di, 7
		jl	short loc_FC33
		mov	al, byte ptr word_1440C
		mov	byte_1493E, al
		xor	di, di
		jmp	loc_FCFA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FC4C:				; CODE XREF: sub_FB96+169j
		push	di
		call	sub_439E
		inc	sp
		inc	sp
		or	di, di
		jnz	short loc_FC5D
		mov	ax, 1
		jmp	short loc_FC5F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FC5D:				; CODE XREF: sub_FB96+C0j
		xor	ax, ax

loc_FC5F:				; CODE XREF: sub_FB96+C5j
		push	ax
		call	sub_43C4
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		push	ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		mov	ax, 138h
		push	ax
		mov	ax, 8
		push	ax
		push	ax
		call	sub_4676
		add	sp, 0Ch
		mov	ax, 1
		push	ax
		mov	ax, 8
		push	ax
		mov	ax, 0C3h ; 'У'
		push	ax
		mov	ax, 137h
		push	ax
		mov	ax, 0AFh ; 'Џ'
		push	ax
		mov	ax, 8
		push	ax
		call	sub_4676
		add	sp, 0Ch
		push	ds
		mov	ax, 2AFBh
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 7
		push	ax
		mov	ax, 0B4h ; 'Д'
		push	ax
		mov	ax, 3Ch	; '<'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		push	ds
		mov	ax, 2B29h
		push	ax
		xor	ax, ax
		push	ax
		mov	ax, 0Eh
		push	ax
		mov	ax, 4Bh	; 'K'
		push	ax
		mov	ax, 48h	; 'H'
		push	ax
		call	sub_D3D2
		add	sp, 0Ch
		mov	si, 190h
		jmp	short loc_FCEE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FCDE:				; CODE XREF: sub_FB96+15Cj
		cmp	byte_1A13E, 0
		jz	short loc_FCED
		push	si
		call	sub_134B3
		inc	sp
		inc	sp

loc_FCED:				; CODE XREF: sub_FB96+14Dj
		inc	si

loc_FCEE:				; CODE XREF: sub_FB96+146j
		cmp	si, 7D0h
		jl	short loc_FCDE
		call	sub_134DF
		inc	di

loc_FCFA:				; CODE XREF: sub_FB96+B3j
		cmp	di, 2
		jge	short loc_FD02
		jmp	loc_FC4C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FD02:				; CODE XREF: sub_FB96+167j
					; sub_FB96+178j
		call	sub_12827
		call	sub_12B2C
		or	ax, ax
		jnz	short loc_FD02
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_FB96	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_FD16	proc far		; CODE XREF: sub_3DEF+B5P
		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_FD26
		call	far ptr	errStackOverflow

loc_FD26:				; CODE XREF: sub_FD16+9j
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 2AEEh
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	di, ax
		xor	ax, ax
		push	ax
		mov	dx, ax
		mov	ax, 2D0h
		push	dx
		push	ax
		push	di
		call	sub_12B32
		add	sp, 8
		mov	ax, 9Ch	; ''
		push	ax
		push	ds
		mov	ax, 1B2h
		push	ax
		push	di
		call	sub_12FF7
		add	sp, 8
		push	di
		call	sub_11DD6
		inc	sp
		inc	sp
		mov	al, byte ptr word_14372
		mov	byte_19E8C, al
		mov	al, byte ptr word_14398
		mov	byte_1A13E, al
		mov	ax, word_14396
		mov	word_197A2, ax
		mov	al, byte ptr word_1439A
		mov	byte_18044, al
		mov	ax, word_1439C
		mov	word_14968, ax
		mov	ax, word_1439E
		mov	word_1496A, ax
		mov	ax, word_143A0
		mov	word_1496C, ax
		mov	ax, word_143A2
		mov	word_1496E, ax
		xor	si, si
		jmp	short loc_FDA3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FD9A:				; CODE XREF: sub_FD16+90j
		mov	al, [si+1E4h]
		mov	[si+80Ah], al
		inc	si

loc_FDA3:				; CODE XREF: sub_FD16+82j
		cmp	si, 7
		jl	short loc_FD9A
		mov	al, byte ptr word_1440C
		mov	byte_1493E, al
		pop	bp
		pop	di
		pop	si
		retf
sub_FD16	endp ; sp = -2


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_FDB2	proc far		; CODE XREF: sub_3DEF:loc_42E2P
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_FDC0
		call	far ptr	errStackOverflow

loc_FDC0:				; CODE XREF: sub_FDB2+7j
		mov	ax, 7
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		call	sub_11E3F
		inc	sp
		inc	sp
		push	ds
		mov	ax, 2B40h
		push	ax
		call	sub_11FEC
		add	sp, 4
		cmp	byte_14244, 0
		jz	short loc_FDEC
		jmp	loc_FEB6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FDEC:				; CODE XREF: sub_FDB2+35j
		mov	ax, 4
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 2B73h
		push	ax
		call	sub_11FEC
		add	sp, 4
		push	ds
		mov	ax, 2BC0h
		push	ax
		call	sub_11FEC
		add	sp, 4
		push	ds
		mov	ax, 2C0Eh
		push	ax
		call	sub_11FEC
		add	sp, 4
		mov	ax, 0Ah
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 2C4Eh
		push	ax
		call	sub_11FEC
		add	sp, 4
		mov	ax, 2
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 2C66h
		push	ax
		call	sub_11FEC
		add	sp, 4
		push	ds
		mov	ax, 2C9Eh
		push	ax
		call	sub_11FEC
		add	sp, 4
		push	ds
		mov	ax, 2CC2h
		push	ax
		call	sub_11FEC
		add	sp, 4
		push	ds
		mov	ax, 2CF6h
		push	ax
		call	sub_11FEC
		add	sp, 4
		push	ds
		mov	ax, 2D1Eh
		push	ax
		call	sub_11FEC
		add	sp, 4
		push	ds
		mov	ax, 2D51h
		push	ax
		call	sub_11FEC
		add	sp, 4
		push	ds
		mov	ax, 2D89h
		push	ax
		call	sub_11FEC
		add	sp, 4
		mov	ax, 4
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 2DCBh
		push	ax
		call	sub_11FEC
		add	sp, 4
		jmp	short loc_FEFD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FEB6:				; CODE XREF: sub_FDB2+37j
		xor	ax, ax
		push	ax
		call	sub_11E3F
		inc	sp
		inc	sp
		mov	ax, 4
		push	ax
		call	sub_11E29
		inc	sp
		inc	sp
		push	ds
		mov	ax, 2E16h
		push	ax
		call	sub_11FEC
		add	sp, 4
		push	ds
		mov	ax, 2E5Fh
		push	ax
		call	sub_11FEC
		add	sp, 4
		mov	ax, 7
		push	ax

loc_FEE9:
		call	sub_11E29

loc_FEEE:
		inc	sp

loc_FEEF:
		inc	sp

loc_FEF0:
		push	ds
		mov	ax, 2EA7h
		push	ax
		call	sub_11FEC
		add	sp, 4

loc_FEFD:				; CODE XREF: sub_FDB2+102j
		pop	bp

locret_FEFE:
		retf
sub_FDB2	endp ; sp = -0Ah

seg006		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg007		segment	byte public 'CODE' use16
		assume cs:seg007
		;org 0Fh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

couldItBeDecompress proc far		; CODE XREF: sub_66A+61EP
					; couldBeLoadCastle+1A6P ...

byteSeqIf2	= byte ptr -3
srcByte		= byte ptr -2
repsRemaining	= byte ptr -1
arg_0		= dword	ptr  0Ah
srcBytesToProcess= word	ptr  0Eh
arg_6		= dword	ptr  10h
maybeMaxOutputBytes= word ptr  14h

		push	si		; srcBytes is 11,858 bytes for Castle 1, I think
					; maxOutputBytes is 45,000 I think
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short notStackOverflow
		call	far ptr	errStackOverflow

notStackOverflow:			; CODE XREF: couldItBeDecompress+Cj
		les	bx, [bp+arg_0]
		mov	al, es:[bx]
		mov	[bp+byteSeqIf2], al
		mov	di, 1
		xor	si, si

nextByteSrc:				; CODE XREF: couldItBeDecompress+8Fj
		les	bx, [bp+arg_0]
		mov	al, es:[bx+di]	; Looks	like di	is the index into the compressed file
		mov	[bp+repsRemaining], al
		inc	di
		cmp	[bp+repsRemaining], 0
		jz	short finishedReps
		cmp	[bp+byteSeqIf2], 1
		jnz	short copyByteSequence ; Called	plenty of times
		mov	al, es:[bx+di]
		mov	[bp+srcByte], al
		inc	di

nextByteDest:				; CODE XREF: couldItBeDecompress+56j
		cmp	[bp+repsRemaining], 0
		jz	short finishedReps ; Seen many times (1200+)
		mov	al, [bp+srcByte]
		les	bx, [bp+arg_6]
		mov	es:[bx+si], al	; Looks	like si	is the index into the output
		inc	si
		cmp	si, [bp+maybeMaxOutputBytes]
		jnb	short clearAxAndEnd ; Not seen during partial normal load
		dec	[bp+repsRemaining]
		jmp	short nextByteDest
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

copyByteSequence:			; CODE XREF: couldItBeDecompress+35j
					; couldItBeDecompress+78j
		cmp	[bp+repsRemaining], 0
		jz	short finishedReps
		les	bx, [bp+arg_0]
		mov	al, es:[bx+di]
		les	bx, [bp+arg_6]
		mov	es:[bx+si], al
		inc	si
		inc	di
		cmp	si, [bp+maybeMaxOutputBytes]
		jb	short continueCopyBytes

clearAxAndEnd:				; CODE XREF: couldItBeDecompress+51j
		xor	ax, ax		; Probably indicates failure
		jmp	short end
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

continueCopyBytes:			; CODE XREF: couldItBeDecompress+6Fj
		dec	[bp+repsRemaining]
		jmp	short copyByteSequence
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

finishedReps:				; CODE XREF: couldItBeDecompress+2Fj
					; couldItBeDecompress+42j ...
		cmp	[bp+byteSeqIf2], 1
		jnz	short clearByteSeqMode
		mov	[bp+byteSeqIf2], 2 ; This puts us into byte-sequence mode
		jmp	short loc_FF89
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

clearByteSeqMode:			; CODE XREF: couldItBeDecompress+7Ej
		mov	[bp+byteSeqIf2], 1

loc_FF89:				; CODE XREF: couldItBeDecompress+84j
		cmp	di, [bp+srcBytesToProcess]
		jnb	short setAxAndEnd
		jmp	nextByteSrc
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

setAxAndEnd:				; CODE XREF: couldItBeDecompress+8Dj
		mov	ax, si		; Probably si is returned in ax	to indicate the	number of bytes	output

end:					; CODE XREF: couldItBeDecompress+73j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
couldItBeDecompress endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_FF99	proc far		; CODE XREF: seg006:0162P

var_9		= word ptr -9
var_7		= word ptr -7
var_5		= word ptr -5
var_2		= word ptr -2
arg_0		= dword	ptr  0Ah
arg_4		= word ptr  0Eh
arg_6		= word ptr  10h
arg_8		= word ptr  12h
arg_A		= word ptr  14h

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		cmp	word_17D9E, sp
		ja	short loc_FFAC
		call	far ptr	errStackOverflow

loc_FFAC:				; CODE XREF: sub_FF99+Cj
		cmp	[bp+arg_4], 4
		jnb	short loc_FFB5
		jmp	loc_10153
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_FFB5:				; CODE XREF: sub_FF99+17j
		mov	[bp+var_5+1], 0
		xor	di, di
		mov	byte ptr [bp+var_9], 0

loc_FFC0:				; CODE XREF: sub_FF99:loc_1016Bj
		mov	al, byte ptr [bp+var_9]
		mov	byte ptr [bp+var_9+1], al
		mov	byte ptr [bp+var_9], 2
		mov	ax, [bp+arg_4]
		sub	ax, [bp+var_5+1]
		cmp	ax, 2
		jbe	short loc_10003
		les	bx, [bp+arg_0]
		add	bx, [bp+var_5+1]
		mov	al, es:[bx]
		mov	bx, word ptr [bp+arg_0]
		add	bx, [bp+var_5+1]
		cmp	al, es:[bx+1]
		jnz	short loc_10003
		mov	bx, word ptr [bp+arg_0]
		add	bx, [bp+var_5+1]
		mov	al, es:[bx]
		mov	bx, word ptr [bp+arg_0]
		add	bx, [bp+var_5+1]
		cmp	al, es:[bx+2]

loc_FFFD:
		jnz	short loc_10003

loc_FFFF:
		mov	byte ptr [bp+var_9], 1

loc_10003:				; CODE XREF: sub_FF99+3Aj sub_FF99+4Fj ...
		cmp	byte ptr [bp+var_9+1], 0
		jnz	short loc_10025
		mov	ax, 1
		push	ax
		push	ss
		lea	ax, [bp+var_9]
		push	ax
		mov	dx, [bp+arg_8]
		mov	ax, [bp+arg_6]
		add	ax, di
		push	dx
		push	ax
		call	copyCastleStuff
		add	sp, 0Ah
		inc	di

loc_10025:				; CODE XREF: sub_FF99+6Ej
		mov	al, byte ptr [bp+var_9]
		cmp	al, byte ptr [bp+var_9+1]
		jnz	short loc_10055
		mov	byte ptr [bp+var_5], 0
		mov	ax, 1
		push	ax
		push	ss
		lea	ax, [bp+var_5]
		push	ax
		mov	dx, [bp+arg_8]
		mov	ax, [bp+arg_6]
		add	ax, di
		push	dx
		push	ax
		call	copyCastleStuff
		add	sp, 0Ah
		inc	di
		cmp	di, [bp+arg_A]
		jb	short loc_10055
		jmp	loc_10153
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10055:				; CODE XREF: sub_FF99+92j sub_FF99+B7j
		mov	si, [bp+var_5+1]
		mov	[bp+var_2], 0
		cmp	byte ptr [bp+var_9], 1
		jnz	short loc_1008B
		les	bx, [bp+arg_0]
		add	bx, si
		mov	al, es:[bx]
		mov	byte ptr [bp+var_7], al

loc_1006E:				; CODE XREF: sub_FF99+F0j
		cmp	[bp+var_2], 0FFh
		jnb	short loc_100D6
		cmp	si, [bp+arg_4]
		jnb	short loc_100D6
		les	bx, [bp+arg_0]
		mov	al, es:[bx+si]
		cmp	al, byte ptr [bp+var_7]
		jnz	short loc_100D6
		inc	si
		inc	[bp+var_2]
		jmp	short loc_1006E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1008B:				; CODE XREF: sub_FF99+C8j
		mov	byte ptr [bp+var_7+1], 0

loc_1008F:				; CODE XREF: sub_FF99+135j
					; sub_FF99+13Bj
		cmp	[bp+var_2], 0FFh
		jnb	short loc_100D6
		cmp	si, [bp+arg_4]
		jnb	short loc_100D6
		cmp	byte ptr [bp+var_7+1], 0
		jnz	short loc_100D6
		mov	ax, [bp+arg_4]
		sub	ax, si
		cmp	ax, 2
		jbe	short loc_100D0
		les	bx, [bp+arg_0]
		mov	al, es:[bx+si]
		add	bx, si
		cmp	al, es:[bx+1]
		jnz	short loc_100D0
		mov	bx, word ptr [bp+arg_0]
		mov	al, es:[bx+si]
		mov	bx, word ptr [bp+arg_0]
		add	bx, si
		cmp	al, es:[bx+2]
		jnz	short loc_100D0
		mov	byte ptr [bp+var_7+1], 1
		jmp	short loc_1008F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_100D0:				; CODE XREF: sub_FF99+110j
					; sub_FF99+11Ej ...
		inc	si
		inc	[bp+var_2]
		jmp	short loc_1008F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_100D6:				; CODE XREF: sub_FF99+DAj sub_FF99+DFj ...
		mov	al, byte ptr [bp+var_2]
		mov	byte ptr [bp+var_5], al
		mov	ax, 1
		push	ax
		push	ss
		lea	ax, [bp+var_5]
		push	ax
		mov	dx, [bp+arg_8]
		mov	ax, [bp+arg_6]
		add	ax, di
		push	dx
		push	ax
		call	copyCastleStuff
		add	sp, 0Ah
		inc	di
		cmp	di, [bp+arg_A]
		jnb	short loc_10153
		cmp	byte ptr [bp+var_9], 1
		jnz	short loc_10126
		mov	ax, 1
		push	ax
		push	ss
		lea	ax, [bp+var_7]
		push	ax
		mov	dx, [bp+arg_8]
		mov	ax, [bp+arg_6]
		add	ax, di
		push	dx
		push	ax
		call	copyCastleStuff
		add	sp, 0Ah
		inc	di
		cmp	di, [bp+arg_A]
		jb	short loc_1015D
		jmp	short loc_10153
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10126:				; CODE XREF: sub_FF99+168j
		xor	si, si
		jmp	short loc_10158
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1012A:				; CODE XREF: sub_FF99+1C2j
		mov	ax, 1
		push	ax
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		add	ax, [bp+var_5+1]
		add	ax, si
		push	dx
		push	ax
		mov	dx, [bp+arg_8]
		mov	ax, [bp+arg_6]
		add	ax, di
		push	dx
		push	ax
		call	copyCastleStuff
		add	sp, 0Ah
		inc	di
		cmp	di, [bp+arg_A]
		jb	short loc_10157

loc_10153:				; CODE XREF: sub_FF99+19j sub_FF99+B9j ...
		xor	ax, ax
		jmp	short loc_10170
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10157:				; CODE XREF: sub_FF99+1B8j
		inc	si

loc_10158:				; CODE XREF: sub_FF99+18Fj
		cmp	si, [bp+var_2]
		jb	short loc_1012A

loc_1015D:				; CODE XREF: sub_FF99+189j
		mov	ax, [bp+var_2]
		add	[bp+var_5+1], ax
		mov	ax, [bp+var_5+1]
		cmp	ax, [bp+arg_4]
		jnb	short loc_1016E

loc_1016B:
		jmp	loc_FFC0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1016E:				; CODE XREF: sub_FF99+1D0j
		mov	ax, di

loc_10170:				; CODE XREF: sub_FF99+1BCj
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_FF99	endp

seg007		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg008		segment	byte public 'CODE' use16
		assume cs:seg008
		;org 6
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10176	proc far		; CODE XREF: sub_3DEF+21P
		push	si
		push	di
		push	bp
		mov	bp, sp

loc_1017B:
		cmp	word_17D9E, sp
		ja	short loc_10186
		call	far ptr	errStackOverflow

loc_10186:				; CODE XREF: sub_10176+9j
		mov	word_170BE, 220h
		mov	word_170C0, 7
		call	sub_1078E
		mov	di, ax
		or	di, di
		jz	short loc_101A0
		jmp	loc_10322
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_101A0:				; CODE XREF: sub_10176+25j
		mov	byte_18141, 2
		mov	ax, 8004h
		push	ax
		push	ds
		mov	ax, 2EDEh
		push	ax
		call	sub_12E18
		add	sp, 6
		mov	si, ax
		mov	ax, 0A8h ; 'Ј'
		push	ax
		push	ds
		mov	ax, 553Ah
		push	ax
		push	si
		call	sub_12FF7
		add	sp, 8
		xor	ax, ax
		push	ax
		push	word_19744
		push	word_19742
		push	si
		call	sub_12B32
		add	sp, 8
		mov	ax, word_1978E
		mov	word_1A80C, ax
		xor	dx, dx
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word_1A810, dx
		mov	word_1A80E, ax
		or	dx, ax
		jnz	short loc_10208
		push	ds
		mov	ax, 2EEBh
		push	ax
		call	sub_6927
		add	sp, 4

loc_10208:				; CODE XREF: sub_10176+83j
		push	word_1A80C
		push	word_1A810
		push	word_1A80E
		push	si
		call	sub_12FF7
		add	sp, 8
		xor	ax, ax
		push	ax
		push	word_19748
		push	word_19746
		push	si
		call	sub_12B32
		add	sp, 8
		mov	ax, word_19790
		mov	word_1A812, ax
		mov	ax, word_1978E
		inc	ax
		xor	dx, dx
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word_1A816, dx
		mov	word_1A814, ax
		or	dx, ax
		jnz	short loc_1025F
		push	ds
		mov	ax, 2EEBh
		push	ax
		call	sub_6927
		add	sp, 4

loc_1025F:				; CODE XREF: sub_10176+DAj
		push	word_1A812
		push	word_1A816
		push	word_1A814
		push	si
		call	sub_12FF7
		add	sp, 8
		xor	ax, ax
		push	ax
		push	word_1974C

loc_1027B:
		push	word_1974A
		push	si
		call	sub_12B32
		add	sp, 8
		mov	ax, word_19792
		mov	word_1A822, ax
		xor	dx, dx
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word_1A81C, dx
		mov	word_1A81A, ax
		or	dx, ax
		jnz	short loc_102B2
		push	ds
		mov	ax, 2EEBh
		push	ax
		call	sub_6927
		add	sp, 4

loc_102B2:				; CODE XREF: sub_10176+12Dj
		push	word_1A822
		push	word_1A81C
		push	word_1A81A
		push	si
		call	sub_12FF7
		add	sp, 8
		xor	ax, ax
		push	ax
		push	word_19750
		push	word_1974E
		push	si
		call	sub_12B32
		add	sp, 8
		mov	ax, word_19794
		mov	word_1A818, ax
		xor	dx, dx
		push	dx
		push	ax
		call	sub_126BA
		add	sp, 4
		mov	word_1A820, dx
		mov	word_1A81E, ax
		or	dx, ax
		jnz	short loc_10305
		push	ds
		mov	ax, 2EEBh
		push	ax
		call	sub_6927
		add	sp, 4

loc_10305:				; CODE XREF: sub_10176+180j
		push	word_1A818
		push	word_1A820
		push	word_1A81E
		push	si
		call	sub_12FF7
		add	sp, 8
		push	si
		call	sub_11DD6
		inc	sp
		inc	sp

loc_10322:				; CODE XREF: sub_10176+27j
		pop	bp
		pop	di
		pop	si
		retf
sub_10176	endp ; sp = -2


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10326	proc far		; CODE XREF: sub_3DEF+4F8P
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10334
		call	far ptr	errStackOverflow

loc_10334:				; CODE XREF: sub_10326+7j
		cmp	byte_18141, 2
		jnz	short loc_10377
		cmp	byte_1A13E, 0
		jz	short loc_10377
		push	word_1A810
		push	word_1A80E
		call	sub_12481
		add	sp, 4
		push	word_1A816
		push	word_1A814
		call	sub_12481
		add	sp, 4
		push	word_1A81C
		push	word_1A81A
		call	sub_12481
		add	sp, 4
		call	sub_108DD

loc_10377:				; CODE XREF: sub_10326+13j
					; sub_10326+1Aj
		pop	bp
		retf
sub_10326	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10379	proc far		; CODE XREF: sub_DE8+1E3P
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10387
		call	far ptr	errStackOverflow

loc_10387:				; CODE XREF: sub_10379+7j
		cmp	byte_18141, 2
		jnz	short loc_103B4
		cmp	byte_1A13E, 0
		jz	short loc_103B4
		mov	ax, 32C8h
		push	ax
		mov	ax, word_1A80C
		add	ax, 0FF1Fh
		push	ax
		mov	dx, word_1A810
		mov	ax, word_1A80E
		add	ax, 0A0h ; ' '
		push	dx
		push	ax
		call	sub_107E2
		add	sp, 8

loc_103B4:				; CODE XREF: sub_10379+13j
					; sub_10379+1Aj
		pop	bp
		retf
sub_10379	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_103B6	proc far		; CODE XREF: sub_DE8+35DP
					; sub_23BE+337P
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_103C4
		call	far ptr	errStackOverflow

loc_103C4:				; CODE XREF: sub_103B6+7j
		cmp	byte_18141, 2
		jnz	short loc_103EA
		cmp	byte_1A13E, 0
		jz	short loc_103EA
		mov	ax, 1770h
		push	ax
		push	word_1A812
		push	word_1A816
		push	word_1A814
		call	sub_107E2
		add	sp, 8

loc_103EA:				; CODE XREF: sub_103B6+13j
					; sub_103B6+1Aj
		pop	bp
		retf
sub_103B6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_103EC	proc far		; CODE XREF: sub_DE8+E8AP
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_103FA
		call	far ptr	errStackOverflow

loc_103FA:				; CODE XREF: sub_103EC+7j
		cmp	byte_18141, 2
		jnz	short loc_10427
		cmp	byte_1A13E, 0
		jz	short loc_10427
		mov	ax, 1770h
		push	ax
		mov	ax, word_1A822
		add	ax, 0FF1Fh
		push	ax
		mov	dx, word_1A81C
		mov	ax, word_1A81A
		add	ax, 0A0h ; ' '
		push	dx
		push	ax
		call	sub_107E2
		add	sp, 8

loc_10427:				; CODE XREF: sub_103EC+13j
					; sub_103EC+1Aj
		pop	bp
		retf
sub_103EC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10429	proc far		; CODE XREF: sub_DE8+104BP
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10437
		call	far ptr	errStackOverflow

loc_10437:				; CODE XREF: sub_10429+7j
		cmp	byte_18141, 2
		jnz	short loc_10464
		cmp	byte_1A13E, 0
		jz	short loc_10464
		mov	ax, 2AF8h
		push	ax
		mov	ax, word_1A818
		add	ax, 0FC63h
		push	ax
		mov	dx, word_1A820
		mov	ax, word_1A81E
		add	ax, 280h
		push	dx
		push	ax

loc_1045C:
		call	sub_107E2
		add	sp, 8

loc_10464:				; CODE XREF: sub_10429+13j
					; sub_10429+1Aj
		pop	bp
		retf
sub_10429	endp

seg008		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg009		segment	byte public 'CODE' use16
		assume cs:seg009
		;org 6
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_10466	proc near		; CODE XREF: sub_104E3+Cp
					; sub_104E3+13p ...
		push	cx
		mov	cx, 200h
		mov	ah, al

loc_1046C:				; CODE XREF: sub_10466+Bj
		in	al, dx

loc_1046D:
		or	al, al
		jns	short loc_10476
		loop	loc_1046C
		stc
		jmp	short loc_1047A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10476:				; CODE XREF: sub_10466+9j
		mov	al, ah
		out	dx, al
		clc

loc_1047A:				; CODE XREF: sub_10466+Ej
		pop	cx
		retn
sub_10466	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_1047C	proc near		; CODE XREF: sub_104BC:loc_104CEp
					; sub_104E3:loc_104FBp	...
		push	cx
		push	dx
		mov	dx, word_170BE
		add	dl, 0Eh
		mov	cx, 200h

loc_10488:				; CODE XREF: sub_1047C+11j
		in	al, dx
		or	al, al
		js	short loc_10492
		loop	loc_10488
		stc
		jmp	short loc_10497
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10492:				; CODE XREF: sub_1047C+Fj
		sub	dl, 4
		in	al, dx
		clc

loc_10497:				; CODE XREF: sub_1047C+14j
		pop	dx
		pop	cx
		retn
sub_1047C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_1049A	proc near		; CODE XREF: sub_1050B+3Ap
					; sub_1057E+9p	...
		mov	ah, al
		mov	al, 0F0h ; '№'

loc_1049E:				; CODE XREF: sub_1049A+7j
		in	al, dx
		or	al, al
		js	short loc_1049E
		mov	al, ah
		out	dx, al
		retn
sub_1049A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_104A7	proc near		; CODE XREF: sub_1057E+Cp
					; sub_1057E+11p
		push	dx
		mov	dx, word_170BE
		add	dl, 0Eh
		sub	al, al

loc_104B1:				; CODE XREF: sub_104A7+Dj
		in	al, dx
		or	al, al
		jns	short loc_104B1
		sub	dl, 4
		in	al, dx
		pop	dx
		retn
sub_104A7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_104BC	proc near		; CODE XREF: sub_1078E+Bp
					; seg009:loc_10934p
		mov	dx, word_170BE
		add	dl, 6
		mov	al, 1
		out	dx, al
		in	al, dx

loc_104C7:				; CODE XREF: sub_104BC+Dj
		inc	al
		jnz	short loc_104C7
		out	dx, al
		mov	cl, 20h	; ' '

loc_104CE:				; CODE XREF: sub_104BC+1Bj
		call	sub_1047C
		cmp	al, 0AAh ; 'Њ'
		jz	short loc_104DE
		dec	cl
		jnz	short loc_104CE
		mov	ax, 2
		jmp	short loc_104E0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_104DE:				; CODE XREF: sub_104BC+17j
		sub	ax, ax

loc_104E0:				; CODE XREF: sub_104BC+20j
		or	ax, ax
		retn
sub_104BC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_104E3	proc near		; CODE XREF: sub_1078E+10p
		mov	bx, 2
		mov	al, 0E0h ; 'р'
		mov	dx, word_170BE
		add	dx, 0Ch
		call	sub_10466
		jb	short loc_10506
		mov	al, 0AAh ; 'Њ'
		call	sub_10466
		jb	short loc_10506

loc_104FB:
		call	sub_1047C
		jb	short loc_10506
		cmp	al, 55h	; 'U'
		jnz	short loc_10506
		sub	bx, bx

loc_10506:				; CODE XREF: sub_104E3+Fj
					; sub_104E3+16j ...
		mov	ax, bx
		or	ax, ax
		retn
sub_104E3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_1050B	proc near		; CODE XREF: sub_1078E+1Ap
		mov	al, 2
		mov	dx, 205h
		mov	bx, 2F03h
		call	sub_10602
		mov	al, 3
		mov	dx, 20Ah
		mov	bx, 2F07h
		call	sub_10602
		mov	al, 5
		mov	dx, 20Fh
		mov	bx, 2F0Bh
		call	sub_10602
		mov	al, 7
		mov	dx, 214h
		mov	bx, 2F0Fh
		call	sub_10602
		mov	byte ptr word_170C0, 0
		mov	dx, word_170BE
		add	dx, 0Ch
		mov	al, 0F2h ; 'ђ'
		call	sub_1049A
		sub	ax, ax
		mov	cx, 800h

loc_1054D:				; CODE XREF: sub_1050B+49j
		cmp	byte ptr word_170C0, 0
		jnz	short loc_10559
		loop	loc_1054D
		mov	ax, 3

loc_10559:				; CODE XREF: sub_1050B+47j
		push	ax
		mov	al, 2
		mov	bx, 2F03h
		call	sub_1063B
		mov	al, 3
		mov	bx, 2F07h
		call	sub_1063B
		mov	al, 5
		mov	bx, 2F0Bh
		call	sub_1063B
		mov	al, 7
		mov	bx, 2F0Fh
		call	sub_1063B
		pop	ax
		or	ax, ax
		retn
sub_1050B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_1057E	proc near		; CODE XREF: sub_1078E+15p
		mov	al, 0E1h ; 'с'
		mov	dx, word_170BE
		add	dl, 0Ch
		call	sub_1049A
		call	sub_104A7
		mov	ah, al
		call	sub_104A7
		mov	bx, 1
		cmp	ax, 101h
		jb	short loc_1059C
		sub	bx, bx

loc_1059C:				; CODE XREF: sub_1057E+1Aj
		mov	ax, bx
		or	ax, ax
		retn
sub_1057E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_105A1	proc near		; CODE XREF: seg009:0429p seg009:044Bp ...
		pushf
		mov	ah, 0D0h ; 'а'
		mov	bx, 2F01h
		sub	cx, cx
		mov	dx, word_170BE
		add	dl, 0Ch

loc_105B0:				; CODE XREF: sub_105A1+18j
		sti
		cmp	cx, [bx]
		jz	short loc_105C3
		cli
		in	al, dx
		or	al, al
		jns	short loc_105B0

loc_105BB:				; CODE XREF: sub_105A1+1Dj
		in	al, dx
		or	al, al
		js	short loc_105BB
		mov	al, ah
		out	dx, al

loc_105C3:				; CODE XREF: sub_105A1+12j
		popf
		retn
sub_105A1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_105C5	proc near		; CODE XREF: sub_106C8+39p
		push	bx
		mov	bx, ax
		mov	al, 5
		out	0Ah, al		; DMA controller, 8237A-5.
					; single mask bit register
					; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
					; 2: 1=set mask	for channel; 0=clear mask (enable)
		sub	al, al
		out	0Ch, al		; DMA controller, 8237A-5.
					; clear	byte pointer flip-flop.
		mov	al, dh
		out	0Bh, al		; DMA 8237A-5. mode register bits:
					; 0-1: channel (00=0; 01=1; 10=2; 11=3)
					; 2-3: transfer	type (00=verify=Nop; 01=write; 10=read)
					; 4: 1=enable auto-initialization
					; 5: 1=address increment; 0=address decrement
					; 6-7: 00=demand mode; 01=single; 10=block; 11=cascade
		mov	al, bl
		out	2, al		; DMA controller, 8237A-5.
					; channel 1 base address
					; (also	sets current address)
		mov	al, bh
		out	2, al		; DMA controller, 8237A-5.
					; channel 1 base address
					; (also	sets current address)
		mov	al, cl
		out	3, al		; DMA controller, 8237A-5.
					; channel 1 base address and word count
		mov	al, ch
		out	3, al		; DMA controller, 8237A-5.
					; channel 1 base address and word count
		mov	al, dl
		out	83h, al		; DMA page register 74LS612:
					; Channel 1 (address bits 16-23)
		mov	al, 1
		out	0Ah, al		; DMA controller, 8237A-5.
					; single mask bit register
					; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
					; 2: 1=set mask	for channel; 0=clear mask (enable)
		pop	bx
		retn
sub_105C5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_105EE	proc near		; CODE XREF: sub_107E2+59p
		push	cx
		mov	cl, 4
		rol	dx, cl
		mov	cx, dx
		and	dx, 0Fh
		and	cx, 0FFF0h
		add	ax, cx
		adc	dx, 0
		pop	cx
		retn
sub_105EE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_10602	proc near		; CODE XREF: sub_1050B+8p
					; sub_1050B+13p ...
		push	bx
		push	cx
		push	dx
		cli
		mov	cl, al
		add	al, 8
		cbw
		shl	al, 1
		shl	al, 1
		mov	di, ax
		push	es
		sub	ax, ax
		mov	es, ax
		assume es:seg000
		mov	ax, es:[di]
		mov	[bx], ax
		mov	es:[di], dx
		mov	ax, es:[di+2]
		mov	[bx+2],	ax
		mov	word ptr es:[di+2], cs
		pop	es
		assume es:nothing
		mov	ah, 1
		shl	ah, cl
		not	ah
		in	al, 21h		; Interrupt controller,	8259A.
		and	al, ah
		out	21h, al		; Interrupt controller,	8259A.
		sti
		pop	dx
		pop	cx
		pop	bx
		retn
sub_10602	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_1063B	proc near		; CODE XREF: sub_1050B+54p
					; sub_1050B+5Cp ...
		cli
		mov	cl, al
		add	al, 8
		cbw
		shl	al, 1
		shl	al, 1
		mov	di, ax
		push	es
		sub	ax, ax
		mov	es, ax
		assume es:seg000
		mov	ax, [bx]
		mov	es:[di], ax
		mov	ax, [bx+2]
		mov	es:[di+2], ax
		pop	es
		assume es:nothing
		mov	ah, 1
		shl	ah, cl
		in	al, 21h		; Interrupt controller,	8259A.
		or	al, ah
		out	21h, al		; Interrupt controller,	8259A.
		sti
		retn
sub_1063B	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	dx
		mov	dl, 2
		jmp	short loc_10677
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	dx
		mov	dl, 3
		jmp	short loc_10677
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	dx
		mov	dl, 5
		jmp	short loc_10677
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	dx
		mov	dl, 7

loc_10677:				; CODE XREF: seg009:0208j seg009:020Dj ...
		push	ds
		push	ax
		mov	ax, seg	dseg
		mov	ds, ax
		mov	byte ptr word_170C0, dl
		mov	dx, word_170BE
		add	dx, 0Eh
		in	al, dx
		mov	al, 20h	; ' '
		out	20h, al		; Interrupt controller,	8259A.
		pop	ax
		pop	ds
		pop	dx
		iret
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	ds
		push	es
		push	ax
		push	bx
		push	cx
		push	dx
		push	di
		push	si
		push	bp
		cld
		mov	ax, seg	dseg
		mov	ds, ax
		mov	es, ax
		assume es:dseg
		mov	dx, word_170BE
		add	dl, 0Eh
		in	al, dx
		mov	ax, word_170D9
		or	ax, ax
		jnz	short loc_106B7
		call	sub_1072D
		jmp	short loc_106BA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_106B7:				; CODE XREF: seg009:0250j
		call	sub_106C8

loc_106BA:				; CODE XREF: seg009:0255j
		mov	al, 20h	; ' '
		out	20h, al		; Interrupt controller,	8259A.
		pop	bp
		pop	si
		pop	di
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		pop	es
		assume es:nothing
		pop	ds
		iret

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_106C8	proc near		; CODE XREF: seg009:loc_106B7p
					; sub_107E2+87p
		mov	cx, 0FFFFh
		cmp	byte_170D8, 0
		jnz	short loc_106DA
		inc	byte_170D8
		mov	cx, word_170DD

loc_106DA:				; CODE XREF: sub_106C8+8j
		sub	cx, word_170D4
		mov	word_170D6, cx
		inc	cx
		jz	short loc_106F0
		sub	word_170D9, cx
		sbb	word_170DB, 0
		jmp	short loc_106F4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_106F0:				; CODE XREF: sub_106C8+1Bj
		dec	word_170DB

loc_106F4:				; CODE XREF: sub_106C8+26j
		mov	dh, 49h	; 'I'
		mov	dl, byte_170D3
		mov	ax, word_170D4
		mov	cx, word_170D6
		call	sub_105C5
		dec	byte_170D8
		inc	byte_170D3
		mov	word_170D4, 0
		mov	cx, word_170D6
		mov	dx, word_170BE
		add	dl, 0Ch
		mov	al, 14h
		call	sub_1049A
		mov	al, cl
		call	sub_1049A
		mov	al, ch
		call	sub_1049A
		retn
sub_106C8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_1072D	proc near		; CODE XREF: seg009:0252p seg009:042Cp ...
		mov	al, 5
		out	0Ah, al		; DMA controller, 8237A-5.
					; single mask bit register
					; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
					; 2: 1=set mask	for channel; 0=clear mask (enable)
		mov	al, byte ptr word_170C0
		mov	bx, 2F03h
		call	sub_1063B
		mov	word_170C0+1, 0
		mov	dx, word_170BE
		add	dl, 0Eh
		in	al, dx
		retn
sub_1072D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_10749	proc near		; CODE XREF: seg009:050Ep seg009:0521p
		push	cx
		push	dx
		mov	cx, 40h	; '@'
		mov	ah, al
		and	ah, 0E0h
		mov	dx, word_170BE
		add	dl, 8

loc_1075A:				; CODE XREF: sub_10749+18j
		in	al, dx
		and	al, 0E0h
		cmp	ah, al
		jz	short loc_10766
		loop	loc_1075A
		stc
		jmp	short loc_10767
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10766:				; CODE XREF: sub_10749+16j
		clc

loc_10767:				; CODE XREF: sub_10749+1Bj
		pop	dx
		pop	cx
		retn
sub_10749	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_1076A	proc near		; CODE XREF: seg009:04FDp seg009:0503p ...
		mov	dx, word_170BE
		add	dl, 8
		out	dx, al
		call	sub_1077D
		mov	al, ah
		inc	dx
		out	dx, al
		call	sub_1077D
		retn
sub_1076A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_1077D	proc near		; CODE XREF: sub_1076A+8p sub_1076A+Fp
		push	ax
		push	dx
		mov	dx, word_170BE
		add	dl, 8
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		pop	dx
		pop	ax
		retn
sub_1077D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_1078E	proc far		; CODE XREF: sub_10176+1CP
		push	ds
		push	es
		push	di
		push	si
		mov	ax, seg	dseg
		mov	ds, ax
		mov	es, ax
		assume es:dseg
		call	sub_104BC
		jnz	short loc_107B4
		call	sub_104E3
		jnz	short loc_107B4
		call	sub_1057E
		jnz	short loc_107B4
		call	sub_1050B
		jnz	short loc_107B4
		mov	al, 1
		call	sub_107CB
		sub	ax, ax

loc_107B4:				; CODE XREF: sub_1078E+Ej
					; sub_1078E+13j ...
		pop	si
		pop	di
		pop	es
		assume es:nothing
		pop	ds
		retf
sub_1078E	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		push	ds
		mov	ax, seg	dseg
		mov	ds, ax
		mov	ax, [bp+6]
		call	sub_107CB
		pop	ds
		pop	bp
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_107CB	proc near		; CODE XREF: sub_1078E+21p
					; seg009:0365p	...
		mov	dx, word_170BE
		add	dx, 0Ch
		mov	ah, 0D1h ; 'б'
		or	al, al
		jnz	short loc_107DA
		mov	ah, 0D3h ; 'г'

loc_107DA:				; CODE XREF: sub_107CB+Bj
		mov	al, ah
		call	sub_1049A
		sub	ax, ax
		retn
sub_107CB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_107E2	proc far		; CODE XREF: sub_10379+33P
					; sub_103B6+2CP ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	ds
		push	es
		push	di
		push	si

loc_107E9:
		mov	ax, seg	dseg
		mov	ds, ax
		mov	es, ax
		assume es:dseg
		cmp	word_170C0+1, 0
		jz	short loc_107FC
		mov	ax, 1
		jmp	short loc_1086E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_107FC:				; CODE XREF: sub_107E2+13j
		mov	word_170C0+1, 1
		mov	dx, word_170BE
		add	dl, 0Ch
		mov	dx, 0Fh
		mov	ax, 4240h
		mov	cx, [bp+arg_6]
		div	cx
		mov	cl, al
		neg	cl
		mov	dx, word_170BE
		add	dl, 0Ch
		mov	al, 40h	; '@'
		call	sub_1049A
		mov	al, cl
		call	sub_1049A
		mov	al, byte ptr word_170C0
		mov	dx, 232h
		mov	bx, 2F03h
		call	sub_10602
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		call	sub_105EE
		mov	byte_170D3, dl
		mov	word_170D4, ax
		mov	cx, [bp+arg_4]
		mov	word_170D9, cx
		mov	word_170DB, 0
		add	ax, [bp+arg_4]
		adc	dl, 0
		sub	ax, 1
		sbb	dl, 0
		mov	word_170DD, ax
		sub	dl, byte_170D3
		mov	byte_170D8, dl
		call	sub_106C8
		sub	ax, ax

loc_1086E:				; CODE XREF: sub_107E2+18j
		pop	si
		pop	di
		pop	es
		assume es:nothing
		pop	ds
		pop	bp
		retf
sub_107E2	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	ds
		push	es
		push	di
		push	si
		mov	ax, seg	dseg
		mov	ds, ax
		mov	es, ax
		assume es:dseg
		mov	ax, 1
		cmp	word_170C0+1, 0
		jz	short loc_10891
		call	sub_105A1
		call	sub_1072D
		sub	ax, ax

loc_10891:				; CODE XREF: seg009:0427j
		pop	si
		pop	di
		pop	es
		assume es:nothing
		pop	ds
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	ds
		push	es
		push	di
		push	si
		mov	ax, seg	dseg
		mov	ds, ax
		mov	es, ax
		assume es:dseg
		mov	ax, 1
		cmp	word_170C0+1, 1
		jnz	short loc_108B0
		call	sub_105A1
		sub	ax, ax

loc_108B0:				; CODE XREF: seg009:0449j
		pop	si
		pop	di
		pop	es
		assume es:nothing
		pop	ds
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	ds
		push	es
		push	di
		push	si
		mov	ax, seg	dseg
		mov	ds, ax
		mov	es, ax
		assume es:dseg
		mov	ax, 1
		cmp	word_170C0+1, 1
		jnz	short loc_108D8
		mov	dx, word_170BE
		add	dl, 0Ch
		mov	al, 0D4h ; 'д'
		call	sub_1049A
		sub	ax, ax

loc_108D8:				; CODE XREF: seg009:0468j
		pop	si
		pop	di
		pop	es
		assume es:nothing
		pop	ds
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_108DD	proc far		; CODE XREF: sub_10326+4CP
		push	ds
		push	es
		push	di
		push	si
		mov	ax, seg	dseg
		mov	ds, ax
		mov	es, ax
		assume es:dseg
		cmp	word_170C0+1, 0
		jz	short loc_108F5
		call	sub_105A1
		call	sub_1072D

loc_108F5:				; CODE XREF: sub_108DD+10j
		sub	al, al
		call	sub_107CB
		sub	ax, ax
		pop	si
		pop	di
		pop	es
		assume es:nothing
		pop	ds
		retf
sub_108DD	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dd 141CB81Eh
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		mov	ds, ax
		sub	bx, bx
		mov	dx, word_170BE
		add	dl, 6
		mov	al, 0C6h ; 'Ц'
		out	dx, al
		sub	al, al
		add	dl, 4
		out	dx, al
		in	al, dx
		cmp	al, 0C6h ; 'Ц'
		jnz	short loc_10934
		sub	dl, 4
		mov	al, 39h	; '9'
		out	dx, al
		sub	al, al
		add	dl, 4
		out	dx, al
		in	al, dx
		cmp	al, 39h	; '9'
		jnz	short loc_10934
		mov	bx, 1
		jmp	short loc_1095A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10934:				; CODE XREF: seg009:04BCj seg009:04CDj
		call	sub_104BC
		jnz	short loc_1095A
		mov	dx, word_170BE
		add	dl, 0Ch
		mov	al, 0E0h ; 'р'
		call	sub_10466
		jb	short loc_1095A
		mov	al, 0C6h ; 'Ц'
		call	sub_10466
		jb	short loc_1095A
		call	sub_1047C
		jb	short loc_1095A
		cmp	al, 39h	; '9'
		jnz	short loc_1095A
		mov	bx, 5

loc_1095A:				; CODE XREF: seg009:04D2j seg009:04D7j ...
		mov	ax, 1
		call	sub_1076A
		mov	ax, 6004h
		call	sub_1076A
		mov	ax, 8004h
		call	sub_1076A
		mov	al, 0
		call	sub_10749
		jb	short loc_10995
		mov	ax, 0FF02h
		call	sub_1076A
		mov	ax, 2104h
		call	sub_1076A
		mov	al, 0C0h ; 'Р'
		call	sub_10749
		jb	short loc_10995
		mov	ax, 6004h
		call	sub_1076A

loc_1098C:
		mov	ax, 8004h

loc_1098F:
		call	sub_1076A
		add	bx, 2

loc_10995:				; CODE XREF: seg009:0511j seg009:0524j
		mov	ax, bx
		pop	ds
		retf
seg009		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg010		segment	byte public 'CODE' use16
		assume cs:seg010
		;org 9
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10999	proc far		; CODE XREF: sub_10ACE+30P
					; sub_10ACE+45P ...

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp

loc_1099C:
		mov	dx, word_1AC84
		mov	ax, [bp+arg_0]
		out	dx, al
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		inc	dx
		mov	ax, [bp+arg_2]
		out	dx, al		; DMA controller, 8237A-5.
					; channel 0 base address and word count
		dec	dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx
		in	al, dx

loc_109CD:
		in	al, dx

loc_109CE:
		in	al, dx

loc_109CF:
		in	al, dx

loc_109D0:
		in	al, dx
		in	al, dx
		in	al, dx
		pop	bp
		retf
sub_10999	endp

seg010		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg011		segment	byte public 'CODE' use16
		assume cs:seg011
		;org 5
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_109D5	proc far		; CODE XREF: sub_11CA6+13p

arg_0		= word ptr  8

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp

loc_109DD:
		ja	short loc_109E4
		call	far ptr	errStackOverflow

loc_109E4:				; CODE XREF: sub_109D5:loc_109DDj
		mov	ax, [bp+arg_0]
		mov	word_1AC84, ax
		call	sub_1172B
		mov	sp, bp
		mov	si, ax
		call	sub_109FF
		mov	sp, bp
		mov	ax, si
		pop	bp
		pop	si
		retf
sub_109D5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_109FF	proc far		; CODE XREF: sub_109D5+1EP
					; sub_11CA6+22p
		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10A0E
		call	far ptr	errStackOverflow

loc_10A0E:				; CODE XREF: sub_109FF+8j
		call	sub_10EB1
		call	sub_10FF8
		xor	ax, ax
		push	ax
		call	sub_10A5A
		inc	sp
		inc	sp
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		call	sub_10B50
		add	sp, 6
		xor	si, si
		jmp	short loc_10A3C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10A33:				; CODE XREF: sub_109FF+40j
		push	si
		call	sub_116F9
		inc	sp
		inc	sp
		inc	si

loc_10A3C:				; CODE XREF: sub_109FF+32j
		cmp	si, 9
		jl	short loc_10A33
		mov	ax, 1
		push	ax
		call	sub_10B1D
		inc	sp
		inc	sp
		mov	ax, 1
		push	ax
		call	sub_10ACE
		inc	sp
		inc	sp
		pop	bp
		pop	si
		retf
sub_109FF	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10A5A	proc far		; CODE XREF: sub_109FF+1CP
					; sub_11CA6+2Ap

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10A68
		call	far ptr	errStackOverflow

loc_10A68:				; CODE XREF: sub_10A5A+7j
		cmp	[bp+arg_0], 0
		jz	short loc_10AB3
		mov	ax, 6
		push	ax
		call	sub_116F9
		mov	sp, bp
		mov	ax, 7
		push	ax
		call	sub_116F9
		mov	sp, bp
		mov	ax, 8
		push	ax
		call	sub_116F9
		mov	sp, bp
		xor	ax, ax
		push	ax
		mov	ax, 18h
		push	ax
		mov	ax, 8
		push	ax
		call	sub_11653
		mov	sp, bp
		xor	ax, ax
		push	ax
		mov	ax, 1Fh
		push	ax
		mov	ax, 7
		push	ax
		call	sub_11653
		mov	sp, bp

loc_10AB3:				; CODE XREF: sub_10A5A+12j
		mov	al, byte ptr [bp+arg_0]
		mov	byte_1AC87, al
		mov	byte_1A94F, 0
		call	sub_10DEB
		mov	sp, bp
		call	sub_115B7
		mov	sp, bp
		pop	bp
		retf
sub_10A5A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10ACE	proc far		; CODE XREF: sub_109FF+51P

arg_0		= word ptr  8

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10ADD
		call	far ptr	errStackOverflow

loc_10ADD:				; CODE XREF: sub_10ACE+8j
		cmp	[bp+arg_0], 0
		jz	short loc_10AE8
		mov	ax, 20h	; ' '
		jmp	short loc_10AEA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10AE8:				; CODE XREF: sub_10ACE+13j
		xor	ax, ax

loc_10AEA:				; CODE XREF: sub_10ACE+18j
		mov	word_1A82C, ax
		xor	si, si
		jmp	short loc_10B06
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10AF1:				; CODE XREF: sub_10ACE+3Bj
		xor	ax, ax
		push	ax
		mov	al, [si+38BEh]
		mov	ah, 0
		add	ax, 0E0h ; 'р'
		push	ax
		call	sub_10999
		mov	sp, bp
		inc	si

loc_10B06:				; CODE XREF: sub_10ACE+21j
		cmp	si, 12h
		jl	short loc_10AF1
		push	word_1A82C
		mov	ax, 1
		push	ax
		call	sub_10999
		mov	sp, bp
		pop	bp
		pop	si
		retf
sub_10ACE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10B1D	proc far		; CODE XREF: sub_109FF+46P

arg_0		= word ptr  8

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10B2C
		call	far ptr	errStackOverflow

loc_10B2C:				; CODE XREF: sub_10B1D+8j
		mov	si, [bp+arg_0]
		cmp	si, 0Ch
		jbe	short loc_10B37
		mov	si, 0Ch

loc_10B37:				; CODE XREF: sub_10B1D+15j
		cmp	si, 1
		jnb	short loc_10B3F
		mov	si, 1

loc_10B3F:				; CODE XREF: sub_10B1D+1Dj
		mov	word_1A94A, si
		mov	ax, si
		mov	dx, 19h
		mul	dx
		mov	word_1A94C, ax
		pop	bp
		pop	si
		retf
sub_10B1D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10B50	proc far		; CODE XREF: sub_109FF+28P

arg_0		= byte ptr  6
arg_2		= byte ptr  8
arg_4		= byte ptr  0Ah

		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10B5E
		call	far ptr	errStackOverflow

loc_10B5E:				; CODE XREF: sub_10B50+7j
		mov	al, [bp+arg_0]
		mov	byte_1AC86, al
		mov	al, [bp+arg_2]
		mov	byte_1ACCF, al
		mov	al, [bp+arg_4]
		mov	byte_1A82A, al
		call	sub_115B7
		mov	sp, bp
		call	sub_113EB
		mov	sp, bp
		pop	bp
		retf
sub_10B50	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10B80	proc far		; CODE XREF: sub_11865+25p
					; sub_118A9+25p ...

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  0Ah
arg_2		= dword	ptr  0Ch

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		cmp	word_17D9E, sp
		ja	short loc_10B93
		call	far ptr	errStackOverflow

loc_10B93:				; CODE XREF: sub_10B80+Cj
		mov	si, [bp+arg_0]
		les	bx, [bp+arg_2]
		add	bx, 34h	; '4'
		mov	[bp+var_2], es
		mov	[bp+var_4], bx
		mov	di, es:[bx]
		add	[bp+var_4], 2
		mov	bx, [bp+var_4]
		mov	ax, es:[bx]
		mov	[bp+var_A], ax
		mov	bx, word ptr [bp+arg_2]
		add	bx, 1Ah
		mov	[bp+var_6], es
		mov	[bp+var_8], bx
		cmp	byte_1AC87, 0
		jz	short loc_10BCA
		cmp	si, 6
		jge	short loc_10C02

loc_10BCA:				; CODE XREF: sub_10B80+43j
		push	di
		push	word ptr [bp+arg_2+2]
		push	word ptr [bp+arg_2]
		mov	bx, si
		shl	bx, 1
		mov	al, [bx+38A2h]
		mov	ah, 0
		push	ax
		call	sub_111D9
		add	sp, 8
		push	[bp+var_A]
		push	[bp+var_6]
		push	[bp+var_8]
		mov	bx, si
		shl	bx, 1
		mov	al, [bx+38A3h]
		mov	ah, 0
		push	ax
		call	sub_111D9
		add	sp, 8
		jmp	short loc_10C52
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10C02:				; CODE XREF: sub_10B80+48j
		cmp	si, 6
		jnz	short loc_10C35
		push	di
		push	word ptr [bp+arg_2+2]
		push	word ptr [bp+arg_2]
		mov	al, byte_17A74
		mov	ah, 0
		push	ax
		call	sub_111D9
		add	sp, 8
		push	[bp+var_A]
		push	[bp+var_6]
		push	[bp+var_8]
		mov	al, byte_17A75
		mov	ah, 0
		push	ax
		call	sub_111D9
		add	sp, 8
		jmp	short loc_10C52
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10C35:				; CODE XREF: sub_10B80+85j
		push	di
		push	word ptr [bp+arg_2+2]
		push	word ptr [bp+arg_2]
		mov	bx, si
		add	bx, 0FFFAh
		shl	bx, 1
		mov	al, [bx+38B4h]
		mov	ah, 0
		push	ax
		call	sub_111D9
		add	sp, 8

loc_10C52:				; CODE XREF: sub_10B80+80j
					; sub_10B80+B3j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_10B80	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10C58	proc far		; CODE XREF: sub_11CA6+68p
					; sub_11CA6+77p ...

arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10C68
		call	far ptr	errStackOverflow

loc_10C68:				; CODE XREF: sub_10C58+9j
		mov	di, [bp+arg_0]
		cmp	byte_1AC87, 0
		jz	short loc_10C77
		cmp	di, 6
		jge	short loc_10C85

loc_10C77:				; CODE XREF: sub_10C58+18j
		mov	bx, di
		shl	bx, 1
		mov	al, [bx+38A3h]
		mov	ah, 0
		mov	si, ax
		jmp	short loc_10CA4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10C85:				; CODE XREF: sub_10C58+1Dj
		mov	bx, di
		add	bx, 0FFFAh
		shl	bx, 1
		push	bx
		cmp	di, 6
		jnz	short loc_10C97
		mov	ax, 1
		jmp	short loc_10C99
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10C97:				; CODE XREF: sub_10C58+38j
		xor	ax, ax

loc_10C99:				; CODE XREF: sub_10C58+3Dj
		pop	bx
		add	bx, ax
		mov	al, [bx+38B4h]
		mov	ah, 0
		mov	si, ax

loc_10CA4:				; CODE XREF: sub_10C58+2Bj
		cmp	[bp+arg_2], 7Fh	; ''
		jbe	short loc_10CAF
		mov	[bp+arg_2], 7Fh	; ''

loc_10CAF:				; CODE XREF: sub_10C58+50j
		mov	al, byte ptr [bp+arg_2]
		mov	[si+6B10h], al
		push	si
		call	sub_11373
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_10C58	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10CD2
		call	far ptr	errStackOverflow

loc_10CD2:				; CODE XREF: seg011:02FBj
		mov	di, [bp+0Ch]
		mov	si, [bp+0Ah]
		cmp	byte_1AC87, 0
		jz	short loc_10CE4
		cmp	si, 6
		ja	short loc_10D0C

loc_10CE4:				; CODE XREF: seg011:030Dj
		cmp	di, 3FFFh
		jbe	short loc_10CED
		mov	di, 3FFFh

loc_10CED:				; CODE XREF: seg011:0318j
		push	di
		push	si
		call	sub_110A2
		mov	sp, bp
		mov	al, [si+6B04h]
		mov	ah, 0
		push	ax
		mov	al, [si+6ACCh]
		mov	ah, 0
		push	ax
		push	si
		call	sub_11653
		mov	sp, bp

loc_10D0C:				; CODE XREF: seg011:0312j
		pop	bp
		pop	di
		pop	si
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10D10	proc far		; CODE XREF: sub_117EC+3Ap
					; sub_1182E+2Fp ...

arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10D20

loc_10D1B:
		call	far ptr	errStackOverflow

loc_10D20:				; CODE XREF: sub_10D10+9j
		mov	si, [bp+arg_2]
		mov	di, [bp+arg_0]
		sub	si, 0Ch
		or	si, si
		jge	short loc_10D2F
		xor	si, si

loc_10D2F:				; CODE XREF: sub_10D10+1Bj
		cmp	di, 6
		jb	short loc_10D3B
		cmp	byte_1AC87, 0
		jnz	short loc_10D4A

loc_10D3B:				; CODE XREF: sub_10D10+22j
		mov	ax, 1
		push	ax
		push	si
		push	di
		call	sub_11653
		mov	sp, bp
		jmp	short loc_10D9C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10D4A:				; CODE XREF: sub_10D10+29j
		cmp	di, 6
		jnz	short loc_10D60
		xor	ax, ax
		push	ax
		push	si
		mov	ax, 6
		push	ax

loc_10D57:
		call	sub_11653
		mov	sp, bp
		jmp	short loc_10D88
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10D60:				; CODE XREF: sub_10D10+3Dj
		cmp	di, 8
		jnz	short loc_10D88
		xor	ax, ax
		push	ax
		push	si
		mov	ax, 8
		push	ax
		call	sub_11653
		mov	sp, bp
		xor	ax, ax
		push	ax
		mov	ax, si
		add	ax, 7
		push	ax
		mov	ax, 7
		push	ax
		call	sub_11653
		mov	sp, bp

loc_10D88:				; CODE XREF: sub_10D10+4Ej
					; sub_10D10+53j
		mov	bx, di
		add	bx, 0FFFAh
		mov	al, [bx+358Ch]
		or	byte_1A94F, al
		call	sub_115B7
		mov	sp, bp

loc_10D9C:				; CODE XREF: sub_10D10+38j
		pop	bp
		pop	di
		pop	si
		retf
sub_10D10	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10DA0	proc far		; CODE XREF: sub_117EC+21p
					; sub_1182E+21p ...

arg_0		= word ptr  8

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10DAF
		call	far ptr	errStackOverflow

loc_10DAF:				; CODE XREF: sub_10DA0+8j
		mov	si, [bp+arg_0]
		cmp	byte_1AC87, 0
		jz	short loc_10DBE
		cmp	si, 6
		jnb	short loc_10DD2

loc_10DBE:				; CODE XREF: sub_10DA0+17j
		xor	ax, ax
		push	ax
		mov	al, [si+6ACCh]
		mov	ah, 0
		push	ax
		push	si
		call	sub_11653
		mov	sp, bp
		jmp	short loc_10DE8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10DD2:				; CODE XREF: sub_10DA0+1Cj
		mov	bx, si
		add	bx, 0FFFAh
		mov	al, [bx+358Ch]
		not	al
		and	byte_1A94F, al
		call	sub_115B7
		mov	sp, bp

loc_10DE8:				; CODE XREF: sub_10DA0+30j
		pop	bp
		pop	si
		retf
sub_10DA0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10DEB	proc far		; CODE XREF: sub_10A5A+64P
		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10DFA
		call	far ptr	errStackOverflow

loc_10DFA:				; CODE XREF: sub_10DEB+8j
		xor	si, si
		jmp	short loc_10E2A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10DFE:				; CODE XREF: sub_10DEB+42j
		cmp	byte ptr [si+38D0h], 0
		jz	short loc_10E18
		xor	ax, ax
		push	ax
		push	ds
		mov	ax, 3840h
		push	ax
		push	si
		call	sub_1123D
		add	sp, 8
		jmp	short loc_10E29
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10E18:				; CODE XREF: sub_10DEB+18j
		xor	ax, ax
		push	ax
		push	ds
		mov	ax, 3832h
		push	ax
		push	si
		call	sub_1123D
		add	sp, 8

loc_10E29:				; CODE XREF: sub_10DEB+2Bj
		inc	si

loc_10E2A:				; CODE XREF: sub_10DEB+11j
		cmp	si, 12h
		jl	short loc_10DFE
		cmp	byte_1AC87, 0
		jz	short loc_10EAE
		xor	ax, ax
		push	ax
		push	ds
		mov	ax, 384Eh
		push	ax
		mov	ax, 0Ch
		push	ax
		call	sub_1123D
		add	sp, 8
		xor	ax, ax
		push	ax
		push	ds
		mov	ax, 385Ch
		push	ax
		mov	ax, 0Fh
		push	ax
		call	sub_1123D
		add	sp, 8
		xor	ax, ax
		push	ax
		push	ds
		mov	ax, 386Ah
		push	ax
		mov	ax, 10h
		push	ax
		call	sub_1123D
		add	sp, 8
		xor	ax, ax
		push	ax
		push	ds
		mov	ax, 3878h
		push	ax
		mov	ax, 0Eh
		push	ax
		call	sub_1123D
		add	sp, 8
		xor	ax, ax
		push	ax
		push	ds
		mov	ax, 3886h
		push	ax
		mov	ax, 11h
		push	ax
		call	sub_1123D
		add	sp, 8
		xor	ax, ax
		push	ax
		push	ds
		mov	ax, 3894h
		push	ax
		mov	ax, 0Dh
		push	ax
		call	sub_1123D
		add	sp, 8

loc_10EAE:				; CODE XREF: sub_10DEB+49j
		pop	bp
		pop	si
		retf
sub_10DEB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10EB1	proc far		; CODE XREF: sub_109FF:loc_10A0EP
		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_10EC0
		call	far ptr	errStackOverflow

loc_10EC0:				; CODE XREF: sub_10EB1+8j
		xor	si, si
		jmp	short loc_10ECA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10EC4:				; CODE XREF: sub_10EB1+1Cj
		mov	byte ptr [si+6B10h], 7Fh ; ''
		inc	si

loc_10ECA:				; CODE XREF: sub_10EB1+11j
		cmp	si, 12h
		jl	short loc_10EC4
		pop	bp
		pop	si
		retf
sub_10EB1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10ED2	proc far		; CODE XREF: sub_10F6F+19p

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 0Ch
		cmp	word_17D9E, sp
		ja	short loc_10EE3
		call	far ptr	errStackOverflow

loc_10EE3:				; CODE XREF: sub_10ED2+Aj
		mov	ax, [bp+arg_2]
		mov	dx, 64h	; 'd'
		mul	dx
		cwd
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	ax, [bp+arg_0]
		mov	dx, 6
		mul	dx
		cwd
		add	ax, [bp+var_4]
		adc	dx, [bp+var_2]
		xor	cx, cx
		mov	bx, 0CB78h
		call	sub_372
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		xor	cx, cx
		mov	bx, 19h
		call	sub_372
		push	dx
		push	ax
		push	[bp+var_A]
		push	[bp+var_C]
		call	sub_2B9
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		mov	cx, 0Eh
		call	sub_338
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		xor	cx, cx
		mov	bx, 9
		call	sub_372
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	dx, 1
		mov	ax, 0B503h
		push	dx
		push	ax
		push	[bp+var_6]
		push	[bp+var_8]
		call	sub_2B9
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	sp, bp
		pop	bp
		retf
sub_10ED2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10F6F	proc far		; CODE XREF: sub_10FF8+3Bp

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  8
arg_4		= word ptr  0Ch
arg_6		= word ptr  0Eh

		push	si
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_10F81
		call	far ptr	errStackOverflow

loc_10F81:				; CODE XREF: sub_10F6F+Bj
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	cs
		call	near ptr sub_10ED2
		add	sp, 4
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		add	ax, 4
		shr	ax, 1
		shr	ax, 1
		shr	ax, 1
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		add	word ptr [bp+arg_0], 2
		mov	si, 1
		jmp	short loc_10FEE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_10FAC:				; CODE XREF: sub_10F6F+82j
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		xor	cx, cx
		mov	bx, 6Ah	; 'j'
		call	sub_372
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		xor	dx, dx
		mov	ax, 64h	; 'd'
		push	dx
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_2B9
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		add	ax, 4
		shr	ax, 1
		shr	ax, 1
		shr	ax, 1
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		add	word ptr [bp+arg_0], 2
		inc	si

loc_10FEE:				; CODE XREF: sub_10F6F+3Bj
		cmp	si, 0Ch
		jl	short loc_10FAC
		mov	sp, bp
		pop	bp
		pop	si
		retf
sub_10F6F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_10FF8	proc far		; CODE XREF: sub_109FF+14P

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 8
		cmp	word_17D9E, sp
		ja	short loc_1100B
		call	far ptr	errStackOverflow

loc_1100B:				; CODE XREF: sub_10FF8+Cj
		mov	[bp+var_4], 4
		xor	ax, ax
		mov	[bp+var_2], ax
		mov	[bp+var_6], ax
		jmp	short loc_11042
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1101A:				; CODE XREF: sub_10FF8+4Ej
		mov	ax, 64h	; 'd'
		push	ax
		push	[bp+var_6]
		mov	ax, [bp+var_2]
		mov	dx, 18h
		mul	dx
		mov	bx, 6794h
		mov	cx, ds
		add	bx, ax
		push	cx
		push	bx
		push	cs
		call	near ptr sub_10F6F
		add	sp, 8
		inc	[bp+var_2]
		mov	ax, [bp+var_4]
		add	[bp+var_6], ax

loc_11042:				; CODE XREF: sub_10FF8+20j
		cmp	[bp+var_2], 19h
		jb	short loc_1101A
		mov	[bp+var_8], 0
		jmp	short loc_1106E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1104F:				; CODE XREF: sub_10FF8+7Aj
		mov	bx, [bp+var_8]
		shl	bx, 1
		shl	bx, 1
		mov	word ptr [bx+6ADAh], ds
		mov	word ptr [bx+6AD8h], 6794h
		mov	bx, [bp+var_8]
		shl	bx, 1
		mov	word ptr [bx+666Eh], 0
		inc	[bp+var_8]

loc_1106E:				; CODE XREF: sub_10FF8+55j
		cmp	[bp+var_8], 0Bh
		jb	short loc_1104F
		xor	si, si
		mov	[bp+var_8], si
		jmp	short loc_11096
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1107B:				; CODE XREF: sub_10FF8+A2j
		xor	di, di
		jmp	short loc_1108E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1107F:				; CODE XREF: sub_10FF8+99j
		mov	al, byte ptr [bp+var_8]
		mov	[si+6A64h], al
		mov	ax, di
		mov	[si+6A04h], al
		inc	di
		inc	si

loc_1108E:				; CODE XREF: sub_10FF8+85j
		cmp	di, 0Ch
		jb	short loc_1107F
		inc	[bp+var_8]

loc_11096:				; CODE XREF: sub_10FF8+81j
		cmp	[bp+var_8], 8
		jb	short loc_1107B
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_10FF8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_110A2	proc far		; CODE XREF: seg011:031FP

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 6
		cmp	word_17D9E, sp
		ja	short loc_110B5
		call	far ptr	errStackOverflow

loc_110B5:				; CODE XREF: sub_110A2+Cj
		mov	ax, [bp+arg_2]
		add	ax, 0E000h
		cwd
		push	dx
		push	ax
		mov	ax, word_1A94C
		cwd
		pop	bx
		pop	cx
		call	sub_372
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	dx, word_17AB6
		mov	ax, word_17AB4
		cmp	dx, [bp+var_2]
		jnz	short loc_11105
		cmp	ax, [bp+var_4]
		jnz	short loc_11105
		mov	dx, word_1A828
		mov	ax, word_1A826
		mov	bx, [bp+arg_0]
		shl	bx, 1
		shl	bx, 1
		mov	[bx+6ADAh], dx
		mov	[bx+6AD8h], ax
		mov	ax, word_1A824
		mov	bx, [bp+arg_0]
		shl	bx, 1
		mov	[bx+666Eh], ax
		jmp	loc_111A0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11105:				; CODE XREF: sub_110A2+37j
					; sub_110A2+3Cj
		xor	dx, dx
		mov	ax, 2000h
		push	dx
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_2B9
		mov	di, ax
		or	di, di
		jge	short loc_11153
		mov	ax, 18h
		sub	ax, di
		mov	[bp+var_6], ax
		mov	bx, 19h
		cwd
		idiv	bx
		neg	ax
		mov	bx, [bp+arg_0]
		shl	bx, 1
		mov	[bx+666Eh], ax
		mov	word_1A824, ax
		mov	ax, [bp+var_6]
		add	ax, 0FFE8h
		mov	bx, 19h
		cwd
		idiv	bx
		mov	si, dx
		or	si, si
		jz	short loc_11171
		mov	ax, bx
		sub	ax, si
		mov	si, ax
		jmp	short loc_11171
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11153:				; CODE XREF: sub_110A2+79j
		mov	ax, di
		mov	bx, 19h
		cwd
		idiv	bx
		mov	bx, [bp+arg_0]
		shl	bx, 1
		mov	[bx+666Eh], ax
		mov	word_1A824, ax
		mov	ax, di
		mov	bx, 19h
		cwd
		idiv	bx
		mov	si, dx

loc_11171:				; CODE XREF: sub_110A2+A7j
					; sub_110A2+AFj
		mov	ax, si
		mov	dx, 18h
		mul	dx
		add	ax, 6794h
		mov	dx, ds
		mov	bx, [bp+arg_0]
		shl	bx, 1
		shl	bx, 1
		mov	[bx+6ADAh], dx
		mov	[bx+6AD8h], ax
		mov	word_1A828, dx
		mov	word_1A826, ax
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		mov	word_17AB6, dx
		mov	word_17AB4, ax

loc_111A0:				; CODE XREF: sub_110A2+60j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_110A2	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_111B4
		call	far ptr	errStackOverflow

loc_111B4:				; CODE XREF: seg011:07DDj
		mov	al, [bp+0Ah]
		push	ax
		mov	ax, [bp+6]
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		add	bx, [bp+8]
		pop	ax
		mov	[bx+6684h], al
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		call	sub_11287
		mov	sp, bp
		pop	bp
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_111D9	proc far		; CODE XREF: sub_10B80+5CP
					; sub_10B80+78P ...

var_4		= dword	ptr -4
arg_0		= word ptr  8
arg_2		= dword	ptr  0Ah
arg_6		= word ptr  0Eh

		push	si
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_111EB
		call	far ptr	errStackOverflow

loc_111EB:				; CODE XREF: sub_111D9+Bj
		xor	si, si
		mov	ax, [bp+arg_0]
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		add	bx, 6684h
		mov	ax, ds
		mov	es, ax
		assume es:dseg
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		jmp	short loc_1121B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11207:				; CODE XREF: sub_111D9+45j
		les	bx, [bp+arg_2]
		assume es:nothing
		mov	al, es:[bx]
		les	bx, [bp+var_4]
		mov	es:[bx], al
		add	word ptr [bp+arg_2], 2
		inc	word ptr [bp+var_4]
		inc	si

loc_1121B:				; CODE XREF: sub_111D9+2Cj
		cmp	si, 0Dh
		jl	short loc_11207
		and	[bp+arg_6], 3
		mov	ax, [bp+arg_6]
		les	bx, [bp+var_4]
		mov	es:[bx], al
		push	[bp+arg_0]
		call	sub_11320
		inc	sp
		inc	sp
		mov	sp, bp
		pop	bp
		pop	si
		retf
sub_111D9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_1123D	proc far		; CODE XREF: sub_10DEB+23P
					; sub_10DEB+36P ...

var_1C		= word ptr -1Ch
arg_0		= word ptr  8
arg_2		= dword	ptr  0Ah
arg_6		= word ptr  0Eh

		push	si
		push	bp
		mov	bp, sp
		sub	sp, 1Ch
		cmp	word_17D9E, sp
		ja	short loc_1124F
		call	far ptr	errStackOverflow

loc_1124F:				; CODE XREF: sub_1123D+Bj
		xor	si, si
		jmp	short loc_1126B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11253:				; CODE XREF: sub_1123D+31j
		les	bx, [bp+arg_2]
		mov	al, es:[bx]
		mov	ah, 0
		mov	bx, si
		shl	bx, 1
		lea	dx, [bp+var_1C]
		add	bx, dx
		mov	ss:[bx], ax
		inc	word ptr [bp+arg_2]
		inc	si

loc_1126B:				; CODE XREF: sub_1123D+14j
		cmp	si, 0Dh
		jl	short loc_11253
		push	[bp+arg_6]
		push	ss
		lea	ax, [bp+var_1C]
		push	ax
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_111D9
		add	sp, 8
		mov	sp, bp
		pop	bp
		pop	si
		retf
sub_1123D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11287	proc far		; CODE XREF: seg011:0800P

arg_0		= word ptr  8
arg_2		= word ptr  0Ah

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_11296
		call	far ptr	errStackOverflow

loc_11296:				; CODE XREF: sub_11287+8j
		mov	si, [bp+arg_0]
		mov	ax, [bp+arg_2]
		cmp	ax, 11h		; switch 18 cases
		jbe	short loc_112A4
		jmp	loc_1131D	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_112A4:				; CODE XREF: sub_11287+18j
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_112AD[bx] ; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_112AD	dw offset loc_112E3	; DATA XREF: sub_11287+21r
		dw offset loc_1130B	; jump table for switch	statement
		dw offset loc_112ED
		dw offset loc_112F7
		dw offset loc_11301
		dw offset loc_1130B
		dw offset loc_112F7
		dw offset loc_11301
		dw offset loc_112E3
		dw offset loc_1130B
		dw offset loc_1130B
		dw offset loc_1130B
		dw offset loc_112ED
		dw offset loc_11315
		dw offset loc_112D1
		dw offset loc_112D1
		dw offset loc_112DA
		dw offset loc_112D1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_112D1:				; CODE XREF: sub_11287+21j
					; DATA XREF: sub_11287:off_112ADo
		call	sub_115B7	; case 0xE
		mov	sp, bp
		jmp	short loc_1131D	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_112DA:				; CODE XREF: sub_11287+21j
					; DATA XREF: sub_11287:off_112ADo
		call	sub_113EB	; case 0x10
		mov	sp, bp
		jmp	short loc_1131D	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_112E3:				; CODE XREF: sub_11287+21j
					; DATA XREF: sub_11287:off_112ADo
		push	si		; case 0x0
		call	sub_11373
		mov	sp, bp
		jmp	short loc_1131D	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_112ED:				; CODE XREF: sub_11287+21j
					; DATA XREF: sub_11287:off_112ADo
		push	si		; case 0x2
		call	sub_11416
		mov	sp, bp
		jmp	short loc_1131D	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_112F7:				; CODE XREF: sub_11287+21j
					; DATA XREF: sub_11287:off_112ADo
		push	si		; case 0x3
		call	sub_11472
		mov	sp, bp
		jmp	short loc_1131D	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11301:				; CODE XREF: sub_11287+21j
					; DATA XREF: sub_11287:off_112ADo
		push	si		; case 0x4
		call	sub_114C5
		mov	sp, bp
		jmp	short loc_1131D	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1130B:				; CODE XREF: sub_11287+21j
					; DATA XREF: sub_11287:off_112ADo
		push	si		; case 0x1
		call	sub_11518
		mov	sp, bp
		jmp	short loc_1131D	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11315:				; CODE XREF: sub_11287+21j
					; DATA XREF: sub_11287:off_112ADo
		push	si		; case 0xD
		call	sub_1160B
		mov	sp, bp

loc_1131D:				; CODE XREF: sub_11287+1Aj
					; sub_11287+51j ...
		pop	bp		; default
		pop	si
		retf
sub_11287	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11320	proc far		; CODE XREF: sub_111D9+58P

arg_0		= word ptr  8

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_1132F
		call	far ptr	errStackOverflow

loc_1132F:				; CODE XREF: sub_11320+8j
		mov	si, [bp+arg_0]
		call	sub_115B7
		mov	sp, bp
		call	sub_113EB
		mov	sp, bp
		push	si
		call	sub_11373
		mov	sp, bp
		push	si
		call	sub_11416
		mov	sp, bp
		push	si
		call	sub_11472
		mov	sp, bp
		push	si
		call	sub_114C5
		mov	sp, bp
		push	si
		call	sub_11518
		mov	sp, bp
		push	si
		call	sub_1160B
		mov	sp, bp
		pop	bp
		pop	si
		retf
sub_11320	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11373	proc far		; CODE XREF: sub_10C58+5FP
					; sub_11287+5DP ...

arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_11383
		call	far ptr	errStackOverflow

loc_11383:				; CODE XREF: sub_11373+9j
		mov	di, [bp+arg_0]
		mov	si, 3Fh	; '?'
		mov	ax, di
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+668Ch]
		mov	ah, 0
		and	ax, si
		sub	si, ax
		mov	al, [di+6B10h]
		mov	ah, 0
		mul	si
		mov	si, ax
		mov	ax, si
		add	ax, 7Fh	; ''
		add	si, ax
		mov	ax, 3Fh	; '?'
		push	ax
		mov	ax, si
		mov	bx, 0FEh ; 'ў'
		xor	dx, dx
		div	bx
		pop	dx
		sub	dx, ax
		mov	si, dx
		mov	ax, di
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+6684h]
		mov	ah, 0
		mov	cx, 6
		shl	ax, cl
		or	si, ax
		push	si
		mov	al, [di+38BEh]
		mov	ah, 0
		add	ax, 40h	; '@'
		push	ax
		call	sub_10999
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_11373	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_113EB	proc far		; CODE XREF: sub_10B50+27P
					; sub_11287:loc_112DAP	...
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_113F9
		call	far ptr	errStackOverflow

loc_113F9:				; CODE XREF: sub_113EB+7j
		cmp	byte_1A82A, 0
		jz	short loc_11405
		mov	ax, 40h	; '@'
		jmp	short loc_11407
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11405:				; CODE XREF: sub_113EB+13j
		xor	ax, ax

loc_11407:				; CODE XREF: sub_113EB+18j
		push	ax
		mov	ax, 8
		push	ax
		call	sub_10999
		add	sp, 4
		pop	bp
		retf
sub_113EB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11416	proc far		; CODE XREF: sub_11287+67P
					; sub_11320+29P

arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_11426
		call	far ptr	errStackOverflow

loc_11426:				; CODE XREF: sub_11416+9j
		mov	si, [bp+arg_0]
		cmp	byte ptr [si+38D0h], 0
		jnz	short loc_1146E
		mov	ax, si
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+6686h]
		mov	ah, 0
		mov	di, ax
		shl	di, 1
		mov	ax, si
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+6690h], 0
		jz	short loc_11457
		xor	ax, ax
		jmp	short loc_1145A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11457:				; CODE XREF: sub_11416+3Bj
		mov	ax, 1

loc_1145A:				; CODE XREF: sub_11416+3Fj
		or	di, ax
		push	di
		mov	al, [si+38E2h]
		mov	ah, 0
		add	ax, 0C0h ; 'Р'
		push	ax
		call	sub_10999
		mov	sp, bp

loc_1146E:				; CODE XREF: sub_11416+18j
		pop	bp
		pop	di
		pop	si
		retf
sub_11416	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11472	proc far		; CODE XREF: sub_11287+71P
					; sub_11320+31P

arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_11482
		call	far ptr	errStackOverflow

loc_11482:				; CODE XREF: sub_11472+9j
		mov	di, [bp+arg_0]
		mov	ax, di
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+6687h]
		mov	ah, 0
		mov	si, ax
		mov	cx, 4
		shl	si, cl
		mov	ax, di
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+668Ah]
		mov	ah, 0
		and	ax, 0Fh
		or	si, ax
		push	si
		mov	al, [di+38BEh]
		mov	ah, 0
		add	ax, 60h	; '`'
		push	ax
		call	sub_10999
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_11472	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_114C5	proc far		; CODE XREF: sub_11287+7BP
					; sub_11320+39P

arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_114D5
		call	far ptr	errStackOverflow

loc_114D5:				; CODE XREF: sub_114C5+9j
		mov	di, [bp+arg_0]
		mov	ax, di
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+6688h]
		mov	ah, 0
		mov	si, ax
		mov	cx, 4
		shl	si, cl
		mov	ax, di
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+668Bh]
		mov	ah, 0
		and	ax, 0Fh
		or	si, ax
		push	si
		mov	al, [di+38BEh]
		mov	ah, 0
		add	ax, 80h	; ''
		push	ax
		call	sub_10999
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_114C5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11518	proc far		; CODE XREF: sub_11287+85P
					; sub_11320+41P

arg_0		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_11528
		call	far ptr	errStackOverflow

loc_11528:				; CODE XREF: sub_11518+9j
		mov	di, [bp+arg_0]
		mov	ax, di
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+668Dh], 0
		jz	short loc_11540
		mov	si, 80h	; ''
		jmp	short loc_11542
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11540:				; CODE XREF: sub_11518+21j
		xor	si, si

loc_11542:				; CODE XREF: sub_11518+26j
		mov	ax, di
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+668Eh], 0
		jz	short loc_11557
		mov	ax, 40h	; '@'
		jmp	short loc_11559
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11557:				; CODE XREF: sub_11518+38j
		xor	ax, ax

loc_11559:				; CODE XREF: sub_11518+3Dj
		add	si, ax
		mov	ax, di
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+6689h], 0
		jz	short loc_11570
		mov	ax, 20h	; ' '
		jmp	short loc_11572
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11570:				; CODE XREF: sub_11518+51j
		xor	ax, ax

loc_11572:				; CODE XREF: sub_11518+56j
		add	si, ax
		mov	ax, di
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		cmp	byte ptr [bx+668Fh], 0
		jz	short loc_11589
		mov	ax, 10h
		jmp	short loc_1158B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11589:				; CODE XREF: sub_11518+6Aj
		xor	ax, ax

loc_1158B:				; CODE XREF: sub_11518+6Fj
		add	si, ax
		mov	ax, di
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+6685h]
		mov	ah, 0
		and	ax, 0Fh
		add	si, ax
		push	si
		mov	al, [di+38BEh]
		mov	ah, 0
		add	ax, 20h	; ' '
		push	ax
		call	sub_10999
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_11518	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_115B7	proc far		; CODE XREF: sub_10A5A+6BP
					; sub_10B50+20P ...
		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_115C6
		call	far ptr	errStackOverflow

loc_115C6:				; CODE XREF: sub_115B7+8j
		cmp	byte_1AC86, 0
		jz	short loc_115D2
		mov	si, 80h	; ''
		jmp	short loc_115D4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_115D2:				; CODE XREF: sub_115B7+14j
		xor	si, si

loc_115D4:				; CODE XREF: sub_115B7+19j
		cmp	byte_1ACCF, 0
		jz	short loc_115E0
		mov	ax, 40h	; '@'
		jmp	short loc_115E2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_115E0:				; CODE XREF: sub_115B7+22j
		xor	ax, ax

loc_115E2:				; CODE XREF: sub_115B7+27j
		or	si, ax
		cmp	byte_1AC87, 0
		jz	short loc_115F0
		mov	ax, 20h	; ' '
		jmp	short loc_115F2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_115F0:				; CODE XREF: sub_115B7+32j
		xor	ax, ax

loc_115F2:				; CODE XREF: sub_115B7+37j
		or	si, ax
		mov	al, byte_1A94F
		mov	ah, 0
		or	si, ax
		push	si
		mov	ax, 0BDh ; 'Н'
		push	ax
		call	sub_10999
		add	sp, 4
		pop	bp
		pop	si
		retf
sub_115B7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_1160B	proc far		; CODE XREF: sub_11287+8FP
					; sub_11320+49P

arg_0		= word ptr  8

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_1161A
		call	far ptr	errStackOverflow

loc_1161A:				; CODE XREF: sub_1160B+8j
		cmp	word_1A82C, 0
		jz	short loc_11639
		mov	ax, [bp+arg_0]
		mov	dx, 0Eh
		mul	dx
		mov	bx, ax
		mov	al, [bx+6691h]
		mov	ah, 0
		mov	si, ax
		and	si, 3
		jmp	short loc_1163B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11639:				; CODE XREF: sub_1160B+14j
		xor	si, si

loc_1163B:				; CODE XREF: sub_1160B+2Cj
		push	si
		mov	bx, [bp+arg_0]
		mov	al, [bx+38BEh]
		mov	ah, 0
		add	ax, 0E0h ; 'р'
		push	ax
		call	sub_10999
		mov	sp, bp
		pop	bp
		pop	si
		retf
sub_1160B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11653	proc far		; CODE XREF: sub_10A5A+40P
					; sub_10A5A+52P ...

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= byte ptr  0Eh

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 4
		cmp	word_17D9E, sp
		ja	short loc_11666
		call	far ptr	errStackOverflow

loc_11666:				; CODE XREF: sub_11653+Cj
		mov	si, [bp+arg_2]
		mov	di, [bp+arg_0]
		mov	al, [bp+arg_4]
		mov	[di+6B04h], al
		mov	ax, si
		mov	[di+6ACCh], al
		mov	bx, di
		shl	bx, 1
		mov	ax, [bx+666Eh]
		add	si, ax
		cmp	si, 5Fh	; '_'
		jle	short loc_1168B
		mov	si, 5Fh	; '_'

loc_1168B:				; CODE XREF: sub_11653+33j
		or	si, si
		jge	short loc_11691
		xor	si, si

loc_11691:				; CODE XREF: sub_11653+3Aj
		mov	bx, di
		shl	bx, 1
		shl	bx, 1
		les	bx, [bx+6AD8h]
		mov	al, [si+6A04h]
		mov	ah, 0
		shl	ax, 1
		add	bx, ax
		mov	ax, es:[bx]
		mov	[bp+var_4], ax
		push	ax
		mov	ax, di
		add	ax, 0A0h ; ' '
		push	ax
		call	sub_10999
		add	sp, 4
		cmp	word ptr [bp+arg_4], 0
		jz	short loc_116C5
		mov	ax, 20h	; ' '
		jmp	short loc_116C7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_116C5:				; CODE XREF: sub_11653+6Bj
		xor	ax, ax

loc_116C7:				; CODE XREF: sub_11653+70j
		mov	[bp+var_2], ax
		mov	al, [si+6A64h]
		mov	ah, 0
		shl	ax, 1
		shl	ax, 1
		mov	dl, byte ptr [bp+var_4+1]
		mov	dh, 0
		and	dx, 3
		add	ax, dx
		add	[bp+var_2], ax
		push	[bp+var_2]
		mov	ax, di
		add	ax, 0B0h ; 'А'
		push	ax
		call	sub_10999
		add	sp, 4
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_11653	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_116F9	proc far		; CODE XREF: sub_109FF+35P
					; sub_10A5A+18P ...

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_11707
		call	far ptr	errStackOverflow

loc_11707:				; CODE XREF: sub_116F9+7j
		xor	ax, ax
		push	ax
		mov	ax, [bp+arg_0]
		add	ax, 0A0h ; ' '
		push	ax
		call	sub_10999
		mov	sp, bp
		xor	ax, ax
		push	ax
		mov	ax, [bp+arg_0]
		add	ax, 0B0h ; 'А'
		push	ax
		call	sub_10999
		mov	sp, bp
		pop	bp
		retf
sub_116F9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_1172B	proc far		; CODE XREF: sub_109D5+15P

var_2		= word ptr -2

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		cmp	word_17D9E, sp
		ja	short loc_1173D
		call	far ptr	errStackOverflow

loc_1173D:				; CODE XREF: sub_1172B+Bj
		mov	ax, 60h	; '`'
		push	ax
		mov	ax, 4
		push	ax
		call	sub_10999
		add	sp, 4
		mov	ax, 80h	; ''
		push	ax
		mov	ax, 4
		push	ax
		call	sub_10999
		add	sp, 4
		push	word_1AC84
		call	sub_12940
		inc	sp
		inc	sp
		mov	di, ax
		mov	ax, 0FFh
		push	ax
		mov	ax, 2
		push	ax
		call	sub_10999
		add	sp, 4
		mov	ax, 21h	; '!'
		push	ax
		mov	ax, 4
		push	ax
		call	sub_10999
		add	sp, 4
		xor	si, si
		jmp	short loc_1179A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1178E:				; CODE XREF: sub_1172B+73j
		push	word_1AC84
		call	sub_12940
		inc	sp
		inc	sp
		inc	si

loc_1179A:				; CODE XREF: sub_1172B+61j
		cmp	si, 0C8h ; 'Ш'
		jb	short loc_1178E
		push	word_1AC84
		call	sub_12940
		inc	sp
		inc	sp
		mov	[bp+var_2], ax
		mov	ax, 60h	; '`'
		push	ax
		mov	ax, 4
		push	ax
		call	sub_10999
		add	sp, 4
		mov	ax, 80h	; ''
		push	ax
		mov	ax, 4
		push	ax
		call	sub_10999
		add	sp, 4
		test	di, 0E0h
		jnz	short loc_117E4
		mov	ax, [bp+var_2]
		and	ax, 0E0h
		cmp	ax, 0C0h ; 'Р'
		jnz	short loc_117E4
		mov	ax, 1
		jmp	short loc_117E6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_117E4:				; CODE XREF: sub_1172B+A7j
					; sub_1172B+B2j
		xor	ax, ax

loc_117E6:				; CODE XREF: sub_1172B+B7j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_1172B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_117EC	proc far		; CODE XREF: sub_DE8+F97P
					; sub_23BE+D56P
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_117FA
		call	far ptr	errStackOverflow

loc_117FA:				; CODE XREF: sub_117EC+7j
		cmp	byte_1A13E, 0
		jz	short loc_1182C
		cmp	byte_18141, 0
		jz	short loc_1182C
		mov	ax, 2
		push	ax
		push	cs
		call	near ptr sub_10DA0
		inc	sp
		inc	sp
		call	sub_12FD1
		mov	bx, 0Ch
		cwd
		idiv	bx
		add	dx, 3Ch	; '<'
		push	dx
		mov	ax, 2
		push	ax
		push	cs
		call	near ptr sub_10D10
		add	sp, 4

loc_1182C:				; CODE XREF: sub_117EC+13j
					; sub_117EC+1Aj
		pop	bp
		retf
sub_117EC	endp ; sp = -2


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_1182E	proc far		; CODE XREF: sub_DE8+FF7P
					; sub_23BE+DB6P
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_1183C
		call	far ptr	errStackOverflow

loc_1183C:				; CODE XREF: sub_1182E+7j
		cmp	byte_1A13E, 0
		jz	short loc_11863
		cmp	byte_18141, 0
		jz	short loc_11863
		mov	ax, 1
		push	ax
		push	cs
		call	near ptr sub_10DA0
		inc	sp
		inc	sp
		mov	ax, 2Ah	; '*'
		push	ax
		mov	ax, 1
		push	ax
		push	cs
		call	near ptr sub_10D10
		add	sp, 4

loc_11863:				; CODE XREF: sub_1182E+13j
					; sub_1182E+1Aj
		pop	bp
		retf
sub_1182E	endp ; sp = -2


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11865	proc far		; CODE XREF: sub_DE8:loc_1884P
					; sub_23BE:loc_2D60P
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_11873
		call	far ptr	errStackOverflow

loc_11873:				; CODE XREF: sub_11865+7j
		cmp	byte_1A13E, 0
		jz	short loc_118A7
		cmp	byte_18141, 0
		jz	short loc_118A7
		push	ds
		mov	ax, 3672h
		push	ax
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_10B80
		add	sp, 6
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_10DA0
		inc	sp
		inc	sp
		mov	ax, 48h	; 'H'
		push	ax
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_10D10
		add	sp, 4

loc_118A7:				; CODE XREF: sub_11865+13j
					; sub_11865+1Aj
		pop	bp
		retf
sub_11865	endp ; sp = -2


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_118A9	proc far		; CODE XREF: sub_E849:loc_EABAP
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_118B7
		call	far ptr	errStackOverflow

loc_118B7:				; CODE XREF: sub_118A9+7j
		cmp	byte_1A13E, 0
		jz	short loc_118EB
		cmp	byte_18141, 0
		jz	short loc_118EB
		push	ds
		mov	ax, 35CAh
		push	ax
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_10B80
		add	sp, 6
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_10DA0
		inc	sp
		inc	sp
		mov	ax, 30h	; '0'
		push	ax
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_10D10
		add	sp, 4

loc_118EB:				; CODE XREF: sub_118A9+13j
					; sub_118A9+1Aj
		pop	bp
		retf
sub_118A9	endp ; sp = -2


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_118ED	proc far		; CODE XREF: sub_DE8:loc_212BP
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_118FB
		call	far ptr	errStackOverflow

loc_118FB:				; CODE XREF: sub_118ED+7j
		cmp	byte_1A13E, 0
		jz	short loc_11922
		cmp	byte_18141, 0
		jz	short loc_11922
		mov	ax, 3
		push	ax
		push	cs
		call	near ptr sub_10DA0
		inc	sp
		inc	sp
		mov	ax, 48h	; 'H'
		push	ax
		mov	ax, 3
		push	ax
		push	cs
		call	near ptr sub_10D10
		add	sp, 4

loc_11922:				; CODE XREF: sub_118ED+13j
					; sub_118ED+1Aj
		pop	bp
		retf
sub_118ED	endp ; sp = -2

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db  56h	; V
		db  57h	; W
		db  55h	; U
		db  8Bh	; 
		db 0ECh	; ь
		db  83h	; 
		db 0ECh	; ь
		db  14h
		db  39h	; 9
		db  26h	; &
		db 0DEh	; о
		db  3Bh	; ;
		db  77h	; w
		db    5
		db  9Ah	; 
		db  9Dh	; 
		db    3
		db    0	;  SEG16 SEGDEF	[seg000,0]
		db    0
		db  80h	; 
		db  3Eh	; >
		db  8Eh	; 
		db  67h	; g
		db    1
		db  74h	; t
		db    3
		db 0E9h	; щ
		db  2Eh	; .
		db    2
		db 0C6h	; Ц
		db    6
		db  8Eh	; 
		db  67h	; g
		db    0
		db 0A1h	; Ё
		db  92h	; 
		db  67h	; g
		db  89h	; 
		db  46h	; F
		db 0ECh	; ь
		db  33h	; 3
		db 0F6h	; і
		db 0EBh	; ы
		db  26h	; &
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11950:				; CODE XREF: seg011:0FA9j
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+69F0h]
		or	ax, [bx+69F2h]
		jz	short loc_11970
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		sub	word ptr [bx+69F0h], 1
		sbb	word ptr [bx+69F2h], 0

loc_11970:				; CODE XREF: seg011:0F8Ej
		db	36h
		mov	byte ptr [bp+si-6], 0
		inc	si
		cmp	si, 5
		jl	short loc_11950
		mov	bx, word_1A940
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	ax, word_1A942
		shl	ax, 1
		add	bx, ax
		cmp	byte ptr [bx+355Ch], 0
		jz	short loc_119E8
		mov	bx, word_1A940
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	ax, word_1A942
		shl	ax, 1
		add	bx, ax
		mov	al, [bx+355Ch]
		mov	ah, 0
		push	ax
		push	cs
		call	near ptr sub_10DA0
		inc	sp
		inc	sp
		mov	bx, word_1A940
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	ax, word_1A942
		shl	ax, 1
		add	bx, ax
		mov	al, [bx+355Dh]
		mov	ah, 0
		push	ax
		mov	bx, word_1A940
		shl	bx, 1
		shl	bx, 1
		shl	bx, 1
		mov	ax, word_1A942
		shl	ax, 1
		add	bx, ax
		mov	al, [bx+355Ch]
		mov	ah, 0
		push	ax
		push	cs
		call	near ptr sub_10D10
		add	sp, 4

loc_119E8:				; CODE XREF: seg011:0FC1j
		inc	word_1A942
		cmp	word_1A942, 3
		jle	short loc_119F9
		mov	word_1A942, 0

loc_119F9:				; CODE XREF: seg011:1021j
		mov	bx, word_1A952
		mov	al, [bx+2F72h]
		mov	ah, 0
		mov	di, ax
		or	di, di
		jz	short loc_11A0C
		jmp	loc_11A99
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11A0C:				; CODE XREF: seg011:1037j
		xor	si, si
		mov	byte ptr [bp-1], 0
		jmp	short loc_11A29
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11A14:				; CODE XREF: seg011:105Cj
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+69F0h]
		or	ax, [bx+69F2h]
		jz	short loc_11A28
		mov	byte ptr [bp-1], 1

loc_11A28:				; CODE XREF: seg011:1052j
		inc	si

loc_11A29:				; CODE XREF: seg011:1042j
		cmp	si, 5
		jl	short loc_11A14
		cmp	byte ptr [bp-1], 0
		jz	short loc_11A37
		jmp	loc_11B67
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11A37:				; CODE XREF: seg011:1062j
		inc	word_1ABAC
		mov	bx, word_1ABAC
		cmp	byte ptr [bx+2F4Ch], 0FFh
		jnz	short loc_11A4E
		mov	byte_1A946, 1
		jmp	loc_11B73
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11A4E:				; CODE XREF: seg011:1074j
		mov	bx, word_1ABAC
		cmp	byte ptr [bx+2F4Ch], 0FEh ; 'ў'
		jnz	short loc_11A66
		mov	bx, word_1A940
		shl	bx, 1
		mov	ax, [bx+2F40h]
		mov	word_1ABAC, ax

loc_11A66:				; CODE XREF: seg011:1087j
		mov	bx, word_1ABAC
		mov	al, [bx+2F4Ch]
		mov	ah, 0
		mov	dx, 38h	; '8'
		mul	dx
		mov	bx, 3592h
		mov	cx, ds
		add	bx, ax
		push	cx
		push	bx
		mov	ax, 4
		push	ax
		push	cs
		call	near ptr sub_10B80
		add	sp, 6
		mov	bx, word_1A940
		shl	bx, 1
		mov	ax, [bx+2F66h]
		mov	word_1A952, ax
		jmp	loc_11B73
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11A99:				; CODE XREF: seg011:1039j
		inc	word_1A952
		xor	si, si
		jmp	short loc_11AD2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11AA1:				; CODE XREF: seg011:1104j
		mov	bx, word_1A952
		mov	al, [bx+2F72h]
		db	36h
		mov	[bp+si-12h], al
		inc	word_1A952
		mov	bx, word_1A952
		mov	al, [bx+2F72h]
		db	36h
		mov	[bp+si-0Ch], al
		inc	word_1A952
		mov	bx, word_1A952
		mov	al, [bx+2F72h]
		db	36h
		mov	[bp+si-6], al
		inc	word_1A952
		inc	si

loc_11AD2:				; CODE XREF: seg011:10CFj
		cmp	si, di
		jl	short loc_11AA1
		xor	si, si
		mov	byte ptr [bp-1], 0
		jmp	short loc_11AFA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11ADE:				; CODE XREF: seg011:112Dj
		db	36h
		cmp	byte ptr [bp+si-6], 0
		jz	short loc_11AF9
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		mov	ax, [bx+69F0h]
		or	ax, [bx+69F2h]
		jz	short loc_11AF9
		mov	byte ptr [bp-1], 1

loc_11AF9:				; CODE XREF: seg011:1113j seg011:1123j
		inc	si

loc_11AFA:				; CODE XREF: seg011:110Cj
		cmp	si, 5
		jl	short loc_11ADE
		cmp	byte ptr [bp-1], 0
		jnz	short loc_11B67
		xor	si, si
		jmp	short loc_11B61
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11B09:				; CODE XREF: seg011:1193j
		db	36h
		cmp	byte ptr [bp+si-0Ch], 0
		jz	short loc_11B3A
		db	36h
		mov	al, [bp+si-12h]
		mov	ah, 0
		add	ax, 4
		push	ax
		push	cs
		call	near ptr sub_10DA0
		inc	sp
		inc	sp
		db	36h
		mov	al, [bp+si-0Ch]
		mov	ah, 0
		push	ax
		db	36h
		mov	al, [bp+si-12h]
		mov	ah, 0
		add	ax, 4
		push	ax
		push	cs
		call	near ptr sub_10D10
		add	sp, 4
		jmp	short loc_11B4A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11B3A:				; CODE XREF: seg011:113Ej
		db	36h
		mov	al, [bp+si-12h]
		mov	ah, 0
		add	ax, 4
		push	ax
		push	cs
		call	near ptr sub_10DA0
		inc	sp
		inc	sp

loc_11B4A:				; CODE XREF: seg011:1168j
		db	36h
		mov	al, [bp+si-6]
		xor	ah, ah
		xor	dx, dx
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		mov	[bx+69F2h], dx
		mov	[bx+69F0h], ax
		inc	si

loc_11B61:				; CODE XREF: seg011:1137j
		cmp	si, di
		jl	short loc_11B09
		jmp	short loc_11B73
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11B67:				; CODE XREF: seg011:1064j seg011:1133j
		mov	ax, [bp-14h]
		mov	word_1A952, ax
		jmp	short loc_11B73
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 0FEh	; ў
		db    6
		db  8Eh	; 
		db  67h	; g
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11B73:				; CODE XREF: seg011:107Bj seg011:10C6j ...
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 50h,	53h, 51h, 52h, 6, 1Eh, 56h, 57h, 55h, 0BDh
		dw seg dseg
		db 8Eh,	0DDh, 8Bh, 0ECh, 39h, 26h, 0DEh, 3Bh, 77h, 5, 9Ah
		db 9Dh,	3
		dw seg seg000
		db 0FAh, 80h, 3Eh, 0CCh, 5Ch, 0, 74h, 0Bh, 80h,	3Eh, 81h
		db 3Fh,	0, 74h,	4, 0Eh,	0E8h, 7Dh, 0FDh, 83h, 6, 0C8h
		db 5Ch,	1, 83h,	16h, 0CAh, 5Ch,	0, 0FBh, 5Dh, 5Fh, 5Eh
		db 1Fh,	7, 5Ah,	59h, 5Bh, 58h, 0CFh

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11BBC	proc far		; CODE XREF: sub_DE8+32P sub_23BE+1DP	...

arg_0		= word ptr  8

		push	si
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_11BCB
		call	far ptr	errStackOverflow

loc_11BCB:				; CODE XREF: sub_11BBC+8j
		mov	bx, [bp+arg_0]
		shl	bx, 1
		mov	ax, [bx+2F20h]
		mov	word_1A940, ax
		cmp	byte_19E8C, 0
		jz	short loc_11C4B
		cmp	byte_18141, 0
		jz	short loc_11C4B
		xor	si, si
		jmp	short loc_11BFC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11BE9:				; CODE XREF: sub_11BBC+43j
		mov	bx, si
		shl	bx, 1
		shl	bx, 1
		mov	word ptr [bx+69F2h], 0
		mov	word ptr [bx+69F0h], 0
		inc	si

loc_11BFC:				; CODE XREF: sub_11BBC+2Bj
		cmp	si, 5
		jl	short loc_11BE9
		mov	bx, word_1A940
		shl	bx, 1
		mov	ax, [bx+2F66h]
		mov	word_1A952, ax
		mov	byte_1A94E, 0
		mov	byte_1A946, 0
		mov	word_1A942, 0
		mov	bx, word_1A940
		shl	bx, 1
		mov	ax, [bx+2F40h]
		mov	word_1ABAC, ax
		mov	bx, ax
		mov	al, [bx+2F4Ch]
		mov	ah, 0
		mov	dx, 38h	; '8'
		mul	dx
		mov	bx, 3592h
		mov	cx, ds
		add	bx, ax
		push	cx
		push	bx
		mov	ax, 4
		push	ax
		push	cs
		call	near ptr sub_10B80
		mov	sp, bp

loc_11C4B:				; CODE XREF: sub_11BBC+20j
					; sub_11BBC+27j
		cli
		mov	ax, 1Ch
		push	ax
		call	sub_1288E
		mov	sp, bp
		mov	word_1AC8A, dx
		mov	word_1AC88, ax
		mov	ax, 11A9h
		mov	dx, cs
		push	dx
		push	ax
		mov	ax, 1Ch
		push	ax
		call	sub_1289E
		mov	sp, bp
		sti
		mov	word_19E8A, 0
		mov	word_19E88, 0
		pop	bp
		pop	si
		retf
sub_11BBC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11C80	proc far		; CODE XREF: sub_DE8+15C8P
					; sub_23BE+1268P ...
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_11C8E
		call	far ptr	errStackOverflow

loc_11C8E:				; CODE XREF: sub_11C80+7j
		cli
		push	word_1AC8A
		push	word_1AC88
		mov	ax, 1Ch
		push	ax
		call	sub_1289E
		add	sp, 6
		sti
		pop	bp
		retf
sub_11C80	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11CA6	proc far		; CODE XREF: sub_3DEF+1CP
		push	bp
		mov	bp, sp
		cmp	word_17D9E, sp
		ja	short loc_11CB4
		call	far ptr	errStackOverflow

loc_11CB4:				; CODE XREF: sub_11CA6+7j
		mov	ax, 388h
		push	ax
		push	cs
		call	near ptr sub_109D5
		inc	sp
		inc	sp
		or	ax, ax
		jz	short loc_11D32
		mov	byte_18141, 1
		push	cs
		call	near ptr sub_109FF
		mov	ax, 1
		push	ax
		push	cs
		call	near ptr sub_10A5A
		inc	sp
		inc	sp
		push	ds
		mov	ax, 3602h
		push	ax
		mov	ax, 1
		push	ax
		push	cs
		call	near ptr sub_10B80
		add	sp, 6
		push	ds
		mov	ax, 3592h
		push	ax
		mov	ax, 2
		push	ax
		push	cs
		call	near ptr sub_10B80
		add	sp, 6
		push	ds
		mov	ax, 36E2h
		push	ax
		mov	ax, 3
		push	ax
		push	cs
		call	near ptr sub_10B80
		add	sp, 6
		mov	ax, 69h	; 'i'
		push	ax
		mov	ax, 4
		push	ax
		push	cs
		call	near ptr sub_10C58
		add	sp, 4
		mov	ax, 69h	; 'i'
		push	ax
		mov	ax, 6
		push	ax
		push	cs
		call	near ptr sub_10C58
		add	sp, 4
		mov	ax, 69h	; 'i'
		push	ax
		mov	ax, 7
		push	ax
		push	cs

loc_11D2C:
		call	near ptr sub_10C58

loc_11D2F:
		add	sp, 4

loc_11D32:				; CODE XREF: sub_11CA6+1Aj
		pop	bp
		retf
sub_11CA6	endp ; sp = -4

seg011		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg012		segment	byte public 'CODE' use16
		assume cs:seg012
		;org 4
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11D34	proc far		; CODE XREF: sub_72AE+105P
					; sub_72AE+19BP ...

arg_0		= word ptr  8
arg_2		= word ptr  0Ah
arg_4		= word ptr  0Ch

		push	si
		push	bp
		mov	bp, sp
		xor	ax, ax
		push	ax
		push	[bp+arg_2]

loc_11D3E:
		push	[bp+arg_0]
		call	sub_11DB7
		mov	sp, bp
		mov	si, ax
		cmp	si, 0FFFFh
		jnz	short loc_11D53
		mov	ax, si
		jmp	short loc_11D6D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11D53:				; CODE XREF: sub_11D34+19j
		test	[bp+arg_4], 2
		jz	short loc_11D60
		test	si, 1
		jnz	short loc_11D64

loc_11D60:				; CODE XREF: sub_11D34+24j
		xor	ax, ax
		jmp	short loc_11D6D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11D64:				; CODE XREF: sub_11D34+2Aj
		mov	word_14233, 5
		mov	ax, 0FFFFh

loc_11D6D:				; CODE XREF: sub_11D34+1Dj
					; sub_11D34+2Ej
		pop	bp
		pop	si
		retf
sub_11D34	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		cmp	word_17AB8, 20h	; ' '
		jnz	short loc_11D7F
		mov	ax, 1
		jmp	short loc_11D9B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11D7F:				; CODE XREF: seg012:0048j
		mov	dx, [bp+8]
		mov	ax, [bp+6]
		mov	bx, word_17AB8
		shl	bx, 1
		shl	bx, 1

loc_11D8D:
		mov	[bx+6B24h], dx
		mov	[bx+6B22h], ax
		inc	word_17AB8
		xor	ax, ax

loc_11D9B:				; CODE XREF: seg012:004Dj
		pop	bp
		retf
seg012		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg013		segment	byte public 'CODE' use16
		assume cs:seg013
		;org 0Dh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
byte_11D9D	db 0CDh, 11h, 0CBh, 0CDh, 12h, 0CBh

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11DA3	proc far		; CODE XREF: sub_3634+49DP
					; sub_3634+5C8P ...

arg_0		= byte ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		mov	ah, [bp+arg_0]
		mov	cx, [bp+arg_4]

loc_11DAC:
		mov	dx, [bp+arg_2]

loc_11DAF:
		int	1Ah
		mov	ax, dx
		mov	dx, cx
		pop	bp
		retf
sub_11DA3	endp

seg013		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg014		segment	byte public 'CODE' use16
		assume cs:seg014
		;org 7
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11DB7	proc far		; CODE XREF: sub_11D34+DP
					; sub_12E18+41P ...

arg_0		= dword	ptr  6
arg_4		= byte ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	ds
		mov	ah, 43h	; 'C'

loc_11DBD:
		mov	al, [bp+arg_4]
		mov	cx, [bp+arg_6]
		lds	dx, [bp+arg_0]
		int	21h		; DOS -
		pop	ds
		jb	short loc_11DCE
		xchg	ax, cx

loc_11DCC:
		jmp	short loc_11DD4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11DCE:				; CODE XREF: sub_11DB7+12j
		push	ax

loc_11DCF:
		call	sub_12AF3

loc_11DD4:				; CODE XREF: sub_11DB7:loc_11DCCj
		pop	bp
		retf
sub_11DB7	endp

seg014		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg015		segment	byte public 'CODE' use16
		assume cs:seg015
		;org 6
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11DD6	proc far		; CODE XREF: sub_66A+55DP sub_66A+6A1P ...

arg_0		= word ptr  8

		push	si
		push	bp
		mov	bp, sp
		mov	si, [bp+arg_0]

loc_11DDD:
		or	si, si
		jl	short loc_11DE6
		cmp	si, 14h
		jl	short loc_11DF1

loc_11DE6:				; CODE XREF: sub_11DD6+9j
		mov	ax, 6
		push	ax
		call	sub_12AF3
		jmp	short loc_11E02
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11DF1:				; CODE XREF: sub_11DD6+Ej
		mov	bx, si
		shl	bx, 1
		mov	word ptr [bx+3B44h], 0FFFFh
		push	si

loc_11DFC:
		call	sub_11E05
		pop	cx

loc_11E02:				; CODE XREF: sub_11DD6+19j
		pop	bp
		pop	si
		retf
sub_11DD6	endp

seg015		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg016		segment	byte public 'CODE' use16
		assume cs:seg016
		;org 5
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11E05	proc far		; CODE XREF: sub_11DD6:loc_11DFCP
					; sub_12E18+9AP

arg_0		= word ptr  8

		push	si
		push	bp
		mov	bp, sp
		mov	si, [bp+arg_0]
		mov	ah, 3Eh	; '>'

loc_11E0E:
		mov	bx, si
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		jb	short loc_11E20
		shl	bx, 1
		mov	word ptr [bx+3B44h], 0FFFFh

loc_11E1C:
		xor	ax, ax

loc_11E1E:
		jmp	short loc_11E26
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11E20:				; CODE XREF: sub_11E05+Dj
		push	ax
		call	sub_12AF3

loc_11E26:				; CODE XREF: sub_11E05:loc_11E1Ej
		pop	bp
		pop	si
		retf
sub_11E05	endp

seg016		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg017		segment	byte public 'CODE' use16
		assume cs:seg017
		;org 9
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11E29	proc far		; CODE XREF: sub_72AE+2FP sub_72AE+69P ...

arg_0		= byte ptr  6

		push	bp
		mov	bp, sp

loc_11E2C:
		mov	al, byte_17ABE
		and	al, 70h
		mov	dl, [bp+arg_0]
		and	dl, 8Fh
		or	al, dl
		mov	byte_17ABE, al
		pop	bp
		retf
sub_11E29	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11E3F	proc far		; CODE XREF: sub_FDB2+1CP
					; sub_FDB2+107P

arg_0		= byte ptr  6

		push	bp
		mov	bp, sp
		mov	al, byte_17ABE
		and	al, 8Fh
		mov	dl, [bp+arg_0]
		mov	cx, 4
		shl	dl, cl
		and	dl, 7Fh
		or	al, dl
		mov	byte_17ABE, al
		pop	bp
		retf
sub_11E3F	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		mov	al, [bp+6]
		mov	byte_17ABE, al
		pop	bp
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		or	byte_17ABE, 8
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11E6B:
		and	byte_17ABE, 0F7h

locret_11E70:
		retf
seg017		ends

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg018		segment	byte public 'CODE' use16
		assume cs:seg018
		;org 1
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
		mov	al, byte_17ABF
		mov	byte_17ABE, al
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

maybePrintString proc far		; CODE XREF: sub_11FEC+1BP
					; sub_12FA9+10P

var_3		= byte ptr -3
var_2		= word ptr -2
arg_4		= word ptr  0Eh
arg_6		= dword	ptr  10h

		push	si
		push	di
		push	bp
		mov	bp, sp

loc_11E7D:
		sub	sp, 4
		mov	[bp+var_3], 0
		call	sub_13FEF
		mov	ah, 0
		mov	si, ax
		call	sub_13FEF
		mov	cx, 8
		shr	ax, cl
		mov	ah, 0
		mov	di, ax

processChar:				; CODE XREF: maybePrintString+FDj
					; maybePrintString+114j ...
		mov	ax, [bp+arg_4]
		dec	[bp+arg_4]
		or	ax, ax
		jnz	short loc_11EA8
		jmp	loc_11FAE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11EA8:				; CODE XREF: maybePrintString+2Bj
		les	bx, [bp+arg_6]
		inc	word ptr [bp+arg_6]
		mov	al, es:[bx]
		mov	[bp+var_3], al
		mov	ah, 0
		cmp	ax, 0Dh		; switch 14 cases
		ja	short loc_11F10	; default
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_11EC4[bx] ; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_11EC4	dw offset loc_11EE0	; DATA XREF: maybePrintString+47r
		dw offset loc_11F10	; jump table for switch	statement
		dw offset loc_11F10
		dw offset loc_11F10
		dw offset loc_11F10
		dw offset loc_11F10
		dw offset loc_11F10
		dw offset loc_11EE5
		dw offset loc_11EF1
		dw offset loc_11F10
		dw offset loc_11F06
		dw offset loc_11F10
		dw offset loc_11F10
		dw offset loc_11EFD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11EE0:				; CODE XREF: maybePrintString+47j
					; DATA XREF: maybePrintString:off_11EC4o
		xor	ax, ax		; case 0x0
		jmp	loc_11FC4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11EE5:				; CODE XREF: maybePrintString+47j
					; DATA XREF: maybePrintString:off_11EC4o
		mov	ah, 0Eh		; case 0x7
		mov	al, 7
		call	sub_1AF
		jmp	loc_11F6C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11EF1:				; CODE XREF: maybePrintString+47j
					; DATA XREF: maybePrintString:off_11EC4o
		mov	al, byte ptr word_17ABA	; case 0x8
		mov	ah, 0
		cmp	ax, si
		jge	short loc_11F6C
		dec	si
		jmp	short loc_11F6C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11EFD:				; CODE XREF: maybePrintString+47j
					; DATA XREF: maybePrintString:off_11EC4o
		mov	al, byte ptr word_17ABA	; case 0xD
		mov	ah, 0
		mov	si, ax
		jmp	short loc_11F6C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11F06:				; CODE XREF: maybePrintString+47j
					; DATA XREF: maybePrintString:off_11EC4o
		mov	al, byte ptr word_17ABC	; case 0xA
		mov	ah, 0
		mov	si, ax
		inc	si
		jmp	short loc_11F6C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11F10:				; CODE XREF: maybePrintString+41j
					; maybePrintString+47j
					; DATA XREF: ...
		cmp	byte_17AC3, 0	; default
		jnz	short loc_11F47
		cmp	word_17AC9, 0
		jz	short loc_11F47
		mov	ah, byte_17ABE
		mov	al, [bp+var_3]
		mov	[bp+var_2], ax
		mov	ax, si
		inc	ax
		push	ax
		mov	ax, di
		inc	ax
		push	ax
		call	printChar1
		push	dx
		push	ax
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		mov	ax, 1
		push	ax
		call	printChar2
		jmp	short loc_11F6B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11F47:				; CODE XREF: maybePrintString+9Dj
					; maybePrintString+A4j
		mov	ax, si
		mov	dl, al
		mov	ax, di
		mov	dh, al
		mov	ah, 2
		mov	bh, 0
		call	sub_1AF
		mov	bl, byte_17ABE
		mov	al, [bp+var_3]
		mov	ah, 9
		mov	bh, 0
		mov	cx, 1
		call	sub_1AF

loc_11F6B:				; CODE XREF: maybePrintString+CDj
		inc	si

loc_11F6C:				; CODE XREF: maybePrintString+76j
					; maybePrintString+80j	...
		mov	al, byte ptr word_17ABC
		mov	ah, 0
		cmp	ax, si
		jl	short loc_11F78
		jmp	processChar
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11F78:				; CODE XREF: maybePrintString+FBj
		mov	al, byte ptr word_17ABA
		mov	ah, 0
		mov	si, ax
		inc	di
		mov	ax, di
		mov	dl, byte ptr word_17ABC+1
		mov	dh, 0
		cmp	ax, dx
		jg	short loc_11F8F
		jmp	processChar
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11F8F:				; CODE XREF: maybePrintString+112j
		mov	al, 6
		push	ax
		push	word_17ABA
		push	word_17ABA+1
		push	word_17ABC
		push	word_17ABC+1
		mov	al, 1
		push	ax
		call	sub_130FE
		dec	di
		jmp	processChar
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_11FAE:				; CODE XREF: maybePrintString+2Dj
		mov	ax, si
		mov	dl, al
		mov	ax, di
		mov	dh, al
		mov	ah, 2
		mov	bh, 0
		call	sub_1AF
		mov	al, [bp+var_3]
		mov	ah, 0

loc_11FC4:				; CODE XREF: maybePrintString+6Aj
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf	0Ah
maybePrintString endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11FCC	proc far		; CODE XREF: sub_6927+20P sub_72AE+3BP ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		mov	ax, 8
		mov	dx, cs
		push	dx
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+arg_2]

loc_11FDD:
		push	[bp+arg_0]

loc_11FE0:
		push	ss
		lea	ax, [bp+arg_4]
		push	ax
		call	thingThatEndsUpPrintingStr
		pop	bp
		retf
sub_11FCC	endp

seg018		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg019		segment	byte public 'CODE' use16
		assume cs:seg019
		;org 0Ch
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_11FEC	proc far		; CODE XREF: sub_FDB2+28P sub_FDB2+4AP ...

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp

loc_11FED:
		mov	bp, sp
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_13692
		pop	cx
		pop	cx
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	maybePrintString
		pop	bp
		retf
sub_11FEC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_1200E	proc far		; CODE XREF: seg019:024Ap
					; sub_12231+29p

var_2		= word ptr -2
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= word ptr  0Eh

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		xor	dx, dx
		mov	ax, 3Ch	; '<'
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B1
		mov	word_1AD7E, ax
		xor	dx, dx
		mov	ax, 3Ch	; '<'
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B9
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		xor	dx, dx
		mov	ax, 3Ch	; '<'
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B1
		mov	word_1AD80, ax
		xor	dx, dx
		mov	ax, 3Ch	; '<'
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B9
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		xor	dx, dx
		mov	ax, 88F8h
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B9
		mov	[bp+var_2], ax
		mov	ax, [bp+var_2]
		shl	ax, 1
		shl	ax, 1
		add	ax, 46h	; 'F'
		mov	word_1AD88, ax
		mov	ax, [bp+var_2]
		mov	dx, 5B5h
		mul	dx
		mov	di, ax
		xor	dx, dx
		mov	ax, 88F8h
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B1
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax

loc_120B3:				; CODE XREF: sub_1200E+E9j
		mov	si, 2238h

loc_120B6:
		test	word_1AD88, 3
		jnz	short loc_120C1
		add	si, 18h

loc_120C1:				; CODE XREF: sub_1200E+AEj
		mov	ax, si
		cwd
		cmp	dx, [bp+arg_2]
		jl	short loc_120D2
		jg	short loc_120D0
		cmp	ax, [bp+arg_0]
		jbe	short loc_120D2

loc_120D0:				; CODE XREF: sub_1200E+BBj
		jmp	short loc_120F9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_120D2:				; CODE XREF: sub_1200E+B9j
					; sub_1200E+C0j
		mov	ax, si
		mov	bx, 18h
		cwd
		idiv	bx
		add	di, ax
		inc	word_1AD88
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		push	dx
		push	ax
		mov	ax, si
		cwd
		pop	bx
		pop	cx
		sub	bx, ax
		sbb	cx, dx
		mov	[bp+arg_2], cx
		mov	[bp+arg_0], bx
		jmp	short loc_120B3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_120F9:				; CODE XREF: sub_1200E:loc_120D0j
		cmp	[bp+arg_4], 0
		jz	short loc_12134
		cmp	word_17AE2, 0
		jz	short loc_12134
		cmp	[bp+arg_2], 0
		jl	short loc_12134
		jnz	short loc_12115
		cmp	[bp+arg_0], 0B12h
		jb	short loc_12134

loc_12115:				; CODE XREF: sub_1200E+FEj
		cmp	[bp+arg_2], 0
		jg	short loc_12134

loc_1211B:
		jl	short loc_12124
		cmp	[bp+arg_0], 1BC2h
		jnb	short loc_12134

loc_12124:				; CODE XREF: sub_1200E:loc_1211Bj
		add	[bp+arg_0], 1
		adc	[bp+arg_2], 0
		mov	word_1AD8E, 1
		jmp	short loc_1213A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12134:				; CODE XREF: sub_1200E+EFj
					; sub_1200E+F6j ...
		mov	word_1AD8E, 0

loc_1213A:				; CODE XREF: sub_1200E+124j
		xor	dx, dx
		mov	ax, 18h
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B1
		mov	word_1AD82, ax
		xor	dx, dx
		mov	ax, 18h
		push	dx
		push	ax
		push	[bp+arg_2]

loc_12159:
		push	[bp+arg_0]
		call	sub_2B9
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		mov	ax, [bp+arg_0]
		mov	word_1AD8C, ax
		mov	ax, [bp+arg_0]
		add	ax, 4
		add	di, ax
		mov	ax, di
		mov	bx, 7
		cwd
		idiv	bx
		mov	word_1AD8A, dx
		add	[bp+arg_0], 1
		adc	[bp+arg_2], 0

loc_12189:
		test	word_1AD88, 3
		jnz	short loc_121C8
		cmp	[bp+arg_2], 0
		jl	short loc_121A9
		jg	short loc_1219F
		cmp	[bp+arg_0], 3Ch	; '<'
		jbe	short loc_121A9

loc_1219F:				; CODE XREF: sub_1200E+189j
		sub	[bp+arg_0], 1
		sbb	[bp+arg_2], 0
		jmp	short loc_121C8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_121A9:				; CODE XREF: sub_1200E+187j
					; sub_1200E+18Fj
		cmp	[bp+arg_2], 0
		jnz	short loc_121C8
		cmp	[bp+arg_0], 3Ch	; '<'
		jnz	short loc_121C8
		mov	word_1AD86, 1
		mov	word_1AD84, 1Dh
		mov	ax, offset word_1AD7E
		mov	dx, ds
		jmp	short loc_12213
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_121C8:				; CODE XREF: sub_1200E+181j
					; sub_1200E+199j ...
		mov	word_1AD86, 0
		jmp	short loc_121F2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_121D0:				; CODE XREF: sub_1200E+1F1j
					; sub_1200E+1F8j
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	bx, word_1AD86
		push	dx
		push	ax
		mov	al, [bx+3912h]
		cbw
		cwd
		pop	bx
		pop	cx
		sub	bx, ax
		sbb	cx, dx
		mov	[bp+arg_2], cx
		mov	[bp+arg_0], bx
		inc	word_1AD86

loc_121F2:				; CODE XREF: sub_1200E+1C0j
		mov	bx, word_1AD86
		mov	al, [bx+3912h]
		cbw

loc_121FB:
		cwd
		cmp	dx, [bp+arg_2]
		jl	short loc_121D0
		jnz	short loc_12208
		cmp	ax, [bp+arg_0]
		jb	short loc_121D0

loc_12208:				; CODE XREF: sub_1200E+1F3j
		mov	ax, [bp+arg_0]
		mov	word_1AD84, ax
		mov	ax, offset word_1AD7E
		mov	dx, ds

loc_12213:				; CODE XREF: sub_1200E+1B8j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_1200E	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		xor	ax, ax
		push	ax
		les	bx, [bp+6]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx]
		push	cs
		call	near ptr sub_1200E
		mov	sp, bp
		pop	bp
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12231	proc far		; CODE XREF: seg019:02F5p

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 4
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		sub	ax, word_17ADE
		sbb	dx, word_17AE0
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	ax, 1
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		push	cs
		call	near ptr sub_1200E
		add	sp, 6
		mov	sp, bp
		pop	bp
		retf
sub_12231	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12264	proc far		; CODE XREF: seg019:loc_122DDp

arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+0Ah]
		add	ax, 76Ch
		push	ax
		les	bx, [bp+arg_0]
		push	word ptr es:[bx]
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+2]
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+4]
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+6]
		les	bx, [bp+arg_0]
		mov	bx, es:[bx+8]
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+3942h]
		push	word ptr [bx+3940h]
		les	bx, [bp+arg_0]
		mov	bx, es:[bx+0Ch]
		shl	bx, 1
		shl	bx, 1
		push	word ptr [bx+3926h]
		push	word ptr [bx+3924h]
		push	ds
		mov	ax, 39BCh
		push	ax
		push	ds
		mov	ax, 6BA4h
		push	ax
		call	sub_13519
		mov	sp, bp
		mov	ax, offset unk_1AD64
		mov	dx, ds
		pop	bp
		retf
sub_12264	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		push	cs
		call	near ptr sub_12231
		mov	sp, bp
		push	dx
		push	ax
		push	cs

loc_122DD:
		call	near ptr sub_12264

loc_122E0:
		mov	sp, bp
		pop	bp
		retf
seg019		ends

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg020		segment	byte public 'CODE' use16
		assume cs:seg020
		;org 4
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
		retf
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS KEYPAD "+" TO EXPAND]

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_122E6	proc far		; CODE XREF: start+FCP	sub_6927+2BP ...

arg_0		= word ptr  6

		push	bp
		mov	bp, sp

loc_122E9:				; CODE XREF: sub_122E6+1Aj
		mov	ax, word_17AB8

loc_122EC:
		dec	word_17AB8
		or	ax, ax
		jz	short loc_12302
		mov	bx, word_17AB8
		shl	bx, 1
		shl	bx, 1
		call	dword ptr [bx+6B22h]
		jmp	short loc_122E9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12302:				; CODE XREF: sub_122E6+Cj
		call	off_17CF6
		call	off_17CFA

loc_1230A:
		call	off_17CFE

loc_1230E:
		push	[bp+arg_0]
		call	far ptr	sub_101
		pop	cx
		pop	bp
		retf
sub_122E6	endp

seg020		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg021		segment	byte public 'CODE' use16
		assume cs:seg021
		;org 9
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12319	proc near		; CODE XREF: sub_123AC+33p
					; sub_123F3+60p

arg_2		= word ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp

loc_1231E:
		mov	si, [bp+arg_2]
		inc	si
		sub	si, word_1422F
		mov	ax, si
		add	ax, 3Fh	; '?'
		mov	cx, 6
		shr	ax, cl
		mov	si, ax
		cmp	si, word_17D02
		jnz	short loc_12348
		les	bx, [bp+8]
		mov	word ptr dword_1423B+2,	es
		mov	word ptr dword_1423B, bx
		mov	ax, 1
		jmp	short loc_123A6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12348:				; CODE XREF: sub_12319+1Dj
		mov	cx, 6
		shl	si, cl
		mov	di, word_14241
		mov	ax, si
		add	ax, word_1422F
		cmp	ax, di
		jbe	short loc_12361
		mov	si, di
		sub	si, word_1422F

loc_12361:				; CODE XREF: sub_12319+40j
		push	si
		push	word_1422F
		call	sub_1346B

loc_1236B:
		mov	sp, bp
		mov	di, ax
		cmp	di, 0FFFFh
		jnz	short loc_12390
		mov	ax, si
		mov	cx, 6
		shr	ax, cl
		mov	word_17D02, ax
		les	bx, [bp+8]
		mov	word ptr dword_1423B+2,	es
		mov	word ptr dword_1423B, bx
		mov	ax, 1
		jmp	short loc_123A6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_123A6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12390:				; CODE XREF: sub_12319+59j
		mov	ax, word_1422F
		add	ax, di
		xor	dx, dx
		mov	dx, ax
		xor	ax, ax
		mov	word_14241, dx
		mov	word_1423F, ax
		xor	ax, ax
		jmp	short $+2

loc_123A6:				; CODE XREF: sub_12319+2Dj
					; sub_12319+73j ...
		pop	bp
		pop	di
		pop	si
		retn	4
sub_12319	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_123AC	proc far		; CODE XREF: sub_12481+223P

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	cx, word_14239
		mov	bx, word_14237
		call	sub_408
		jb	short loc_123E6
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	cx, word_14241
		mov	bx, word_1423F
		call	sub_408
		ja	short loc_123E6
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_12319
		or	ax, ax
		jnz	short loc_123ED

loc_123E6:				; CODE XREF: sub_123AC+16j
					; sub_123AC+2Bj
		mov	ax, 0FFFFh
		jmp	short loc_123F1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_123F1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_123ED:				; CODE XREF: sub_123AC+38j
		xor	ax, ax
		jmp	short $+2

loc_123F1:				; CODE XREF: sub_123AC+3Dj
					; sub_123AC+3Fj
		pop	bp
		retf
sub_123AC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_123F3	proc far		; CODE XREF: sub_12481+1C7P
					; sub_126BA+128P

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 8
		mov	dx, word ptr dword_1423B+2
		mov	ax, word ptr dword_1423B
		mov	cx, [bp+arg_2]
		mov	bx, [bp+arg_0]
		call	sub_3AD
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	dx, [bp+var_6]
		mov	ax, [bp+var_8]
		mov	cx, word_14239
		mov	bx, word_14237
		call	sub_408
		jb	short loc_1243B
		mov	dx, [bp+var_6]
		mov	ax, [bp+var_8]
		mov	cx, word_14241
		mov	bx, word_1423F
		call	sub_408
		jbe	short loc_12443

loc_1243B:				; CODE XREF: sub_123F3+31j
		mov	dx, 0FFFFh
		mov	ax, 0FFFFh
		jmp	short loc_12468
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12443:				; CODE XREF: sub_123F3+46j
		les	bx, dword_1423B
		mov	[bp+var_2], es
		mov	[bp+var_4], bx
		push	[bp+var_6]
		push	[bp+var_8]
		call	sub_12319
		or	ax, ax
		jnz	short loc_12462
		mov	dx, 0FFFFh

loc_1245D:
		mov	ax, 0FFFFh

loc_12460:
		jmp	short loc_12468
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12462:				; CODE XREF: sub_123F3+65j
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]

loc_12468:				; CODE XREF: sub_123F3+4Ej
					; sub_123F3:loc_12460j
		mov	sp, bp
		pop	bp
		retf
sub_123F3	endp

seg021		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg022		segment	byte public 'CODE' use16
		assume cs:seg022
		;org 0Ch
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_1246C	proc far		; CODE XREF: sub_72AE:loc_72FCP
		mov	dx, word_14241
		mov	ax, word_1423F
		mov	cx, word ptr dword_1423B+2
		mov	bx, word ptr dword_1423B

loc_1247B:
		call	sub_42A

locret_12480:
		retf
sub_1246C	endp

seg022		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg023		segment	byte public 'CODE' use16
		assume cs:seg023
		;org 1
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12481	proc far		; CODE XREF: sub_66A+688P sub_66A+696P ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 8
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]

loc_1248D:
		jnz	short loc_12492
		jmp	loc_126B6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12492:				; CODE XREF: sub_12481:loc_1248Dj
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	cx, 0FFFFh
		mov	bx, 0FFFCh
		call	sub_3AD
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, dword ptr word_17D34
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		jmp	short loc_1250D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_124B5:				; CODE XREF: sub_12481+9Dj
					; sub_12481+BBj
		mov	cx, word ptr [bp+var_4+2]
		mov	bx, word ptr [bp+var_4]
		push	cx
		push	bx
		les	bx, [bp+var_4]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		pop	bx
		pop	cx
		call	sub_408
		ja	short loc_12500
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		mov	cx, word ptr [bp+var_4+2]
		mov	bx, word ptr [bp+var_4]
		call	sub_408
		ja	short loc_1253F
		mov	cx, word ptr [bp+var_8+2]
		mov	bx, word ptr [bp+var_8]
		push	cx
		push	bx
		les	bx, [bp+var_4]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		pop	bx
		pop	cx
		call	sub_408
		ja	short loc_1253F

loc_12500:				; CODE XREF: sub_12481+4Ej
		les	bx, [bp+var_4]
		les	bx, es:[bx+4]
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx

loc_1250D:				; CODE XREF: sub_12481+32j
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		mov	cx, word ptr [bp+var_4+2]
		mov	bx, word ptr [bp+var_4]
		call	sub_408
		jbe	short loc_124B5
		mov	cx, word ptr [bp+var_8+2]
		mov	bx, word ptr [bp+var_8]
		push	cx
		push	bx
		les	bx, [bp+var_4]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		pop	bx
		pop	cx
		call	sub_408
		ja	short loc_1253F
		jmp	loc_124B5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1253F:				; CODE XREF: sub_12481+61j
					; sub_12481+7Dj ...
		les	bx, [bp+var_8]
		mov	cx, es:[bx+2]
		mov	bx, es:[bx]
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		call	sub_3AD
		les	bx, [bp+var_4]
		mov	cx, es:[bx+6]
		mov	bx, es:[bx+4]
		call	sub_408
		jnz	short loc_125A4
		les	bx, [bp+var_8]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		les	bx, [bp+var_4]
		les	bx, es:[bx+4]
		add	ax, es:[bx]
		adc	dx, es:[bx+2]
		les	bx, [bp+var_8]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		les	bx, [bp+var_4]
		les	bx, es:[bx+4]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		les	bx, [bp+var_8]
		mov	es:[bx+6], dx
		mov	es:[bx+4], ax
		jmp	short loc_125BA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_125A4:				; CODE XREF: sub_12481+E3j
		les	bx, [bp+var_4]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		les	bx, [bp+var_8]
		mov	es:[bx+6], dx
		mov	es:[bx+4], ax

loc_125BA:				; CODE XREF: sub_12481+121j
		les	bx, [bp+var_4]
		mov	cx, es:[bx+2]
		mov	bx, es:[bx]
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		call	sub_3AD
		mov	cx, word ptr [bp+var_8+2]
		mov	bx, word ptr [bp+var_8]
		call	sub_408
		jnz	short loc_12618
		les	bx, [bp+var_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		les	bx, [bp+var_8]
		add	ax, es:[bx]
		adc	dx, es:[bx+2]
		les	bx, [bp+var_4]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		les	bx, [bp+var_8]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		les	bx, [bp+var_4]
		mov	es:[bx+6], dx
		mov	es:[bx+4], ax
		mov	word ptr [bp+var_8+2], es
		mov	word ptr [bp+var_8], bx
		jmp	short loc_12629
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12618:				; CODE XREF: sub_12481+159j
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		les	bx, [bp+var_4]
		mov	es:[bx+6], dx
		mov	es:[bx+4], ax

loc_12629:				; CODE XREF: sub_12481+195j
		les	bx, [bp+var_8]
		mov	cx, es:[bx+2]
		mov	bx, es:[bx]
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		call	sub_3AD
		mov	bx, ax
		mov	cx, dx
		push	cx
		push	bx
		xor	ax, ax
		push	ax
		push	ax
		call	sub_123F3
		pop	cx
		pop	cx
		pop	bx
		pop	cx
		call	sub_408
		jnz	short loc_126AB
		les	bx, [bp+var_8]
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		jmp	short loc_12670
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12663:				; CODE XREF: sub_12481+205j
		les	bx, [bp+var_4]
		les	bx, es:[bx+4]

loc_1266A:
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx

loc_12670:				; CODE XREF: sub_12481+1E0j
		les	bx, [bp+var_4]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		mov	cx, word ptr [bp+var_8+2]
		mov	bx, word ptr [bp+var_8]
		call	sub_408
		jnz	short loc_12663
		les	bx, [bp+var_8]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		les	bx, [bp+var_4]
		mov	es:[bx+6], dx

loc_1269A:
		mov	es:[bx+4], ax
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		call	sub_123AC
		pop	cx
		pop	cx

loc_126AB:				; CODE XREF: sub_12481+1D5j
		les	bx, [bp+var_4]

loc_126AE:
		mov	seg_17D36, es
		mov	word_17D34, bx

loc_126B6:				; CODE XREF: sub_12481+Ej
		mov	sp, bp
		pop	bp
		retf
sub_12481	endp

seg023		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg024		segment	byte public 'CODE' use16
		assume cs:seg024
		;org 0Ah
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_126BA	proc far		; CODE XREF: sub_66A+43P sub_66A+98P ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp

loc_126BD:
		sub	sp, 0Ch
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jnz	short loc_126CF
		xor	dx, dx
		xor	ax, ax
		jmp	loc_12823
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_126CF:				; CODE XREF: sub_126BA+Cj
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		add	ax, 9
		adc	dx, 0
		and	ax, 0FFFEh
		and	dx, 0FFFFh
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		les	bx, dword ptr word_17D34
		mov	word ptr [bp+var_8+2], es
		mov	word ptr [bp+var_8], bx
		les	bx, [bp+var_8]
		les	bx, es:[bx+4]
		mov	word ptr [bp+var_C+2], es
		mov	word ptr [bp+var_C], bx

loc_126FF:				; CODE XREF: sub_126BA+11Fj
		les	bx, [bp+var_C]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		cmp	dx, [bp+arg_2]
		jnb	short loc_12711
		jmp	loc_127AF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12711:				; CODE XREF: sub_126BA+52j
		jnz	short loc_1271B
		cmp	ax, [bp+arg_0]
		jnb	short loc_1271B
		jmp	loc_127AF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1271B:				; CODE XREF: sub_126BA:loc_12711j
					; sub_126BA+5Cj
		les	bx, [bp+var_C]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	cx, [bp+arg_2]
		mov	bx, [bp+arg_0]
		add	bx, 8
		adc	cx, 0
		cmp	dx, cx
		ja	short loc_12753
		jnz	short loc_1273B
		cmp	ax, bx
		ja	short loc_12753

loc_1273B:				; CODE XREF: sub_126BA+7Bj
		les	bx, [bp+var_C]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		les	bx, [bp+var_8]
		mov	es:[bx+6], dx
		mov	es:[bx+4], ax
		jmp	short loc_12798
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12753:				; CODE XREF: sub_126BA+79j
					; sub_126BA+7Fj
		les	bx, [bp+var_C]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		sub	ax, [bp+arg_0]
		sbb	dx, [bp+arg_2]
		les	bx, [bp+var_C]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		les	bx, [bp+var_C]
		mov	cx, es:[bx+2]
		mov	bx, es:[bx]
		mov	dx, word ptr [bp+var_C+2]
		mov	ax, word ptr [bp+var_C]
		call	sub_3AD
		mov	word ptr [bp+var_C+2], dx
		mov	word ptr [bp+var_C], ax
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		les	bx, [bp+var_C]
		mov	es:[bx+2], dx
		mov	es:[bx], ax

loc_12798:				; CODE XREF: sub_126BA+97j
		les	bx, [bp+var_8]
		mov	seg_17D36, es
		mov	word_17D34, bx
		mov	dx, word ptr [bp+var_C+2]
		mov	ax, word ptr [bp+var_C]
		add	ax, 4
		jmp	loc_12823
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_127AF:				; CODE XREF: sub_126BA+54j
					; sub_126BA+5Ej
		mov	dx, word ptr [bp+var_C+2]
		mov	ax, word ptr [bp+var_C]
		cmp	dx, seg_17D36
		jnz	short loc_127C3
		cmp	ax, word_17D34
		jnz	short loc_127C3
		jmp	short loc_127DC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_127C3:				; CODE XREF: sub_126BA+FFj
					; sub_126BA+105j
		les	bx, [bp+var_C]
		mov	word ptr [bp+var_8+2], es
		mov	word ptr [bp+var_8], bx
		les	bx, [bp+var_C]
		les	bx, es:[bx+4]
		mov	word ptr [bp+var_C+2], es
		mov	word ptr [bp+var_C], bx
		jmp	loc_126FF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_127DC:				; CODE XREF: sub_126BA+107j
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_123F3
		pop	cx
		pop	cx

loc_127E9:
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		cmp	word ptr [bp+var_4+2], 0FFFFh
		jnz	short loc_12801
		cmp	word ptr [bp+var_4], 0FFFFh
		jnz	short loc_12801
		xor	dx, dx
		xor	ax, ax
		jmp	short loc_12823
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12801:				; CODE XREF: sub_126BA+139j
					; sub_126BA+13Fj
		les	bx, [bp+var_4]
		mov	word ptr [bp+var_C+2], es
		mov	word ptr [bp+var_C], bx

loc_1280A:
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		les	bx, [bp+var_C]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		mov	dx, word ptr [bp+var_C+2]

loc_1281D:
		mov	ax, word ptr [bp+var_C]

loc_12820:
		add	ax, 4

loc_12823:				; CODE XREF: sub_126BA+12j
					; sub_126BA+F2j ...
		mov	sp, bp
		pop	bp
		retf
sub_126BA	endp

seg024		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg025		segment	byte public 'CODE' use16
		assume cs:seg025
		;org 7
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_12827	proc far		; CODE XREF: sub_3634+4D2P
					; sub_3634+7A9P ...
		mov	ax, 700h
		xchg	al, byte_17D3C

loc_1282E:
		or	al, al
		jnz	short loc_12834
		int	21h		; DOS -	DIRECT STDIN INPUT, NO ECHO

loc_12834:				; CODE XREF: sub_12827+9j
		xor	ah, ah
		retf
sub_12827	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	si
		push	cs
		call	near ptr sub_12827
		mov	si, ax
		push	si
		call	sub_12FA9
		pop	cx
		mov	ax, si
		pop	si
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		cmp	byte_17D3C, 0
		jz	short loc_12858
		mov	ax, 0FFFFh
		jmp	short loc_12860
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12858:				; CODE XREF: seg025:0031j
		mov	al, [bp+6]

loc_1285B:
		mov	byte_17D3C, al

loc_1285E:
		xor	ah, ah

loc_12860:				; CODE XREF: seg025:0036j
		pop	bp
		retf
seg025		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg026		segment	byte public 'CODE' use16
		assume cs:seg026
		;org 2
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12862	proc far		; CODE XREF: sub_135AA+BP

arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		mov	ah, 2Ah
		int	21h		; DOS -	GET CURRENT DATE
					; Return: DL = day, DH = month,	CX = year
					; AL = day of the week (0=Sunday, 1=Monday, etc.)
		les	bx, [bp+arg_0]

loc_1286C:
		mov	es:[bx], cx
		les	bx, [bp+arg_0]
		mov	es:[bx+2], dx
		pop	bp
		retf
sub_12862	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12878	proc far		; CODE XREF: sub_135AA+17P

arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		mov	ah, 2Ch

loc_1287D:				; DOS -	GET CURRENT TIME
		int	21h		; Return: CH = hours, CL = minutes, DH = seconds
					; DL = hundredths of seconds

loc_1287F:
		les	bx, [bp+arg_0]
		mov	es:[bx], cx
		les	bx, [bp+arg_0]
		mov	es:[bx+2], dx
		pop	bp
		retf
sub_12878	endp

seg026		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg027		segment	byte public 'CODE' use16
		assume cs:seg027
		;org 0Eh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_1288E	proc far		; CODE XREF: sub_68C6+17P
					; sub_11BBC+94P

arg_0		= byte ptr  6

		push	bp
		mov	bp, sp
		mov	ah, 35h	; '5'
		mov	al, [bp+arg_0]
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	ax, bx
		mov	dx, es
		pop	bp

locret_1289D:
		retf
sub_1288E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_1289E	proc far		; CODE XREF: sub_68C6+30P sub_6901+1BP ...

arg_0		= byte ptr  6
arg_2		= dword	ptr  8

		push	bp

loc_1289F:
		mov	bp, sp
		mov	ah, 25h	; '%'
		mov	al, [bp+arg_0]
		push	ds
		lds	dx, [bp+arg_2]
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		pop	bp

locret_128AE:
		retf
sub_1289E	endp

seg027		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg028		segment	byte public 'CODE' use16
		assume cs:seg028
		;org 0Fh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_128AF	proc far		; CODE XREF: sub_130FE+84P
					; sub_130FE+116P

arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= word ptr  0Eh
arg_6		= word ptr  10h
arg_8		= word ptr  12h
arg_A		= word ptr  14h

		push	si
		push	di
		push	bp
		mov	bp, sp
		push	[bp+arg_0]
		push	[bp+arg_2]
		push	[bp+arg_4]
		push	[bp+arg_6]
		call	sub_13408
		or	ax, ax
		jnz	short loc_128CD
		xor	ax, ax
		jmp	short loc_12900
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_128CD:				; CODE XREF: sub_128AF+18j
		mov	di, [bp+arg_4]
		sub	di, [bp+arg_0]
		inc	di
		mov	si, [bp+arg_2]
		jmp	short loc_128F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_128D9:				; CODE XREF: sub_128AF+4Cj
		push	[bp+arg_A]
		push	[bp+arg_8]
		push	[bp+arg_0]
		push	si
		call	printChar1
		push	dx
		push	ax
		push	di
		call	sub_133CB
		mov	ax, di
		shl	ax, 1
		add	[bp+arg_8], ax
		inc	si

loc_128F8:				; CODE XREF: sub_128AF+28j
		cmp	si, [bp+arg_6]
		jle	short loc_128D9
		mov	ax, 1

loc_12900:				; CODE XREF: sub_128AF+1Cj
		pop	bp
		pop	di
		pop	si
		retf
sub_128AF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12904	proc far		; CODE XREF: sub_130FE+BFP
					; sub_130FE+151P

arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= word ptr  0Eh
arg_6		= word ptr  10h
arg_8		= word ptr  12h
arg_A		= word ptr  14h

		push	si
		push	di
		push	bp
		mov	bp, sp
		mov	di, [bp+arg_4]
		sub	di, [bp+arg_0]
		inc	di
		mov	si, [bp+arg_2]
		jmp	short loc_12934
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12915:				; CODE XREF: sub_12904+33j
		push	[bp+arg_0]
		push	si
		call	printChar1
		push	dx
		push	ax
		push	[bp+arg_A]
		push	[bp+arg_8]
		push	di
		call	sub_133CB
		mov	ax, di
		shl	ax, 1
		add	[bp+arg_8], ax
		inc	si

loc_12934:				; CODE XREF: sub_12904+Fj
		cmp	si, [bp+arg_6]
		jle	short loc_12915
		mov	ax, 1
		pop	bp
		pop	di
		pop	si
		retf
sub_12904	endp

seg028		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg029		segment	byte public 'CODE' use16
		assume cs:seg029
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12940	proc far		; CODE XREF: sub_1172B+36P
					; sub_1172B+67P ...

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	dx, [bp+arg_0]
		in	ax, dx
		pop	bp
		retf
sub_12940	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp

loc_1294C:
		mov	dx, [bp+6]

loc_1294F:
		in	al, dx

loc_12950:
		xor	ah, ah
		pop	bp
		retf
seg029		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg030		segment	byte public 'CODE' use16
		assume cs:seg030
		;org 4
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12954	proc far		; CODE XREF: sub_42F2+27P sub_43C4+29P ...

var_8		= word ptr -8
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	ss
		lea	ax, [bp+var_8]

loc_1295E:
		push	ax
		call	sub_13450
		pop	cx
		pop	cx
		push	ss
		lea	ax, [bp+var_8]
		push	ax
		push	[bp+arg_8]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_12986
		add	sp, 0Eh
		mov	sp, bp
		pop	bp
		retf
sub_12954	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12986	proc far		; CODE XREF: sub_12954+26P

var_E		= dword	ptr -0Eh
var_A		= word ptr -0Ah
var_8		= byte ptr -8
var_7		= word ptr -7
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  0Ah
arg_2		= dword	ptr  0Ch
arg_6		= dword	ptr  10h
arg_A		= dword	ptr  14h

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 0Eh
		push	ds
		lea	cx, [bp+var_A]
		mov	word ptr [bp+var_E], cx
		mov	word ptr [bp+var_E+2], ss
		mov	byte ptr [bp+var_A], 55h ; 'U'
		mov	byte ptr [bp+var_A+1], 0CDh ; 'Э'
		mov	ax, [bp+arg_0]
		mov	[bp+var_8], al
		mov	[bp+var_7], 0CB5Dh
		cmp	al, 25h	; '%'
		jb	short loc_129C4
		cmp	al, 26h	; '&'
		ja	short loc_129C4
		mov	byte ptr [bp+var_7], 36h ; '6'
		mov	[bp+var_7+1], 68Fh
		mov	[bp+var_4], cx
		mov	[bp+var_2], 0CB5Dh

loc_129C4:				; CODE XREF: sub_12986+27j
					; sub_12986+2Bj
		lds	si, [bp+arg_A]
		push	word ptr [si]
		push	word ptr [si+6]
		lds	si, [bp+arg_2]
		mov	ax, [si]
		mov	bx, [si+2]
		mov	cx, [si+4]
		mov	dx, [si+6]
		mov	di, [si+0Ah]
		mov	si, [si+8]
		pop	ds
		pop	es
		call	[bp+var_E]
		pushf
		pushf
		push	si
		push	ds
		push	es
		lds	si, [bp+arg_A]
		pop	word ptr [si]
		pop	word ptr [si+6]
		lds	si, [bp+arg_6]
		pop	word ptr [si+8]
		pop	word ptr [si+0Eh]
		pop	word ptr [si+0Ch]
		and	word ptr [si+0Ch], 1
		mov	[si+0Ah], di
		mov	[si+6],	dx
		mov	[si+4],	cx
		mov	[si+2],	bx
		mov	[si], ax
		pop	ds
		jz	short loc_12A1C
		push	ax
		push	ax
		call	sub_12AF3
		pop	ax

loc_12A1C:				; CODE XREF: sub_12986+8Cj
		mov	sp, bp

loc_12A1E:
		pop	bp

loc_12A1F:
		pop	di

loc_12A20:
		pop	si
		retf
sub_12986	endp

seg030		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg031		segment	byte public 'CODE' use16
		assume cs:seg031
		;org 2
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_2. PRESS KEYPAD "+" TO EXPAND]
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12A24	proc far		; CODE XREF: seg002:0219P

var_12		= dword	ptr -12h
var_E		= word ptr -0Eh
var_C		= byte ptr -0Ch
var_B		= byte ptr -0Bh
var_A		= byte ptr -0Ah
var_9		= byte ptr -9
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= byte ptr -4
var_3		= word ptr -3
arg_0		= word ptr  0Ah
arg_2		= dword	ptr  0Ch

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 12h
		push	bp
		push	ds

loc_12A2E:
		pushf
		lea	cx, [bp+var_E]
		mov	word ptr [bp+var_12], cx
		mov	word ptr [bp+var_12+2],	ss

loc_12A38:
		mov	[bp+var_E], 6E8Bh
		mov	[bp+var_C], 0E2h ; 'т'
		mov	[bp+var_B], 0CDh ; 'Э'
		mov	ax, [bp+arg_0]
		mov	[bp+var_A], al
		cmp	al, 25h	; '%'
		jb	short loc_12A6B
		cmp	al, 26h	; '&'
		ja	short loc_12A6B
		mov	[bp+var_9], 36h	; '6'
		mov	[bp+var_8], 68Fh
		mov	[bp+var_6], cx
		mov	[bp+var_4], 0CAh ; 'Ъ'
		mov	[bp+var_3], 2
		jmp	short loc_12A74
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 90h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12A6B:				; CODE XREF: sub_12A24+29j
					; sub_12A24+2Dj
		mov	[bp+var_9], 0CAh ; 'Ъ'
		mov	[bp+var_8], 2

loc_12A74:				; CODE XREF: sub_12A24+44j
		lds	di, [bp+arg_2]
		push	ds
		push	di
		mov	ax, [di]
		mov	bx, [di+2]
		mov	cx, [di+4]
		mov	dx, [di+6]
		push	word ptr [di+8]
		mov	si, [di+0Ah]
		mov	es, word ptr [di+10h]
		lds	di, [di+0Ch]
		call	[bp+var_12]
		push	ds
		push	di
		push	bp
		pushf
		mov	bp, sp
		lds	di, [bp+8]
		mov	[di], ax
		mov	[di+2],	bx
		mov	[di+4],	cx
		mov	[di+6],	dx
		mov	[di+0Ah], si
		mov	word ptr [di+10h], es
		pop	word ptr [di+12h]
		pop	word ptr [di+8]
		pop	word ptr [di+0Ch]
		pop	word ptr [di+0Eh]
		add	sp, 4
		push	cs

loc_12ABD:
		call	near ptr nullsub_2

loc_12AC0:
		pop	ds
		pop	bp
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_12A24	endp

seg031		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg032		segment	byte public 'CODE' use16
		assume cs:seg032
		;org 8
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12AC8	proc far		; CODE XREF: sub_12E18+DFP

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= dword	ptr  0Ah
arg_8		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	ds
		mov	ah, 44h	; 'D'

loc_12ACE:
		mov	al, byte ptr [bp+arg_2]
		mov	bx, [bp+arg_0]
		mov	cx, [bp+arg_8]
		lds	dx, [bp+arg_4]
		int	21h		; DOS -	2+ - IOCTL -
		pop	ds
		jb	short loc_12AEB
		cmp	[bp+arg_2], 0
		jnz	short loc_12AE9
		mov	ax, dx
		jmp	short loc_12AF1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12AE9:				; CODE XREF: sub_12AC8+1Bj
		jmp	short loc_12AF1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12AEB:				; CODE XREF: sub_12AC8+15j
		push	ax

loc_12AEC:
		call	sub_12AF3

loc_12AF1:				; CODE XREF: sub_12AC8+1Fj
					; sub_12AC8:loc_12AE9j
		pop	bp
		retf
sub_12AC8	endp

seg032		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg033		segment	byte public 'CODE' use16
		assume cs:seg033
		;org 3
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12AF3	proc far		; CODE XREF: sub_11DB7:loc_11DCFP
					; sub_11DD6+14P ...

arg_0		= word ptr  8

		push	si
		push	bp
		mov	bp, sp
		mov	si, [bp+arg_0]
		or	si, si
		jl	short loc_12B12

loc_12AFE:
		cmp	si, 58h	; 'X'
		jbe	short loc_12B06

loc_12B03:				; CODE XREF: sub_12AF3+24j
		mov	si, 57h	; 'W'

loc_12B06:				; CODE XREF: sub_12AF3+Ej
		mov	word_17D3E, si
		mov	al, [si+3B80h]
		cbw
		xchg	ax, si
		jmp	short loc_12B1F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12B12:				; CODE XREF: sub_12AF3+9j
		neg	si
		cmp	si, 22h	; '"'
		ja	short loc_12B03

loc_12B19:
		mov	word_17D3E, 0FFFFh

loc_12B1F:				; CODE XREF: sub_12AF3+1Dj
		mov	ax, si
		mov	word_14233, ax
		mov	ax, 0FFFFh
		pop	bp
		pop	si
		retf	2
sub_12AF3	endp

seg033		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg034		segment	byte public 'CODE' use16
		assume cs:seg034
		;org 0Ch
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_12B2C	proc far		; CODE XREF: sub_3634:loc_3AC3P
					; sub_3634:loc_3AFDP ...
		mov	ah, 0Bh

loc_12B2E:				; DOS -	CHECK STANDARD INPUT STATUS
		int	21h		; Return: AL = FFh if character	available
					; 00h if no character

loc_12B30:
		cbw
		retf
sub_12B2C	endp

seg034		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg035		segment	byte public 'CODE' use16
		assume cs:seg035
		;org 2
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12B32	proc far		; CODE XREF: sub_66A+59AP sub_70F7+4DP ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= byte ptr  0Ch

		push	bp
		mov	bp, sp
		mov	bx, [bp+arg_0]
		shl	bx, 1

loc_12B3A:
		and	word ptr [bx+3B44h], 0FDFFh
		mov	ah, 42h	; 'B'
		mov	al, [bp+arg_6]
		mov	bx, [bp+arg_0]
		mov	cx, [bp+arg_4]

loc_12B4B:
		mov	dx, [bp+arg_2]

loc_12B4E:				; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
		int	21h		; AL = method:
					; 0-from beginnig,1-from current,2-from	end

loc_12B50:
		jb	short loc_12B54
		jmp	short loc_12B5B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12B54:				; CODE XREF: sub_12B32:loc_12B50j
		push	ax
		call	sub_12AF3
		cwd

loc_12B5B:				; CODE XREF: sub_12B32+20j
		pop	bp
		retf
sub_12B32	endp

seg035		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg036		segment	byte public 'CODE' use16
		assume cs:seg036
		;org 0Dh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12B5D	proc far		; CODE XREF: sub_12BDF+26p
					; seg036:00D3p	...

var_22		= word ptr -22h
arg_0		= byte ptr  0Ah
arg_2		= byte ptr  0Ch
arg_4		= word ptr  0Eh
arg_6		= dword	ptr  10h
arg_A		= word ptr  14h
arg_C		= word ptr  16h

		push	si

loc_12B5E:
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 22h
		push	es
		les	di, [bp+arg_6]
		mov	bx, [bp+arg_4]
		cmp	bx, 24h	; '$'
		ja	short loc_12BCD
		cmp	bl, 2
		jb	short loc_12BCD
		mov	ax, [bp+arg_A]
		mov	cx, [bp+arg_C]
		or	cx, cx
		jge	short loc_12B92
		cmp	[bp+arg_2], 0
		jz	short loc_12B92
		mov	byte ptr es:[di], 2Dh ;	'-'
		inc	di
		neg	cx
		neg	ax
		sbb	cx, 0

loc_12B92:				; CODE XREF: sub_12B5D+21j
					; sub_12B5D+27j
		lea	si, [bp+var_22]
		jcxz	short loc_12BA7

loc_12B97:				; CODE XREF: sub_12B5D+48j
		xchg	ax, cx
		sub	dx, dx
		div	bx
		xchg	ax, cx
		div	bx
		mov	ss:[si], dl
		inc	si
		jcxz	short loc_12BAF
		jmp	short loc_12B97
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12BA7:				; CODE XREF: sub_12B5D+38j
					; sub_12B5D+54j
		sub	dx, dx
		div	bx

loc_12BAB:
		mov	ss:[si], dl
		inc	si

loc_12BAF:				; CODE XREF: sub_12B5D+46j
		or	ax, ax
		jnz	short loc_12BA7
		lea	cx, [bp+var_22]
		neg	cx
		add	cx, si
		cld

loc_12BBB:				; CODE XREF: sub_12B5D+6Ej
		dec	si
		mov	al, ss:[si]
		sub	al, 0Ah
		jnb	short loc_12BC7
		add	al, 3Ah	; ':'
		jmp	short loc_12BCA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12BC7:				; CODE XREF: sub_12B5D+64j
		add	al, [bp+arg_0]

loc_12BCA:				; CODE XREF: sub_12B5D+68j
		stosb
		loop	loc_12BBB

loc_12BCD:				; CODE XREF: sub_12B5D+12j
					; sub_12B5D+17j
		mov	al, 0
		stosb
		pop	es
		mov	dx, word ptr [bp+arg_6+2]
		mov	ax, word ptr [bp+arg_6]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf	0Eh
sub_12B5D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12BDF	proc far		; CODE XREF: sub_3634+14CP
					; sub_3634+18BP ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		cmp	[bp+arg_6], 0Ah
		jnz	short loc_12BEE
		mov	ax, [bp+arg_0]

loc_12BEB:
		cwd
		jmp	short loc_12BF3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12BEE:				; CODE XREF: sub_12BDF+7j
		mov	ax, [bp+arg_0]
		xor	dx, dx

loc_12BF3:				; CODE XREF: sub_12BDF+Dj
		push	dx
		push	ax
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	[bp+arg_6]
		mov	al, 1
		push	ax
		mov	al, 61h	; 'a'
		push	ax
		push	cs
		call	near ptr sub_12B5D
		pop	bp
		retf
sub_12BDF	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp

loc_12C0B:
		mov	bp, sp
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		push	word ptr [bp+0Ch]
		push	word ptr [bp+0Ah]
		push	word ptr [bp+0Eh]
		mov	al, 0
		push	ax
		mov	al, 61h	; 'a'
		push	ax
		push	cs
		call	near ptr sub_12B5D
		pop	bp
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12C28	proc far		; CODE XREF: sub_3634+1DEP
					; sub_3634+285P ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

		push	bp
		mov	bp, sp

loc_12C2B:
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	[bp+arg_8]
		cmp	[bp+arg_8], 0Ah
		jnz	short loc_12C45
		mov	ax, 1
		jmp	short loc_12C47
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12C45:				; CODE XREF: sub_12C28+16j
		xor	ax, ax

loc_12C47:				; CODE XREF: sub_12C28+1Bj
		push	ax
		mov	al, 61h	; 'a'
		push	ax
		push	cs

loc_12C4C:
		call	near ptr sub_12B5D

loc_12C4F:
		pop	bp

locret_12C50:
		retf
sub_12C28	endp

seg036		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg037		segment	byte public 'CODE' use16
		assume cs:seg037
		;org 1
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12C51	proc far		; CODE XREF: sub_559+BP

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	ax, [bp+arg_0]
		xor	dx, dx
		push	dx
		push	ax

loc_12C5B:
		call	sub_126BA

loc_12C60:
		mov	sp, bp
		pop	bp
		retf
sub_12C51	endp

seg037		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg038		segment	byte public 'CODE' use16
		assume cs:seg038
		;org 4
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

copyCastleStuff	proc far		; CODE XREF: sub_66A+64BP sub_4540+61P ...

arg_0		= dword	ptr  0Ah
arg_4		= dword	ptr  0Eh
arg_8		= word ptr  12h

		push	si
		push	di
		push	bp
		mov	bp, sp
		mov	dx, ds
		les	di, [bp+arg_0]

loc_12C6E:
		lds	si, [bp+arg_4]
		mov	cx, [bp+arg_8]
		shr	cx, 1
		cld
		rep movsw
		jnb	short loc_12C7C
		movsb

loc_12C7C:				; CODE XREF: copyCastleStuff+15j
		mov	ds, dx

loc_12C7E:
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		pop	bp
		pop	di
		pop	si
		retf
copyCastleStuff	endp

seg038		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg039		segment	byte public 'CODE' use16
		assume cs:seg039
		;org 8
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12C88	proc far		; CODE XREF: sub_462B+23P sub_462B+42P ...

arg_0		= dword	ptr  0Ah
arg_4		= word ptr  0Eh
arg_6		= byte ptr  10h

		push	si
		push	di
		push	bp
		mov	bp, sp

loc_12C8D:
		les	di, [bp+arg_0]
		mov	cx, [bp+arg_4]
		mov	al, [bp+arg_6]
		mov	ah, al
		cld
		test	di, 1
		jz	short loc_12CA3
		jcxz	short loc_12CAA
		stosb
		dec	cx

loc_12CA3:				; CODE XREF: sub_12C88+15j
		shr	cx, 1
		rep stosw
		jnb	short loc_12CAA
		stosb

loc_12CAA:				; CODE XREF: sub_12C88+17j
					; sub_12C88+1Fj
		pop	bp
		pop	di
		pop	si
		retf
sub_12C88	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		push	word ptr [bp+0Ah]
		push	word ptr [bp+0Ch]
		push	word ptr [bp+8]
		push	word ptr [bp+6]

loc_12CBD:
		push	cs

loc_12CBE:
		call	near ptr sub_12C88
		mov	sp, bp
		mov	dx, [bp+8]
		mov	ax, [bp+6]
		pop	bp
		retf
seg039		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg040		segment	byte public 'CODE' use16
		assume cs:seg040
		;org 0Bh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12CCB	proc far		; CODE XREF: sub_130FE+5EP
					; sub_130FE+F0P

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= word ptr  0Eh
arg_6		= word ptr  10h
arg_8		= word ptr  12h
arg_A		= word ptr  14h

		push	si
		push	di
		push	bp

loc_12CCE:
		mov	bp, sp
		sub	sp, 6
		mov	si, [bp+arg_2]
		push	[bp+arg_0]
		push	si

loc_12CDA:
		push	[bp+arg_4]
		push	[bp+arg_6]
		call	sub_13408
		or	ax, ax
		jz	short loc_12D0B
		push	[bp+arg_8]
		push	[bp+arg_A]
		mov	ax, [bp+arg_4]
		sub	ax, [bp+arg_0]
		add	ax, [bp+arg_8]
		push	ax
		mov	ax, [bp+arg_6]
		sub	ax, si
		add	ax, [bp+arg_A]
		push	ax
		call	sub_13408
		or	ax, ax
		jnz	short loc_12D0F

loc_12D0B:				; CODE XREF: sub_12CCB+1Cj
		xor	ax, ax
		jmp	short loc_12D6F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12D0F:				; CODE XREF: sub_12CCB+3Ej
		mov	[bp+var_6], si
		mov	ax, [bp+arg_6]
		mov	[bp+var_4], ax
		mov	[bp+var_2], 1
		cmp	si, [bp+arg_A]
		jge	short loc_12D30
		mov	ax, [bp+arg_6]
		mov	[bp+var_6], ax
		mov	[bp+var_4], si
		mov	[bp+var_2], 0FFFFh

loc_12D30:				; CODE XREF: sub_12CCB+55j
		mov	di, [bp+var_6]
		jmp	short loc_12D62
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12D35:				; CODE XREF: sub_12CCB+9Fj
		push	[bp+arg_8]
		mov	ax, di
		sub	ax, si
		add	ax, [bp+arg_A]
		push	ax
		call	printChar1
		push	dx
		push	ax
		push	[bp+arg_0]
		push	di
		call	printChar1
		push	dx
		push	ax
		mov	ax, [bp+arg_4]
		sub	ax, [bp+arg_0]
		inc	ax
		push	ax
		call	sub_133CB
		add	di, [bp+var_2]

loc_12D62:				; CODE XREF: sub_12CCB+68j
		mov	ax, [bp+var_4]
		add	ax, [bp+var_2]
		cmp	ax, di
		jnz	short loc_12D35

loc_12D6C:
		mov	ax, 1

loc_12D6F:				; CODE XREF: sub_12CCB+42j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_12CCB	endp

seg040		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg041		segment	byte public 'CODE' use16
		assume cs:seg041
		;org 5
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12D75	proc far		; CODE XREF: seg041:loc_12DDCp
					; sub_13602+2FP

arg_0		= dword	ptr  0Ah
arg_4		= dword	ptr  0Eh
arg_8		= word ptr  12h

		push	si
		push	di
		push	bp
		mov	bp, sp
		push	ds
		mov	dx, word ptr [bp+arg_0+2]

loc_12D7E:
		mov	ax, word ptr [bp+arg_0]
		mov	cx, word ptr [bp+arg_4+2]
		mov	bx, word ptr [bp+arg_4]
		call	sub_408
		jnb	short loc_12D94
		std
		mov	ax, 1
		jmp	short loc_12D97
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12D94:				; CODE XREF: sub_12D75+17j
		cld
		xor	ax, ax

loc_12D97:				; CODE XREF: sub_12D75+1Dj
		lds	si, [bp+arg_0]
		les	di, [bp+arg_4]
		mov	cx, [bp+arg_8]
		or	ax, ax
		jz	short loc_12DAA
		add	si, cx
		dec	si
		add	di, cx
		dec	di

loc_12DAA:				; CODE XREF: sub_12D75+2Dj
		test	di, 1
		jz	short loc_12DB4
		jcxz	short loc_12DC3
		movsb
		dec	cx

loc_12DB4:				; CODE XREF: sub_12D75+39j
		sub	si, ax
		sub	di, ax
		shr	cx, 1
		rep movsw
		jnb	short loc_12DC3
		add	si, ax
		add	di, ax
		movsb

loc_12DC3:				; CODE XREF: sub_12D75+3Bj
					; sub_12D75+47j
		cld
		pop	ds
		pop	bp
		pop	di
		pop	si
		retf
sub_12D75	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		push	word ptr [bp+0Eh]
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		push	word ptr [bp+0Ch]
		push	word ptr [bp+0Ah]
		push	cs

loc_12DDC:
		call	near ptr sub_12D75

loc_12DDF:
		mov	sp, bp
		mov	dx, [bp+8]
		mov	ax, [bp+6]
		pop	bp
		retf
seg041		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg042		segment	byte public 'CODE' use16
		assume cs:seg042
		;org 9
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12DE9	proc near		; CODE XREF: sub_12E18+89p
					; sub_12E18+ADp

arg_0		= word ptr  4
arg_2		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	ds

loc_12DED:
		mov	cx, [bp+arg_0]
		mov	ah, 3Ch	; '<'
		lds	dx, [bp+arg_2]
		int	21h		; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
					; CX = attributes for file
					; DS:DX	-> ASCIZ filename (may include drive and path)
		pop	ds
		jb	short loc_12DFC
		jmp	short loc_12E02
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12DFC:				; CODE XREF: sub_12DE9+Fj
		push	ax
		call	sub_12AF3

loc_12E02:				; CODE XREF: sub_12DE9+11j
		pop	bp
		retn	6
sub_12DE9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12E06	proc near		; CODE XREF: sub_12E18+F8p

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		mov	bx, [bp+arg_0]
		sub	cx, cx
		sub	dx, dx
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		pop	bp
		retn	2
sub_12E06	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12E18	proc far		; CODE XREF: sub_66A+1CP sub_66A+56DP	...

var_2		= word ptr -2
arg_0		= word ptr  0Ah
arg_2		= word ptr  0Ch
arg_4		= word ptr  0Eh
arg_6		= word ptr  10h

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		mov	di, [bp+arg_4]
		test	di, 0C000h
		jnz	short loc_12E30
		mov	ax, word_17D38
		and	ax, 0C000h
		or	di, ax

loc_12E30:				; CODE XREF: sub_12E18+Ej
		test	di, 100h
		jnz	short loc_12E39
		jmp	loc_12ED7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12E39:				; CODE XREF: sub_12E18+1Cj
		mov	ax, word_17D3A
		and	[bp+arg_6], ax
		mov	ax, [bp+arg_6]
		test	ax, 180h
		jnz	short loc_12E50
		mov	ax, 1
		push	ax

loc_12E4B:
		call	sub_12AF3

loc_12E50:				; CODE XREF: sub_12E18+2Dj
		xor	ax, ax
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_11DB7
		add	sp, 6
		mov	[bp+var_2], ax
		cmp	ax, 0FFFFh
		jnz	short loc_12E7C
		test	[bp+arg_6], 80h
		jz	short loc_12E74
		xor	ax, ax
		jmp	short loc_12E77
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12E74:				; CODE XREF: sub_12E18+56j
		mov	ax, 1

loc_12E77:				; CODE XREF: sub_12E18+5Aj
		mov	[bp+var_2], ax

loc_12E7A:
		jmp	short loc_12E92
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12E7C:				; CODE XREF: sub_12E18+4Fj
		test	di, 400h
		jz	short loc_12E90
		mov	ax, 50h	; 'P'
		push	ax
		call	sub_12AF3
		jmp	loc_12F58
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_12E92
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12E90:				; CODE XREF: sub_12E18+68j
		jmp	short loc_12ED7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12E92:				; CODE XREF: sub_12E18:loc_12E7Aj
					; sub_12E18+76j
		test	di, 0F0h
		jz	short loc_12EBC
		push	[bp+arg_2]
		push	[bp+arg_0]
		xor	ax, ax
		push	ax
		call	sub_12DE9
		mov	si, ax
		mov	ax, si
		or	ax, ax

loc_12EAA:
		jge	short loc_12EB1
		mov	ax, si
		jmp	loc_12F58
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12EB1:				; CODE XREF: sub_12E18:loc_12EAAj
		push	si
		call	sub_11E05
		pop	cx
		jmp	short loc_12EDC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12EBA:
		jmp	short loc_12ED5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12EBC:				; CODE XREF: sub_12E18+7Ej
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	[bp+var_2]
		call	sub_12DE9
		mov	si, ax
		mov	ax, si
		or	ax, ax
		jge	short loc_12ED5
		mov	ax, si
		jmp	loc_12F58
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12ED5:				; CODE XREF: sub_12E18:loc_12EBAj
					; sub_12E18+B6j
		jmp	short loc_12F35
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12ED7:				; CODE XREF: sub_12E18+1Ej
					; sub_12E18:loc_12E90j
		mov	[bp+var_2], 0

loc_12EDC:				; CODE XREF: sub_12E18+A0j
		push	di
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_12F5E
		add	sp, 6
		mov	si, ax
		mov	ax, si
		or	ax, ax
		jl	short loc_12F35
		xor	ax, ax
		push	ax
		push	si
		call	sub_12AC8
		pop	cx
		pop	cx
		test	ax, 80h
		jz	short loc_12F09
		or	di, 2000h
		jmp	short loc_12F13
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12F09:				; CODE XREF: sub_12E18+E9j
		test	di, 200h
		jz	short loc_12F13
		push	si
		call	sub_12E06

loc_12F13:				; CODE XREF: sub_12E18+EFj
					; sub_12E18+F5j
		cmp	[bp+var_2], 0
		jz	short loc_12F35
		test	di, 0F0h
		jz	short loc_12F35
		mov	ax, 1
		push	ax
		mov	ax, 1
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_11DB7
		add	sp, 8

loc_12F35:				; CODE XREF: sub_12E18:loc_12ED5j
					; sub_12E18+D9j ...
		or	si, si
		jl	short loc_12F56
		test	di, 300h
		jz	short loc_12F44
		mov	ax, 1000h
		jmp	short loc_12F46
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12F44:				; CODE XREF: sub_12E18+125j
		xor	ax, ax

loc_12F46:				; CODE XREF: sub_12E18+12Aj
		mov	dx, di
		and	dx, 0F8FFh

loc_12F4C:
		or	ax, dx

loc_12F4E:
		mov	bx, si

loc_12F50:
		shl	bx, 1
		mov	[bx+3B44h], ax

loc_12F56:				; CODE XREF: sub_12E18+11Fj
		mov	ax, si

loc_12F58:				; CODE XREF: sub_12E18+73j
					; sub_12E18+96j ...
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_12E18	endp

seg042		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg043		segment	byte public 'CODE' use16
		assume cs:seg043
		;org 0Eh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12F5E	proc far		; CODE XREF: sub_12E18+CBP

arg_0		= dword	ptr  8
arg_4		= word ptr  0Ch

		push	si
		push	bp
		mov	bp, sp
		mov	al, 1
		mov	cx, [bp+arg_4]
		test	cx, 2
		jnz	short loc_12F77
		mov	al, 2
		test	cx, 4
		jnz	short loc_12F77
		mov	al, 0

loc_12F77:				; CODE XREF: sub_12F5E+Dj
					; sub_12F5E+15j
		push	ds
		lds	dx, [bp+arg_0]
		mov	cl, 0F0h ; '№'
		and	cl, byte ptr [bp+arg_4]
		or	al, cl
		mov	ah, 3Dh
		int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
					; DS:DX	-> ASCIZ filename
					; AL = access mode
					; 0 - read, 1 -	write, 2 - read	& write
		pop	ds
		jb	short loc_12FA0
		mov	si, ax
		mov	ax, [bp+arg_4]
		and	ax, 0F8FFh
		or	ax, 8000h
		mov	bx, si
		shl	bx, 1
		mov	[bx+3B44h], ax

loc_12F9C:
		mov	ax, si

loc_12F9E:
		jmp	short loc_12FA6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_12FA0:				; CODE XREF: sub_12F5E+29j
		push	ax
		call	sub_12AF3

loc_12FA6:				; CODE XREF: sub_12F5E:loc_12F9Ej
		pop	bp
		pop	si
		retf
sub_12F5E	endp

seg043		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg044		segment	byte public 'CODE' use16
		assume cs:seg044
		;org 9
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12FA9	proc far		; CODE XREF: seg025:001FP

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	ss

loc_12FAD:
		lea	ax, [bp+arg_0]
		push	ax
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		call	maybePrintString
		pop	bp
		retf
sub_12FA9	endp

seg044		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg045		segment	byte public 'CODE' use16
		assume cs:seg045
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12FC0	proc far		; CODE XREF: sub_3DEF+38P

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	ax, [bp+arg_0]
		xor	dx, dx
		mov	word_17D9C, dx

loc_12FCC:
		mov	word_17D9A, ax
		pop	bp
		retf
sub_12FC0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_12FD1	proc far		; CODE XREF: sub_DE8+21EP sub_DE8+F77P ...
		mov	dx, word_17D9C
		mov	ax, word_17D9A
		mov	cx, 15Ah

loc_12FDB:
		mov	bx, 4E35h
		call	sub_372
		add	ax, 1
		adc	dx, 0

loc_12FE9:
		mov	word_17D9C, dx

loc_12FED:
		mov	word_17D9A, ax

loc_12FF0:
		mov	ax, word_17D9C
		and	ax, 7FFFh
		retf
sub_12FD1	endp

seg045		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg046		segment	byte public 'CODE' use16
		assume cs:seg046
		;org 7
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_12FF7	proc far		; CODE XREF: sub_66A+7FP sub_66A+D4P ...

var_4		= word ptr -4
var_1		= byte ptr -1
arg_0		= word ptr  0Ah
arg_2		= dword	ptr  0Ch
arg_6		= word ptr  10h

		push	si
		push	di
		push	bp
		mov	bp, sp

loc_12FFC:
		sub	sp, 4
		mov	ax, [bp+arg_6]
		inc	ax
		cmp	ax, 2
		jb	short loc_13015
		mov	bx, [bp+arg_0]

loc_1300B:
		shl	bx, 1
		test	word ptr [bx+3B44h], 200h
		jz	short loc_1301A

loc_13015:				; CODE XREF: sub_12FF7+Fj
		xor	ax, ax
		jmp	loc_130B4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1301A:				; CODE XREF: sub_12FF7+1Cj
					; sub_12FF7+93j
		push	[bp+arg_6]
		push	word ptr [bp+arg_2+2]
		push	word ptr [bp+arg_2]
		push	[bp+arg_0]
		call	sub_130BA
		add	sp, 8
		mov	[bp+var_4], ax
		mov	ax, [bp+var_4]
		inc	ax
		cmp	ax, 2
		jb	short loc_13047
		mov	bx, [bp+arg_0]
		shl	bx, 1
		test	word ptr [bx+3B44h], 8000h
		jz	short loc_1304D

loc_13047:				; CODE XREF: sub_12FF7+41j
		mov	ax, [bp+var_4]

loc_1304A:
		jmp	short loc_130B4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 90h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1304D:				; CODE XREF: sub_12FF7+4Ej
		mov	cx, [bp+var_4]
		les	si, [bp+arg_2]
		mov	di, si
		mov	bx, si
		cld

loc_13058:				; CODE XREF: sub_12FF7+6Cj
					; sub_12FF7:loc_13067j
		lods	byte ptr es:[si]
		cmp	al, 1Ah
		jz	short loc_1308E
		cmp	al, 0Dh
		jz	short loc_13067
		stosb
		loop	loc_13058
		jmp	short loc_13086
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13067:				; CODE XREF: sub_12FF7+69j
		loop	loc_13058
		push	es
		push	bx
		mov	ax, 1
		push	ax
		lea	ax, [bp-1]
		push	ss
		push	ax
		push	[bp+arg_0]
		call	sub_130BA
		add	sp, 8
		pop	bx
		pop	es
		cld
		mov	al, [bp+var_1]
		stosb

loc_13086:				; CODE XREF: sub_12FF7+6Ej
		cmp	di, bx
		jnz	short loc_1308C
		jmp	short loc_1301A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1308C:				; CODE XREF: sub_12FF7+91j
		jmp	short loc_130B0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1308E:				; CODE XREF: sub_12FF7+65j
		push	bx
		mov	ax, 2
		push	ax
		neg	cx
		sbb	ax, ax
		push	ax
		push	cx
		push	[bp+arg_0]
		call	sub_12B32
		add	sp, 8
		mov	bx, [bp+arg_0]
		shl	bx, 1

loc_130A9:
		or	word ptr [bx+3B44h], 200h

loc_130AF:
		pop	bx

loc_130B0:				; CODE XREF: sub_12FF7:loc_1308Cj
		mov	ax, di
		sub	ax, bx

loc_130B4:				; CODE XREF: sub_12FF7+20j
					; sub_12FF7:loc_1304Aj
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_12FF7	endp

seg046		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg047		segment	byte public 'CODE' use16
		assume cs:seg047
		;org 0Ah
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_130BA	proc far		; CODE XREF: sub_12FF7+2FP
					; sub_12FF7+80P

arg_0		= word ptr  6
arg_2		= dword	ptr  8
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	ds

loc_130BE:
		mov	ah, 3Fh	; '?'
		mov	bx, [bp+arg_0]
		mov	cx, [bp+arg_6]
		lds	dx, [bp+arg_2]
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		pop	ds

loc_130CC:
		jb	short loc_130D0

loc_130CE:
		jmp	short loc_130D6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_130D0:				; CODE XREF: sub_130BA:loc_130CCj
		push	ax
		call	sub_12AF3

loc_130D6:				; CODE XREF: sub_130BA:loc_130CEj
		pop	bp
		retf
sub_130BA	endp

seg047		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg048		segment	byte public 'CODE' use16
		assume cs:seg048
		;org 8
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_130D8	proc near		; CODE XREF: sub_130FE+9Ep
					; sub_130FE+130p

arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= dword	ptr  8

		push	bp
		mov	bp, sp
		les	bx, [bp+arg_4]

loc_130DE:
		mov	cx, es:[bx]
		mov	cl, 20h	; ' '
		jmp	short loc_130F2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_130E5:				; CODE XREF: sub_130D8+20j
		les	bx, [bp+arg_4]
		mov	es:[bx], cx
		add	word ptr [bp+arg_4], 2
		inc	[bp+arg_2]

loc_130F2:				; CODE XREF: sub_130D8+Bj
		mov	ax, [bp+arg_2]
		cmp	ax, [bp+arg_0]
		jle	short loc_130E5
		pop	bp

locret_130FB:
		retn	8
sub_130D8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_130FE	proc far		; CODE XREF: maybePrintString+12DP

var_A0		= word ptr -0A0h
arg_0		= byte ptr  6
arg_2		= byte ptr  8
arg_4		= byte ptr  0Ah
arg_6		= byte ptr  0Ch
arg_8		= byte ptr  0Eh
arg_A		= byte ptr  10h

		push	bp
		mov	bp, sp
		sub	sp, 0A0h
		cmp	byte_17AC3, 0
		jz	short loc_1310F
		jmp	loc_13259
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1310F:				; CODE XREF: sub_130FE+Cj
		cmp	word_17AC9, 0
		jnz	short loc_13119
		jmp	loc_13259
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13119:				; CODE XREF: sub_130FE+16j
		cmp	[bp+arg_0], 1
		jz	short loc_13122
		jmp	loc_13259
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13122:				; CODE XREF: sub_130FE+1Fj
		inc	[bp+arg_8]
		inc	[bp+arg_6]
		inc	[bp+arg_4]
		inc	[bp+arg_2]
		cmp	[bp+arg_A], 6
		jz	short loc_13137
		jmp	loc_131C8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13137:				; CODE XREF: sub_130FE+34j
		mov	al, [bp+arg_6]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_8]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_2]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_4]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_6]
		mov	ah, 0
		inc	ax
		push	ax
		mov	al, [bp+arg_8]
		mov	ah, 0
		push	ax
		call	sub_12CCB
		add	sp, 0Ch
		push	ss
		lea	ax, [bp+var_A0]
		push	ax

loc_1316A:
		mov	al, [bp+arg_2]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_8]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_2]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_8]
		mov	ah, 0
		push	ax
		call	sub_128AF
		add	sp, 0Ch
		push	ss
		lea	ax, [bp+var_A0]
		push	ax
		mov	al, [bp+arg_8]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_4]
		mov	ah, 0
		push	ax
		call	sub_130D8
		push	ss
		lea	ax, [bp+var_A0]
		push	ax
		mov	al, [bp+arg_2]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_4]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_2]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_8]
		mov	ah, 0
		push	ax
		call	sub_12904
		add	sp, 0Ch
		jmp	loc_13257
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_131C8:				; CODE XREF: sub_130FE+36j
		mov	al, [bp+arg_6]
		mov	ah, 0
		inc	ax
		push	ax
		mov	al, [bp+arg_8]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_2]
		mov	ah, 0
		dec	ax
		push	ax
		mov	al, [bp+arg_4]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_6]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_8]
		mov	ah, 0
		push	ax
		call	sub_12CCB
		add	sp, 0Ch
		push	ss
		lea	ax, [bp+var_A0]
		push	ax
		mov	al, [bp+arg_6]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_8]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_6]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_8]
		mov	ah, 0
		push	ax
		call	sub_128AF
		add	sp, 0Ch
		push	ss
		lea	ax, [bp+var_A0]
		push	ax
		mov	al, [bp+arg_8]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_4]
		mov	ah, 0
		push	ax
		call	sub_130D8
		push	ss
		lea	ax, [bp+var_A0]
		push	ax
		mov	al, [bp+arg_6]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_4]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_6]
		mov	ah, 0
		push	ax
		mov	al, [bp+arg_8]
		mov	ah, 0
		push	ax
		call	sub_12904
		add	sp, 0Ch

loc_13257:				; CODE XREF: sub_130FE+C7j
		jmp	short loc_13274
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13259:				; CODE XREF: sub_130FE+Ej
					; sub_130FE+18j ...
		mov	bh, byte_17ABE
		mov	ah, [bp+arg_A]
		mov	al, [bp+arg_0]
		mov	ch, [bp+arg_6]
		mov	cl, [bp+arg_8]
		mov	dh, [bp+arg_2]

loc_1326C:
		mov	dl, [bp+arg_4]

loc_1326F:
		call	sub_1AF

loc_13274:				; CODE XREF: sub_130FE:loc_13257j
		mov	sp, bp
		pop	bp
		retf	0Ch
sub_130FE	endp

seg048		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg049		segment	byte public 'CODE' use16
		assume cs:seg049
		;org 0Ah
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_1327A	proc near		; CODE XREF: sub_132F9:loc_1332Ap
					; sub_132F9+54p

var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= word ptr  6

		push	si
		push	bp
		mov	bp, sp

loc_1327E:
		dec	sp
		dec	sp
		mov	si, [bp+arg_0]
		shr	si, 1
		mov	ax, si
		mov	dl, byte_17AC2
		mov	dh, 0
		mov	bx, dx
		xor	dx, dx
		div	bx
		mov	[bp+var_2], al
		mov	ax, si
		mov	dl, [bp+var_2]
		mov	dh, 0
		push	ax
		mov	ax, dx
		mov	dl, byte_17AC2
		mov	dh, 0
		mul	dx
		pop	dx
		sub	dl, al
		mov	[bp+var_1], dl
		mov	ah, [bp+var_2]
		mov	al, [bp+var_1]
		mov	sp, bp
		pop	bp
		pop	si
		retn	4
sub_1327A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_132BB	proc near		; CODE XREF: sub_132F9+74p
					; sub_132F9+9Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	bp
		mov	bp, sp
		les	bx, [bp+arg_4]
		mov	ax, es:[bx]
		les	bx, [bp+arg_0]
		cmp	ax, es:[bx]
		jz	short loc_132DB
		les	bx, [bp+arg_4]
		mov	dx, es:[bx]
		mov	bh, 0
		mov	ah, 2
		call	sub_1AF

loc_132DB:				; CODE XREF: sub_132BB+Fj
		les	bx, [bp+arg_0]
		mov	es:[bx], dx
		inc	dl
		mov	al, dl
		cmp	al, byte_17AC2
		jb	short loc_132EF
		inc	dh
		mov	dl, 0

loc_132EF:				; CODE XREF: sub_132BB+2Ej
		les	bx, [bp+arg_4]
		mov	es:[bx], dx
		pop	bp
		retn	8
sub_132BB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_132F9	proc near		; CODE XREF: sub_133CB+36p

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  8
arg_2		= dword	ptr  0Ah
arg_6		= dword	ptr  0Eh

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		call	sub_13FEF
		mov	di, ax
		mov	ax, di
		mov	[bp+var_6], ax
		mov	ax, word ptr [bp+arg_6+2]
		cmp	ax, word_17AC7
		jnz	short loc_1331B
		mov	ax, 1
		jmp	short loc_1331D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1331B:				; CODE XREF: sub_132F9+1Bj
		xor	ax, ax

loc_1331D:				; CODE XREF: sub_132F9+20j
		mov	[bp+var_4], ax
		or	ax, ax
		jz	short loc_13330
		push	word ptr [bp+arg_6+2]
		push	word ptr [bp+arg_6]

loc_1332A:
		call	sub_1327A
		mov	[bp+var_A], ax

loc_13330:				; CODE XREF: sub_132F9+29j
		mov	ax, word ptr [bp+arg_2+2]
		cmp	ax, word_17AC7
		jnz	short loc_1333E
		mov	ax, 1
		jmp	short loc_13340
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1333E:				; CODE XREF: sub_132F9+3Ej
		xor	ax, ax

loc_13340:				; CODE XREF: sub_132F9+43j
		mov	[bp+var_2], ax
		or	ax, ax
		jz	short loc_13353
		push	word ptr [bp+arg_2+2]

loc_1334A:
		push	word ptr [bp+arg_2]
		call	sub_1327A
		mov	[bp+var_8], ax

loc_13353:				; CODE XREF: sub_132F9+4Cj
					; sub_132F9:loc_133B6j
		mov	ax, [bp+arg_0]
		dec	[bp+arg_0]
		or	ax, ax
		jz	short loc_133B8
		cmp	[bp+var_2], 0
		jz	short loc_1337D
		push	ss
		lea	ax, [bp+var_8]
		push	ax
		push	ss
		lea	ax, [bp+var_6]
		push	ax
		call	sub_132BB
		mov	bh, 0
		mov	ah, 8
		call	sub_1AF
		mov	si, ax

loc_1337B:
		jmp	short loc_13387
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1337D:				; CODE XREF: sub_132F9+68j
		les	bx, [bp+arg_2]
		mov	si, es:[bx]
		add	word ptr [bp+arg_2], 2

loc_13387:				; CODE XREF: sub_132F9:loc_1337Bj
		cmp	[bp+var_4], 0
		jz	short loc_133AC
		push	ss
		lea	ax, [bp+var_A]
		push	ax
		push	ss
		lea	ax, [bp+var_6]
		push	ax
		call	sub_132BB
		mov	ax, si
		mov	bl, ah
		mov	cx, 1
		mov	bh, 0
		mov	ah, 9
		call	sub_1AF
		jmp	short loc_133B6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_133AC:				; CODE XREF: sub_132F9+92j
		les	bx, [bp+arg_6]
		mov	es:[bx], si
		add	word ptr [bp+arg_6], 2

loc_133B6:				; CODE XREF: sub_132F9+B1j
		jmp	short loc_13353
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_133B8:				; CODE XREF: sub_132F9+62j
		mov	dx, di
		mov	bh, 0
		mov	ah, 2
		call	sub_1AF
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retn	0Ah
sub_132F9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_133CB	proc far		; CODE XREF: sub_128AF+3CP
					; sub_12904+23P ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

		push	bp
		mov	bp, sp
		cmp	byte_17AC3, 0
		jnz	short loc_133F2
		cmp	word_17AC9, 0
		jz	short loc_133F2
		push	[bp+arg_8]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	printChar2
		jmp	short loc_13404
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_133F2:				; CODE XREF: sub_133CB+8j sub_133CB+Fj
		push	[bp+arg_8]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_132F9

loc_13404:				; CODE XREF: sub_133CB+25j
		pop	bp
		retf	0Ah
sub_133CB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_13408	proc far		; CODE XREF: sub_128AF+11P
					; sub_12CCB+15P ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		mov	al, byte_17AC2
		mov	ah, 0
		mov	cx, ax
		mov	al, byte_17AC1
		mov	ah, 0
		mov	dx, ax
		mov	ax, [bp+arg_6]
		cmp	ax, cx
		ja	short loc_1344A
		mov	ax, [bp+arg_2]
		cmp	ax, cx
		ja	short loc_1344A
		mov	ax, [bp+arg_6]
		cmp	ax, [bp+arg_2]
		jg	short loc_1344A
		mov	ax, [bp+arg_4]
		cmp	ax, dx
		ja	short loc_1344A
		mov	ax, [bp+arg_0]
		cmp	ax, dx

loc_1343B:
		ja	short loc_1344A
		mov	ax, [bp+arg_4]
		cmp	ax, [bp+arg_0]
		jg	short loc_1344A
		mov	ax, 1
		jmp	short loc_1344C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1344A:				; CODE XREF: sub_13408+16j
					; sub_13408+1Dj ...
		xor	ax, ax

loc_1344C:				; CODE XREF: sub_13408+40j
		pop	bp
		retf	8
sub_13408	endp

seg049		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg050		segment	byte public 'CODE' use16
		assume cs:seg050
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_13450	proc far		; CODE XREF: sub_12954+BP

arg_0		= dword	ptr  8

		push	si
		push	bp
		mov	bp, sp
		mov	ax, es
		les	si, [bp+arg_0]

loc_13459:
		mov	es:[si], ax

loc_1345C:
		mov	word ptr es:[si+2], cs

loc_13460:
		mov	word ptr es:[si+4], ss
		mov	word ptr es:[si+6], ds
		pop	bp
		pop	si
		retf
sub_13450	endp

seg050		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg051		segment	byte public 'CODE' use16
		assume cs:seg051
		;org 0Bh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_1346B	proc far		; CODE XREF: sub_12319+4DP

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp

loc_1346E:
		mov	ah, 4Ah	; 'J'
		mov	bx, [bp+arg_2]
		mov	es, [bp+arg_0]
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		jb	short loc_1347F
		mov	ax, 0FFFFh

loc_1347D:
		jmp	short loc_13487
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1347F:				; CODE XREF: sub_1346B+Dj
		push	bx

loc_13480:
		push	ax
		call	sub_12AF3
		pop	ax

loc_13487:				; CODE XREF: sub_1346B:loc_1347Dj
		pop	bp
		retf
sub_1346B	endp

seg051		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg052		segment	byte public 'CODE' use16
		assume cs:seg052
		;org 9
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_13489	proc far		; CODE XREF: seg055:0031P

arg_0		= dword	ptr  8

		push	si
		push	bp
		mov	bp, sp

loc_1348D:
		mov	ah, 2Bh	; '+'
		les	si, [bp+arg_0]
		mov	cx, es:[si]
		mov	dx, es:[si+2]
		int	21h		; DOS -	SET CURRENT DATE
					; DL = day, DH = month,	CX = year
					; Return: AL = 00h if no error /= FFh if bad value sent	to routine
		pop	bp
		pop	si
		retf
sub_13489	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_1349E	proc far		; CODE XREF: seg055:003DP

arg_0		= dword	ptr  8

		push	si
		push	bp
		mov	bp, sp
		mov	ah, 2Dh	; '-'
		les	si, [bp+arg_0]
		mov	cx, es:[si]

loc_134AA:
		mov	dx, es:[si+2]

loc_134AE:				; DOS -	SET CURRENT TIME
		int	21h		; CH = hours, CL = minutes, DH = seconds, DL = hundredths of seconds
					; Return: AL = 00h if no error / = FFh if bad value sent to routine

loc_134B0:
		pop	bp
		pop	si
		retf
sub_1349E	endp

seg052		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg053		segment	byte public 'CODE' use16
		assume cs:seg053
		;org 3
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_134B3	proc far		; CODE XREF: sub_DE8+57EP sub_DE8+5FDP ...

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	bx, [bp+arg_0]
		mov	ax, 34DDh

loc_134BC:
		mov	dx, 12h
		cmp	dx, bx
		jnb	short loc_134DD
		div	bx
		mov	bx, ax
		in	al, 61h		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ЭЫЭ OR	03H=spkr ON
					; 1: Tmr 2 data	ЭМ  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		test	al, 3
		jnz	short loc_134D5
		or	al, 3
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ЭЫЭ OR	03H=spkr ON
					; 1: Tmr 2 data	ЭМ  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		mov	al, 0B6h ; 'Ж'
		out	43h, al		; Timer	8253-5 (AT: 8254.2).

loc_134D5:				; CODE XREF: sub_134B3+18j
		mov	al, bl
		out	42h, al		; Timer	8253-5 (AT: 8254.2).
		mov	al, bh
		out	42h, al		; Timer	8253-5 (AT: 8254.2).

loc_134DD:				; CODE XREF: sub_134B3+Ej
		pop	bp

locret_134DE:
		retf
sub_134B3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_134DF	proc far		; CODE XREF: sub_5C8:loc_63DP
					; sub_DE8+DE1P	...
		in	al, 61h		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ЭЫЭ OR	03H=spkr ON
					; 1: Tmr 2 data	ЭМ  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		and	al, 0FCh
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ЭЫЭ OR	03H=spkr ON
					; 1: Tmr 2 data	ЭМ  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		retf
sub_134DF	endp

seg053		ends

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg054		segment	byte public 'CODE' use16
		assume cs:seg054
		;org 6
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
		push	bp
		mov	bp, sp
		push	word ptr [bp+0Ah]

loc_134EC:
		push	word ptr [bp+0Eh]
		push	word ptr [bp+0Ch]
		les	bx, [bp+6]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx]
		call	copyCastleStuff
		mov	sp, bp
		mov	ax, [bp+0Ah]
		les	bx, [bp+6]
		add	es:[bx], ax
		les	bx, es:[bx]
		mov	byte ptr es:[bx], 0
		xor	ax, ax
		pop	bp
		retf	0Ah

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_13519	proc far		; CODE XREF: sub_12264+59P

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

		push	bp
		mov	bp, sp
		les	bx, [bp+arg_0]
		mov	byte ptr es:[bx], 0
		mov	ax, 6
		mov	dx, cs
		push	dx
		push	ax
		push	ss
		lea	ax, [bp+arg_0]
		push	ax
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	ss
		lea	ax, [bp+arg_8]
		push	ax
		call	thingThatEndsUpPrintingStr
		pop	bp
		retf
sub_13519	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	bp
		mov	bp, sp
		les	bx, [bp+6]
		mov	byte ptr es:[bx], 0
		mov	ax, 6
		mov	dx, cs
		push	dx
		push	ax
		push	ss
		lea	ax, [bp+6]
		push	ax
		push	word ptr [bp+0Ch]
		push	word ptr [bp+0Ah]

loc_1355D:
		push	word ptr [bp+10h]

loc_13560:
		push	word ptr [bp+0Eh]
		call	thingThatEndsUpPrintingStr
		pop	bp
		retf
seg054		ends

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg055		segment	byte public 'CODE' use16
		assume cs:seg055
		;org 0Ah
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
		push	bp
		mov	bp, sp

loc_1356D:
		sub	sp, 8
		push	ss
		lea	ax, [bp-4]
		push	ax
		push	ss
		lea	ax, [bp-8]
		push	ax
		les	bx, [bp+6]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx]
		call	sub_137FF
		add	sp, 0Ch
		push	ss
		lea	ax, [bp-8]
		push	ax
		call	sub_13489
		pop	cx
		pop	cx
		push	ss
		lea	ax, [bp-4]
		push	ax
		call	sub_1349E
		pop	cx
		pop	cx
		xor	ax, ax
		mov	sp, bp
		pop	bp
		retf

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_135AA	proc far		; CODE XREF: sub_3DEF+2FP
					; sub_3DEF+1D2P ...

var_C		= word ptr -0Ch
var_8		= word ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 0Ch
		push	ss
		lea	ax, [bp+var_C]
		push	ax
		call	sub_12862
		pop	cx
		pop	cx
		push	ss
		lea	ax, [bp+var_8]
		push	ax
		call	sub_12878
		pop	cx
		pop	cx
		push	ss
		lea	ax, [bp+var_8]
		push	ax
		push	ss
		lea	ax, [bp+var_C]
		push	ax
		call	sub_136C2
		add	sp, 8
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jz	short loc_135F8
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		les	bx, [bp+arg_0]
		mov	es:[bx+2], dx
		mov	es:[bx], ax

loc_135F8:				; CODE XREF: sub_135AA+3Cj
		mov	dx, [bp+var_2]

loc_135FB:
		mov	ax, [bp+var_4]

loc_135FE:
		mov	sp, bp

loc_13600:
		pop	bp
		retf
sub_135AA	endp

seg055		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg056		segment	byte public 'CODE' use16
		assume cs:seg056
		;org 2
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_13602	proc far		; CODE XREF: sub_3634+15CP
					; sub_3634+19BP ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	[bp+arg_6]
		push	[bp+arg_4]

loc_1360B:
		call	sub_13692
		mov	sp, bp
		inc	ax
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_13692
		pop	cx
		pop	cx
		mov	cx, [bp+arg_2]
		mov	bx, [bp+arg_0]
		add	bx, ax
		push	cx
		push	bx
		push	[bp+arg_6]
		push	[bp+arg_4]
		call	sub_12D75
		mov	sp, bp
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		pop	bp
		retf
sub_13602	endp

seg056		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg057		segment	byte public 'CODE' use16
		assume cs:seg057
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_13640	proc far		; CODE XREF: sub_E849+A3P
					; sub_E849+170P

arg_0		= dword	ptr  0Ah
arg_4		= dword	ptr  0Eh

		push	si
		push	di
		push	bp
		mov	bp, sp
		push	ds
		cld
		les	di, [bp+arg_4]
		mov	si, di
		xor	al, al

loc_1364E:
		mov	cx, 0FFFFh
		repne scasb
		not	cx
		mov	di, si
		lds	si, [bp+arg_0]
		repe cmpsb

loc_1365C:
		mov	al, [si-1]

loc_1365F:
		sub	al, es:[di-1]
		cbw
		pop	ds
		pop	bp
		pop	di
		pop	si
		retf
sub_13640	endp

seg057		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg058		segment	byte public 'CODE' use16
		assume cs:seg058
		;org 9
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_13669	proc far		; CODE XREF: sub_3634+135P
					; sub_3634+16FP ...

arg_0		= dword	ptr  0Ah
arg_4		= dword	ptr  0Eh

		push	si
		push	di
		push	bp
		mov	bp, sp

loc_1366E:
		cld
		les	di, [bp+arg_4]
		mov	si, di
		xor	al, al
		mov	cx, 0FFFFh
		repne scasb
		not	cx
		push	ds
		mov	ax, es
		mov	ds, ax
		les	di, [bp+arg_0]
		rep movsb
		pop	ds
		mov	dx, word ptr [bp+arg_0+2]

loc_1368B:
		mov	ax, word ptr [bp+arg_0]

loc_1368E:
		pop	bp

loc_1368F:
		pop	di

loc_13690:
		pop	si
		retf
sub_13669	endp

seg058		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg059		segment	byte public 'CODE' use16
		assume cs:seg059
		;org 2
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_13692	proc far		; CODE XREF: sub_3634+3B3P
					; sub_3634+5AFP ...

arg_0		= dword	ptr  0Ah

		push	si
		push	di
		push	bp
		mov	bp, sp
		cld
		les	di, [bp+arg_0]
		xor	al, al

loc_1369D:
		mov	cx, 0FFFFh

loc_136A0:
		repne scasb
		mov	ax, cx
		not	ax
		dec	ax
		pop	bp
		pop	di
		pop	si
		retf
sub_13692	endp

seg059		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg060		segment	byte public 'CODE' use16
		assume cs:seg060
		;org 0Bh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_136AB	proc far		; CODE XREF: seg006:0243P seg006:02EFP ...

arg_0		= word ptr  6

		push	bp
		mov	bp, sp

loc_136AE:
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+arg_0]

loc_136B9:
		call	sub_12B32

loc_136BE:
		mov	sp, bp

loc_136C0:
		pop	bp
		retf
sub_136AB	endp

seg060		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg061		segment	byte public 'CODE' use16
		assume cs:seg061
		;org 2
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_136C2	proc far		; CODE XREF: sub_135AA+28P

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  0Ah
arg_4		= dword	ptr  0Eh

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 6
		mov	dx, word_17AE0

loc_136CE:
		mov	ax, word_17ADE
		add	ax, 0A600h
		adc	dx, 12CEh
		mov	[bp+var_4], dx
		mov	[bp+var_6], ax
		les	bx, [bp+arg_0]
		mov	si, es:[bx]
		add	si, 0F844h
		mov	ax, si
		sar	ax, 1
		sar	ax, 1
		cwd
		mov	cx, 786h
		mov	bx, 1F80h
		call	sub_372
		add	ax, [bp+var_6]
		adc	dx, [bp+var_4]
		mov	[bp+var_4], dx
		mov	[bp+var_6], ax
		mov	ax, si
		and	ax, 3
		cwd
		mov	cx, 1E1h
		mov	bx, 3380h
		call	sub_372
		add	ax, [bp+var_6]
		adc	dx, [bp+var_4]
		mov	[bp+var_4], dx
		mov	[bp+var_6], ax
		test	si, 3
		jz	short loc_1373B
		mov	dx, [bp+var_4]
		mov	ax, [bp+var_6]
		add	ax, 5180h
		adc	dx, 1
		mov	[bp+var_4], dx
		mov	[bp+var_6], ax

loc_1373B:				; CODE XREF: sub_136C2+65j
		xor	di, di
		les	bx, [bp+arg_0]
		mov	al, es:[bx+3]
		cbw
		mov	si, ax
		dec	si

loc_13748:				; CODE XREF: sub_136C2+92j
		or	si, si
		jle	short loc_13756
		dec	si
		mov	al, [si+3BE0h]
		cbw
		add	di, ax
		jmp	short loc_13748
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13756:				; CODE XREF: sub_136C2+88j
		les	bx, [bp+arg_0]
		mov	al, es:[bx+2]
		cbw
		dec	ax
		add	di, ax
		mov	ax, di
		mov	dx, 18h
		mul	dx
		les	bx, [bp+arg_4]
		mov	dl, es:[bx+1]
		mov	dh, 0
		add	ax, dx
		mov	[bp+var_2], ax
		cmp	word_17AE2, 0
		jz	short loc_1378E
		cmp	[bp+var_2], 0B12h
		jl	short loc_1378E
		cmp	[bp+var_2], 1BC2h
		jge	short loc_1378E
		dec	[bp+var_2]

loc_1378E:				; CODE XREF: sub_136C2+B9j
					; sub_136C2+C0j ...
		les	bx, [bp+arg_0]
		cmp	byte ptr es:[bx+3], 2
		jle	short loc_137A6
		les	bx, [bp+arg_0]
		test	word ptr es:[bx], 3
		jnz	short loc_137A6
		add	[bp+var_2], 18h

loc_137A6:				; CODE XREF: sub_136C2+D4j
					; sub_136C2+DEj
		mov	ax, [bp+var_2]
		cwd
		xor	cx, cx
		mov	bx, 0E10h
		call	sub_372
		add	ax, [bp+var_6]
		adc	dx, [bp+var_4]
		mov	[bp+var_4], dx
		mov	[bp+var_6], ax
		les	bx, [bp+arg_4]
		mov	al, es:[bx]
		mov	ah, 0
		cwd
		xor	cx, cx
		mov	bx, 3Ch	; '<'
		call	sub_372
		les	bx, [bp+arg_4]
		mov	bl, es:[bx+3]

loc_137DA:
		mov	bh, 0
		push	dx
		push	ax
		mov	ax, bx
		cwd
		pop	bx
		pop	cx
		add	bx, ax
		adc	cx, dx
		add	bx, [bp+var_6]

loc_137EA:
		adc	cx, [bp+var_4]
		mov	[bp+var_4], cx
		mov	[bp+var_6], bx
		mov	dx, [bp+var_4]
		mov	ax, [bp+var_6]
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		retf
sub_136C2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_137FF	proc far		; CODE XREF: seg055:0024P

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= dword	ptr  0Ah
arg_8		= dword	ptr  0Eh

		push	bp
		mov	bp, sp
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]

loc_13808:
		mov	cx, word_17AE0
		mov	bx, word_17ADE
		add	bx, 0A600h
		adc	cx, 12CEh
		sub	ax, bx
		sbb	dx, cx
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		les	bx, [bp+arg_8]
		mov	byte ptr es:[bx+2], 0
		xor	dx, dx
		mov	ax, 3Ch	; '<'
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]

loc_13837:
		call	sub_2B1
		les	bx, [bp+arg_8]
		mov	es:[bx+3], al
		xor	dx, dx
		mov	ax, 3Ch	; '<'
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B9
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		xor	dx, dx
		mov	ax, 3Ch	; '<'
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]

loc_13868:
		call	sub_2B1
		les	bx, [bp+arg_8]
		mov	es:[bx], al
		xor	dx, dx
		mov	ax, 3Ch	; '<'
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B9
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		xor	dx, dx
		mov	ax, 88F8h
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B9
		shl	ax, 1
		shl	ax, 1
		add	ax, 7BCh
		les	bx, [bp+arg_4]
		mov	es:[bx], ax
		xor	dx, dx
		mov	ax, 88F8h
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B1
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		cmp	[bp+arg_2], 0
		jl	short loc_13919
		jg	short loc_138D1
		cmp	[bp+arg_0], 2250h
		jbe	short loc_13919

loc_138D1:				; CODE XREF: sub_137FF+C9j
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		add	ax, 0DDB0h
		adc	dx, 0FFFFh
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		les	bx, [bp+arg_4]
		inc	word ptr es:[bx]
		xor	dx, dx

loc_138EB:
		mov	ax, 2238h
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B9
		les	bx, [bp+arg_4]
		add	es:[bx], ax
		xor	dx, dx
		mov	ax, 2238h
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B1
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax

loc_13919:				; CODE XREF: sub_137FF+C7j
					; sub_137FF+D0j
		cmp	word_17AE2, 0
		jz	short loc_13946
		cmp	[bp+arg_2], 0
		jl	short loc_13946
		jnz	short loc_1392F
		cmp	[bp+arg_0], 0B12h
		jb	short loc_13946

loc_1392F:				; CODE XREF: sub_137FF+127j
		cmp	[bp+arg_2], 0
		jg	short loc_13946
		jl	short loc_1393E
		cmp	[bp+arg_0], 1BC2h
		jnb	short loc_13946

loc_1393E:				; CODE XREF: sub_137FF+136j
		add	[bp+arg_0], 1
		adc	[bp+arg_2], 0

loc_13946:				; CODE XREF: sub_137FF+11Fj
					; sub_137FF+125j ...
		xor	dx, dx
		mov	ax, 18h
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B1
		les	bx, [bp+arg_8]
		mov	es:[bx+1], al
		xor	dx, dx
		mov	ax, 18h
		push	dx
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_2B9
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		add	[bp+arg_0], 1
		adc	[bp+arg_2], 0
		les	bx, [bp+arg_4]
		test	word ptr es:[bx], 3
		jnz	short loc_139BF

loc_13989:
		cmp	[bp+arg_2], 0
		jl	short loc_139A1
		jg	short loc_13997
		cmp	[bp+arg_0], 3Ch	; '<'
		jbe	short loc_139A1

loc_13997:				; CODE XREF: sub_137FF+190j
		sub	[bp+arg_0], 1
		sbb	[bp+arg_2], 0
		jmp	short loc_139BF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_139A1:				; CODE XREF: sub_137FF+18Ej
					; sub_137FF+196j
		cmp	[bp+arg_2], 0
		jnz	short loc_139BF
		cmp	[bp+arg_0], 3Ch	; '<'
		jnz	short loc_139BF
		les	bx, [bp+arg_4]
		mov	byte ptr es:[bx+3], 2
		les	bx, [bp+arg_4]
		mov	byte ptr es:[bx+2], 1Dh
		jmp	short loc_13A21
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_139BF:				; CODE XREF: sub_137FF+188j
					; sub_137FF+1A0j ...
		les	bx, [bp+arg_4]
		mov	byte ptr es:[bx+3], 0
		jmp	short loc_139F4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_139C9:				; CODE XREF: sub_137FF+208j
					; sub_137FF+20Fj
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		les	bx, [bp+arg_4]
		push	dx
		push	ax
		mov	al, es:[bx+3]
		cbw
		mov	bx, ax
		mov	al, [bx+3BE0h]
		cbw
		cwd
		pop	bx
		pop	cx
		sub	bx, ax
		sbb	cx, dx
		mov	[bp+arg_2], cx

loc_139EA:
		mov	[bp+arg_0], bx
		les	bx, [bp+arg_4]
		inc	byte ptr es:[bx+3]

loc_139F4:				; CODE XREF: sub_137FF+1C8j
		les	bx, [bp+arg_4]
		mov	al, es:[bx+3]
		cbw
		mov	bx, ax
		mov	al, [bx+3BE0h]
		cbw
		cwd
		cmp	dx, [bp+arg_2]
		jl	short loc_139C9
		jnz	short loc_13A10
		cmp	ax, [bp+arg_0]
		jb	short loc_139C9

loc_13A10:				; CODE XREF: sub_137FF+20Aj
		les	bx, [bp+arg_4]
		inc	byte ptr es:[bx+3]
		mov	al, byte ptr [bp+arg_0]

loc_13A1A:
		les	bx, [bp+arg_4]

loc_13A1D:
		mov	es:[bx+2], al

loc_13A21:				; CODE XREF: sub_137FF+1BEj
		pop	bp
		retf
sub_137FF	endp ; sp = -28h

seg061		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg062		segment	byte public 'CODE' use16
		assume cs:seg062
		;org 3
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_13A23	proc far		; CODE XREF: sub_F3F4+29P

arg_0		= word ptr  8

		push	si
		push	bp
		mov	bp, sp
		mov	si, [bp+arg_0]

loc_13A2A:
		mov	ax, si
		mov	ah, 0

loc_13A2E:
		mov	bx, ax
		test	byte ptr [bx+39DDh], 8
		jz	short loc_13A42
		mov	ax, si
		mov	ah, 0

loc_13A3B:
		add	ax, 0FFE0h

loc_13A3E:
		jmp	short loc_13A48
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13A40:
		jmp	short loc_13A48
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13A42:				; CODE XREF: sub_13A23+12j
		mov	ax, si
		mov	ah, 0
		jmp	short $+2

loc_13A48:				; CODE XREF: sub_13A23:loc_13A3Ej
					; sub_13A23:loc_13A40j
		pop	bp
		pop	si
		retf
sub_13A23	endp

seg062		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg063		segment	byte public 'CODE' use16
		assume cs:seg063
		;org 0Bh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_13A4B	proc far		; CODE XREF: sub_75D8+15P seg006:0064P

arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp

loc_13A4E:
		push	ds
		mov	ah, 41h	; 'A'
		lds	dx, [bp+arg_0]
		int	21h		; DOS -	2+ - DELETE A FILE (UNLINK)
					; DS:DX	-> ASCIZ pathname of file to delete (no	wildcards allowed)
		pop	ds
		jb	short loc_13A5D
		xor	ax, ax
		jmp	short loc_13A63
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13A5D:				; CODE XREF: sub_13A4B+Cj
		push	ax

loc_13A5E:
		call	sub_12AF3

loc_13A63:				; CODE XREF: sub_13A4B+10j
		pop	bp
		retf
sub_13A4B	endp

seg063		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg064		segment	byte public 'CODE' use16
		assume cs:seg064
		;org 5
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_13A65	proc near		; CODE XREF: thingThatEndsUpPrintingStr+232p
					; thingThatEndsUpPrintingStr+23Ap

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		mov	dx, [bp+arg_0]
		mov	cx, 0F04h

loc_13A6E:
		mov	bx, 3BF3h
		cld
		mov	al, dh
		shr	al, cl
		xlat
		stosb
		mov	al, dh
		and	al, ch
		xlat
		stosb
		mov	al, dl
		shr	al, cl
		xlat
		stosb
		mov	al, dl
		and	al, ch
		xlat
		stosb
		pop	bp
		retn	2
sub_13A65	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

thingThatEndsUpPrintingStr proc	far	; CODE XREF: sub_11FCC+19P
					; sub_13519+21P ...

var_92		= word ptr -92h
var_90		= byte ptr -90h
var_8F		= byte ptr -8Fh
var_8E		= word ptr -8Eh
var_8C		= word ptr -8Ch
var_8A		= byte ptr -8Ah
var_89		= byte ptr -89h
var_88		= word ptr -88h
var_86		= word ptr -86h
var_83		= word ptr -83h
var_54		= word ptr -54h
var_51		= byte ptr -51h
var_50		= word ptr -50h
arg_0		= dword	ptr  0Ah
arg_4		= dword	ptr  0Eh
arg_8		= word ptr  12h
arg_A		= word ptr  14h
arg_C		= dword	ptr  16h

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 92h
		mov	[bp+var_54], 0
		mov	[bp+var_51], 50h ; 'P'
		push	es
		cld
		lea	di, [bp+var_50]
		mov	[bp+var_92], di

loc_13AA9:				; CODE XREF: thingThatEndsUpPrintingStr+442j
		mov	di, [bp+var_92]

loc_13AAD:				; CODE XREF: thingThatEndsUpPrintingStr:loc_13EA2j
		les	si, [bp+arg_4]

loc_13AB0:				; CODE XREF: thingThatEndsUpPrintingStr+33j
					; thingThatEndsUpPrintingStr+3Bj
		lods	byte ptr es:[si]
		or	al, al
		jz	short loc_13ACB
		cmp	al, 25h	; '%'
		jz	short loc_13ACE

loc_13ABA:				; CODE XREF: thingThatEndsUpPrintingStr+48j
		mov	ss:[di], al
		inc	di
		dec	[bp+var_51]
		jg	short loc_13AB0
		call	$+3
		jmp	loc_13F20
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_13AB0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13ACB:				; CODE XREF: thingThatEndsUpPrintingStr+26j
		jmp	loc_13EEC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13ACE:				; CODE XREF: thingThatEndsUpPrintingStr+2Aj
		mov	[bp+var_86], si
		lods	byte ptr es:[si]
		cmp	al, 25h	; '%'
		jz	short loc_13ABA
		mov	[bp+var_92], di
		sub	cx, cx
		mov	[bp+var_88], cx
		mov	[bp+var_8A], 20h ; ' '
		mov	[bp+var_89], cl
		mov	[bp+var_8E], 0FFFFh
		mov	[bp+var_8C], 0FFFFh
		jmp	short loc_13AFB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13AF9:				; CODE XREF: thingThatEndsUpPrintingStr+CBj
					; thingThatEndsUpPrintingStr+D7j ...
		lods	byte ptr es:[si]

loc_13AFB:				; CODE XREF: thingThatEndsUpPrintingStr+69j
		cbw
		mov	dx, ax
		xchg	ax, bx
		sub	bl, 20h	; ' '
		cmp	bl, 60h	; '`'
		jnb	short loc_13B4C
		mov	bl, [bx+3C03h]
		mov	ax, bx
		cmp	ax, 16h		; switch 23 cases
		jbe	short loc_13B15
		jmp	loc_13ED3	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13B15:				; CODE XREF: thingThatEndsUpPrintingStr+82j
		mov	bx, ax
		shl	bx, 1
		jmp	cs:off_13B1E[bx] ; switch jump
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
off_13B1E	dw offset loc_13B67	; DATA XREF: thingThatEndsUpPrintingStr+8Br
		dw offset loc_13B4F	; jump table for switch	statement
		dw offset loc_13BA5
		dw offset loc_13B5B
		dw offset loc_13BCC
		dw offset loc_13BD5
		dw offset loc_13C0B
		dw offset loc_13C14
		dw offset loc_13B8D
		dw offset loc_13C43
		dw offset loc_13C1D
		dw offset loc_13C21
		dw offset loc_13C25
		dw offset loc_13C99
		dw offset loc_13D53
		dw offset loc_13CEE
		dw offset loc_13D10
		dw offset loc_13EA5
		dw offset loc_13ED3
		dw offset loc_13ED3
		dw offset loc_13ED3
		dw offset loc_13B79
		dw offset loc_13B83
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13B4C:				; CODE XREF: thingThatEndsUpPrintingStr+77j
					; thingThatEndsUpPrintingStr+C4j ...
		jmp	loc_13ED3	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13B4F:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		cmp	ch, 0		; case 0x1
		ja	short loc_13B4C
		or	[bp+var_8A], 1
		jmp	short loc_13AF9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13B5B:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		cmp	ch, 0		; case 0x3
		ja	short loc_13B4C
		or	[bp+var_8A], 2
		jmp	short loc_13AF9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13B67:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		cmp	ch, 0		; case 0x0
		ja	short loc_13B4C
		cmp	[bp+var_89], 2Bh ; '+'
		jz	short loc_13AF9
		mov	[bp+var_89], dl
		jmp	short loc_13AF9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13B79:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		and	[bp+var_8A], 0DFh ; case 0x15
		mov	ch, 5
		jmp	loc_13AF9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13B83:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		or	[bp+var_8A], 20h ; case	0x16
		mov	ch, 5
		jmp	loc_13AF9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13B8D:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		cmp	ch, 0		; case 0x8
		ja	short loc_13BD5	; case 0x5
		test	[bp+var_8A], 2
		jnz	short loc_13BBC
		or	[bp+var_8A], 8
		mov	ch, 1
		jmp	short loc_13BBC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13BA2:				; CODE XREF: thingThatEndsUpPrintingStr+134j
					; thingThatEndsUpPrintingStr+141j ...
		jmp	loc_13ED3	; default
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13BA5:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		push	es		; case 0x2
		les	di, [bp+arg_0]
		mov	ax, es:[di]
		add	word ptr [bp+arg_0], 2
		pop	es
		cmp	ch, 2
		jnb	short loc_13BBF
		mov	[bp+var_8E], ax
		mov	ch, 3

loc_13BBC:				; CODE XREF: thingThatEndsUpPrintingStr+109j
					; thingThatEndsUpPrintingStr+112j ...
		jmp	loc_13AF9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13BBF:				; CODE XREF: thingThatEndsUpPrintingStr+126j
		cmp	ch, 4
		jnz	short loc_13BA2
		mov	[bp+var_8C], ax
		inc	ch
		jmp	short loc_13BBC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13BCC:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		cmp	ch, 4		; case 0x4
		jnb	short loc_13BA2
		mov	ch, 4
		jmp	short loc_13BBC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13BD5:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; thingThatEndsUpPrintingStr+102j
					; DATA XREF: ...
		xchg	ax, dx		; case 0x5
		sub	al, 30h	; '0'
		cbw
		cmp	ch, 2
		ja	short loc_13BF3
		mov	ch, 2
		xchg	ax, [bp+var_8E]
		or	ax, ax
		jl	short loc_13BBC
		mov	dx, 0Ah
		mul	dx
		add	[bp+var_8E], ax
		jmp	short loc_13BBC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13BF3:				; CODE XREF: thingThatEndsUpPrintingStr+14Ej
		cmp	ch, 4
		jnz	short loc_13BA2
		xchg	ax, [bp+var_8C]
		or	ax, ax
		jl	short loc_13BBC
		mov	dx, 0Ah
		mul	dx
		add	[bp+var_8C], ax
		jmp	short loc_13BBC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13C0B:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		or	[bp+var_8A], 10h ; case	0x6
		mov	ch, 5
		jmp	short loc_13BBC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13C14:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		and	[bp+var_8A], 0EFh ; case 0x7
		mov	ch, 5
		jmp	short loc_13BBC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13C1D:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		mov	bh, 8		; case 0xA
		jmp	short loc_13C2B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13C21:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		mov	bh, 0Ah		; case 0xB
		jmp	short loc_13C30
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13C25:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		mov	bh, 10h		; case 0xC
		mov	bl, 0E9h ; 'щ'
		add	bl, dl

loc_13C2B:				; CODE XREF: thingThatEndsUpPrintingStr+191j
		mov	[bp+var_89], 0

loc_13C30:				; CODE XREF: thingThatEndsUpPrintingStr+195j
		mov	[bp+var_8F], 0
		mov	[bp+var_90], dl
		les	di, [bp+arg_0]
		mov	ax, es:[di]
		sub	dx, dx
		jmp	short loc_13C55
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13C43:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		mov	bh, 0Ah		; case 0x9
		mov	[bp+var_8F], 1
		mov	[bp+var_90], dl
		les	di, [bp+arg_0]
		mov	ax, es:[di]
		cwd

loc_13C55:				; CODE XREF: thingThatEndsUpPrintingStr+1B3j
		inc	di
		inc	di
		mov	word ptr [bp+arg_4], si
		test	[bp+var_8A], 10h
		jz	short loc_13C66
		mov	dx, es:[di]
		inc	di
		inc	di

loc_13C66:				; CODE XREF: thingThatEndsUpPrintingStr+1D1j
		mov	word ptr [bp+arg_0], di
		push	dx
		push	ax
		or	ax, dx
		jz	short loc_13C74
		or	[bp+var_8A], 4

loc_13C74:				; CODE XREF: thingThatEndsUpPrintingStr+1DFj
		push	ss
		lea	di, [bp+var_83]
		push	di
		mov	al, bh
		cbw
		push	ax
		mov	al, [bp+var_8F]
		push	ax
		push	bx
		call	sub_12B5D
		push	ss
		pop	es
		mov	dx, [bp+var_8C]
		or	dx, dx
		jg	short loc_13C96
		jmp	loc_13D89
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13C96:				; CODE XREF: thingThatEndsUpPrintingStr+203j
		jmp	loc_13D98
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13C99:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		mov	[bp+var_90], dl	; case 0xD
		mov	word ptr [bp+arg_4], si
		lea	di, [bp-84h]
		les	bx, [bp+arg_0]
		push	word ptr es:[bx]
		inc	bx
		inc	bx
		mov	word ptr [bp+arg_0], bx
		test	[bp+var_8A], 20h
		jz	short loc_13CC6
		push	word ptr es:[bx]
		inc	bx
		inc	bx
		mov	word ptr [bp+arg_0], bx
		push	ss
		pop	es
		call	sub_13A65
		mov	al, 3Ah	; ':'
		stosb

loc_13CC6:				; CODE XREF: thingThatEndsUpPrintingStr+226j
		push	ss
		pop	es
		call	sub_13A65
		mov	byte ptr ss:[di], 0
		mov	[bp+var_8F], 0
		and	[bp+var_8A], 0FBh
		lea	cx, [bp-84h]
		sub	di, cx
		xchg	cx, di
		mov	dx, [bp+var_8C]
		cmp	dx, cx
		jg	short loc_13CEB
		mov	dx, cx

loc_13CEB:				; CODE XREF: thingThatEndsUpPrintingStr+259j
		jmp	loc_13D89
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13CEE:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		mov	word ptr [bp+arg_4], si	; case 0xF
		mov	[bp+var_90], dl
		les	di, [bp+arg_0]
		mov	ax, es:[di]
		add	word ptr [bp+arg_0], 2
		push	ss
		pop	es
		lea	di, [bp+var_83]
		mov	ah, 0
		mov	es:[di], ax
		mov	cx, 1
		jmp	loc_13DC8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13D10:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		mov	word ptr [bp+arg_4], si	; case 0x10
		mov	[bp+var_90], dl
		les	di, [bp+arg_0]
		test	[bp+var_8A], 20h
		jnz	short loc_13D2E
		mov	di, es:[di]
		add	word ptr [bp+arg_0], 2
		push	ds
		pop	es
		assume es:dseg
		or	di, di
		jmp	short loc_13D39
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13D2E:				; CODE XREF: thingThatEndsUpPrintingStr+291j
		les	di, es:[di]
		assume es:nothing
		add	word ptr [bp+arg_0], 4
		mov	ax, es
		or	ax, di

loc_13D39:				; CODE XREF: thingThatEndsUpPrintingStr+29Ej
		jnz	short loc_13D40
		push	ds
		pop	es
		assume es:dseg
		mov	di, 3BECh

loc_13D40:				; CODE XREF: thingThatEndsUpPrintingStr:loc_13D39j
		call	$+3
		jmp	loc_13EFF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		cmp	cx, [bp+var_8C]
		jbe	short loc_13D50
		mov	cx, [bp+var_8C]

loc_13D50:				; CODE XREF: thingThatEndsUpPrintingStr+2BCj
		jmp	short loc_13DC8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 90h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13D53:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		mov	word ptr [bp+arg_4], si	; case 0xE
		mov	[bp+var_90], dl
		les	di, [bp+arg_0]
		assume es:nothing
		mov	cx, [bp+var_8C]
		or	cx, cx
		jge	short loc_13D68
		mov	cx, 6

loc_13D68:				; CODE XREF: thingThatEndsUpPrintingStr+2D5j
		push	es
		push	di
		push	cx
		push	ss
		lea	bx, [bp+var_83]
		push	bx
		push	dx
		mov	ax, 1
		and	al, [bp+var_8A]
		push	ax
		call	far ptr	sub_44F
		add	word ptr [bp+arg_0], 8
		push	ss
		pop	es
		lea	di, [bp+var_83]

loc_13D89:				; CODE XREF: thingThatEndsUpPrintingStr+205j
					; thingThatEndsUpPrintingStr:loc_13CEBj
		test	[bp+var_8A], 8
		jz	short loc_13DA6
		mov	dx, [bp+var_8E]
		or	dx, dx
		jle	short loc_13DA6

loc_13D98:				; CODE XREF: thingThatEndsUpPrintingStr:loc_13C96j
		call	$+3
		jmp	loc_13EFF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		sub	dx, cx
		jle	short loc_13DA6
		mov	[bp+var_88], dx

loc_13DA6:				; CODE XREF: thingThatEndsUpPrintingStr+300j
					; thingThatEndsUpPrintingStr+308j ...
		mov	al, [bp+var_89]

loc_13DAA:
		or	al, al
		jz	short loc_13DC2
		cmp	byte ptr es:[di], 2Dh ;	'-'
		jz	short loc_13DC2
		dec	di
		sub	[bp+var_88], 1
		adc	[bp+var_88], 0
		mov	es:[di], al

loc_13DC2:				; CODE XREF: thingThatEndsUpPrintingStr+31Ej
					; thingThatEndsUpPrintingStr+324j
		call	$+3
		jmp	loc_13EFF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13DC8:				; CODE XREF: thingThatEndsUpPrintingStr+27Fj
					; thingThatEndsUpPrintingStr:loc_13D50j
		mov	si, di

loc_13DCA:
		mov	di, [bp+var_92]
		mov	bx, [bp+var_8E]
		mov	al, 5
		and	al, [bp+var_8A]
		cmp	al, 5
		jnz	short loc_13E13
		mov	ah, [bp+var_90]
		cmp	ah, 6Fh	; 'o'
		jnz	short loc_13DF4
		cmp	[bp+var_88], 0

loc_13DEA:
		jg	short loc_13E13
		mov	[bp+var_88], 1
		jmp	short loc_13E13
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13DF4:				; CODE XREF: thingThatEndsUpPrintingStr+355j
		cmp	ah, 78h	; 'x'
		jz	short loc_13DFE
		cmp	ah, 58h	; 'X'
		jnz	short loc_13E13

loc_13DFE:				; CODE XREF: thingThatEndsUpPrintingStr+369j
		or	[bp+var_8A], 40h
		sub	bx, 2
		sub	[bp+var_88], 2
		jge	short loc_13E13
		mov	[bp+var_88], 0

loc_13E13:				; CODE XREF: thingThatEndsUpPrintingStr+34Cj
					; thingThatEndsUpPrintingStr:loc_13DEAj ...
		add	cx, [bp+var_88]
		test	[bp+var_8A], 2
		jnz	short loc_13E2D
		jmp	short loc_13E29
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13E20:				; CODE XREF: thingThatEndsUpPrintingStr+39Dj
		mov	al, 20h	; ' '
		call	$+3
		jmp	loc_13F11
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dec	bx

loc_13E29:				; CODE XREF: thingThatEndsUpPrintingStr+390j
		cmp	bx, cx
		jg	short loc_13E20

loc_13E2D:				; CODE XREF: thingThatEndsUpPrintingStr+38Ej
		test	[bp+var_8A], 40h
		jz	short loc_13E46
		mov	al, 30h	; '0'
		call	$+3
		jmp	loc_13F11
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		mov	al, [bp+var_90]
		call	$+3
		jmp	loc_13F11
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13E46:				; CODE XREF: thingThatEndsUpPrintingStr+3A4j
		mov	dx, [bp+var_88]
		or	dx, dx
		jle	short loc_13E7B
		sub	cx, dx
		sub	bx, dx
		mov	al, es:[si]
		cmp	al, 2Dh	; '-'
		jz	short loc_13E61
		cmp	al, 20h	; ' '
		jz	short loc_13E61
		cmp	al, 2Bh	; '+'
		jnz	short loc_13E6B

loc_13E61:				; CODE XREF: thingThatEndsUpPrintingStr+3C9j
					; thingThatEndsUpPrintingStr+3CDj
		lods	byte ptr es:[si]
		call	$+3
		jmp	loc_13F11
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dec	cx
		dec	bx

loc_13E6B:				; CODE XREF: thingThatEndsUpPrintingStr+3D1j
		xchg	cx, dx
		jcxz	short loc_13E79

loc_13E6F:				; CODE XREF: thingThatEndsUpPrintingStr+3E9j
		mov	al, 30h	; '0'
		call	$+3
		jmp	loc_13F11
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		loop	loc_13E6F

loc_13E79:				; CODE XREF: thingThatEndsUpPrintingStr+3DFj
		xchg	cx, dx

loc_13E7B:				; CODE XREF: thingThatEndsUpPrintingStr+3BEj
		sub	bx, cx
		jcxz	short loc_13E92

loc_13E7F:				; CODE XREF: thingThatEndsUpPrintingStr:loc_13E90j
		lods	byte ptr es:[si]
		mov	ss:[di], al
		inc	di
		dec	[bp+var_51]
		jg	short loc_13E90
		call	$+3
		jmp	loc_13F20
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13E90:				; CODE XREF: thingThatEndsUpPrintingStr+3FAj
		loop	loc_13E7F

loc_13E92:				; CODE XREF: thingThatEndsUpPrintingStr+3EFj
		or	bx, bx
		jle	short loc_13EA2
		mov	cx, bx

loc_13E98:				; CODE XREF: thingThatEndsUpPrintingStr+412j
		mov	al, 20h	; ' '
		call	$+3
		jmp	short loc_13F11
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 2
		loop	loc_13E98

loc_13EA2:				; CODE XREF: thingThatEndsUpPrintingStr+406j
		jmp	loc_13AAD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13EA5:				; CODE XREF: thingThatEndsUpPrintingStr+8Bj
					; DATA XREF: thingThatEndsUpPrintingStr:off_13B1Eo
		mov	word ptr [bp+arg_4], si	; case 0x11
		les	di, [bp+arg_0]
		test	[bp+var_8A], 20h
		jnz	short loc_13EBD
		mov	di, es:[di]
		add	word ptr [bp+arg_0], 2
		push	ds
		pop	es
		assume es:dseg
		jmp	short loc_13EC4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13EBD:				; CODE XREF: thingThatEndsUpPrintingStr+422j
		les	di, es:[di]
		assume es:nothing
		add	word ptr [bp+arg_0], 4

loc_13EC4:				; CODE XREF: thingThatEndsUpPrintingStr+42Dj
		mov	ax, 50h	; 'P'
		sub	al, [bp+var_51]
		add	ax, [bp+var_54]
		mov	es:[di], ax
		jmp	loc_13AA9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13ED3:				; CODE XREF: thingThatEndsUpPrintingStr+84j
					; thingThatEndsUpPrintingStr+8Bj ...
		mov	si, [bp+var_86]	; default
		mov	es, word ptr [bp+arg_4+2]
		mov	di, [bp+var_92]
		mov	al, 25h	; '%'

loc_13EE0:				; CODE XREF: thingThatEndsUpPrintingStr+45Cj
		call	$+3
		jmp	short loc_13F11
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 2
		lods	byte ptr es:[si]
		or	al, al
		jnz	short loc_13EE0

loc_13EEC:				; CODE XREF: thingThatEndsUpPrintingStr:loc_13ACBj
		cmp	[bp+var_51], 50h ; 'P'
		jge	short loc_13EF8
		call	$+3
		jmp	short loc_13F20
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 2

loc_13EF8:				; CODE XREF: thingThatEndsUpPrintingStr+462j
		pop	es
		mov	ax, [bp+var_54]
		jmp	short loc_13F4C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 90h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13EFF:				; CODE XREF: thingThatEndsUpPrintingStr+2B5j
					; thingThatEndsUpPrintingStr+30Dj ...
		push	di
		mov	cx, 0FFFFh
		mov	al, 0
		repne scasb
		not	cx
		dec	cx
		pop	di
		pop	ax
		add	ax, 3
		jmp	ax
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13F11:				; CODE XREF: thingThatEndsUpPrintingStr+397j
					; thingThatEndsUpPrintingStr+3ABj ...
		mov	ss:[di], al
		inc	di
		dec	[bp+var_51]
		jle	short loc_13F20
		pop	ax
		add	ax, 3
		jmp	ax
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13F20:				; CODE XREF: thingThatEndsUpPrintingStr+38j
					; thingThatEndsUpPrintingStr+3FFj ...
		push	bx
		push	cx
		push	dx
		push	es
		lea	ax, [bp+var_50]
		sub	di, ax
		push	ss
		lea	ax, [bp+var_50]
		push	ax
		push	di
		push	[bp+arg_A]
		push	[bp+arg_8]
		call	[bp+arg_C]	; Ultimately maybePrintString
		mov	[bp+var_51], 50h ; 'P'
		add	[bp+var_54], di
		lea	di, [bp+var_50]
		pop	es
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		add	ax, 3
		jmp	ax
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13F4C:				; CODE XREF: thingThatEndsUpPrintingStr+46Ej
		mov	sp, bp

loc_13F4E:
		pop	bp

loc_13F4F:
		pop	di

loc_13F50:
		pop	si
		retf	10h
thingThatEndsUpPrintingStr endp

seg064		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg065		segment	byte public 'CODE' use16
		assume cs:seg065
		;org 4
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

printChar1	proc far		; CODE XREF: maybePrintString+B8P
					; sub_128AF+34P ...

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		mov	ax, [bp+arg_0]
		dec	ax

loc_13F5B:
		mov	dl, byte_17AC2
		mov	dh, 0
		mul	dx
		add	ax, word_17AC5
		mov	dx, [bp+arg_2]
		dec	dx
		add	ax, dx
		shl	ax, 1
		mov	dx, word_17AC7
		pop	bp
		retf	4
printChar1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

printChar2	proc far		; CODE XREF: maybePrintString+C8P
					; sub_133CB+20P

var_2		= word ptr -2
arg_0		= word ptr  0Ah
arg_2		= dword	ptr  0Ch
arg_6		= dword	ptr  10h

		push	si
		push	di
		push	bp
		mov	bp, sp
		dec	sp
		dec	sp
		mov	al, byte_17AC4
		mov	ah, 0
		mov	[bp+var_2], ax
		push	ds
		mov	cx, [bp+arg_0]
		jcxz	short loc_13FE6
		les	di, [bp+arg_6]
		lds	si, [bp+arg_2]
		cld
		cmp	si, di
		jnb	short loc_13FA1
		mov	ax, cx
		dec	ax
		shl	ax, 1
		add	si, ax
		add	di, ax
		std

loc_13FA1:				; CODE XREF: printChar2+1Ej
		cmp	[bp+var_2], 0
		jnz	short loc_13FAB
		rep movsw
		jmp	short loc_13FE6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13FAB:				; CODE XREF: printChar2+2Ej
		mov	dx, 3DAh
		mov	ax, es
		mov	bx, ds
		cmp	ax, bx
		jz	short loc_13FC7

loc_13FB6:				; CODE XREF: printChar2+4Cj
		cli

loc_13FB7:				; CODE XREF: printChar2+43j
		in	al, dx		; Video	status bits:
					; 0: retrace.  1=display is in vert or horiz retrace.
					; 1: 1=light pen is triggered; 0=armed
					; 2: 1=light pen switch	is open; 0=closed
					; 3: 1=vertical	sync pulse is occurring.
		ror	al, 1
		jb	short loc_13FB7

loc_13FBC:				; CODE XREF: printChar2+48j
		in	al, dx		; Video	status bits:
					; 0: retrace.  1=display is in vert or horiz retrace.
					; 1: 1=light pen is triggered; 0=armed
					; 2: 1=light pen switch	is open; 0=closed
					; 3: 1=vertical	sync pulse is occurring.
		ror	al, 1
		jnb	short loc_13FBC
		movsw
		sti
		loop	loc_13FB6
		jmp	short loc_13FE6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_13FC7:				; CODE XREF: printChar2+3Dj
					; printChar2+6Dj
		cli

loc_13FC8:				; CODE XREF: printChar2+54j
		in	al, dx		; Video	status bits:
					; 0: retrace.  1=display is in vert or horiz retrace.
					; 1: 1=light pen is triggered; 0=armed
					; 2: 1=light pen switch	is open; 0=closed
					; 3: 1=vertical	sync pulse is occurring.
		ror	al, 1
		jb	short loc_13FC8

loc_13FCD:				; CODE XREF: printChar2+59j
		in	al, dx		; Video	status bits:
					; 0: retrace.  1=display is in vert or horiz retrace.
					; 1: 1=light pen is triggered; 0=armed
					; 2: 1=light pen switch	is open; 0=closed
					; 3: 1=vertical	sync pulse is occurring.
		ror	al, 1
		jnb	short loc_13FCD
		lodsw
		sti
		mov	bx, ax

loc_13FD6:				; CODE XREF: printChar2+62j
		in	al, dx		; Video	status bits:
					; 0: retrace.  1=display is in vert or horiz retrace.
					; 1: 1=light pen is triggered; 0=armed
					; 2: 1=light pen switch	is open; 0=closed
					; 3: 1=vertical	sync pulse is occurring.
		ror	al, 1
		jb	short loc_13FD6

loc_13FDB:				; CODE XREF: printChar2:loc_13FDEj
		in	al, dx		; Video	status bits:
					; 0: retrace.  1=display is in vert or horiz retrace.
					; 1: 1=light pen is triggered; 0=armed
					; 2: 1=light pen switch	is open; 0=closed
					; 3: 1=vertical	sync pulse is occurring.

loc_13FDC:
		ror	al, 1

loc_13FDE:
		jnb	short loc_13FDB

loc_13FE0:
		mov	ax, bx
		stosw
		sti
		loop	loc_13FC7

loc_13FE6:				; CODE XREF: printChar2+13j
					; printChar2+32j ...
		pop	ds
		mov	sp, bp
		pop	bp
		pop	di
		pop	si

locret_13FEC:
		retf	0Ah
printChar2	endp

seg065		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg066		segment	byte public 'CODE' use16
		assume cs:seg066
		;org 0Fh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_13FEF	proc far		; CODE XREF: maybePrintString+CP
					; maybePrintString+15P	...
		mov	ah, 3
		mov	bh, 0
		call	sub_1AF
		mov	ax, dx
		retf
sub_13FEF	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	cs
		call	near ptr sub_13FEF
		mov	ah, 0
		mov	dl, byte ptr word_17ABA
		mov	dh, 0
		sub	ax, dx
		inc	ax
		retf
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	cs
		call	near ptr sub_13FEF
		mov	cx, 8
		shr	ax, cl
		mov	ah, 0
		mov	dl, byte ptr word_17ABA+1
		mov	dh, 0
		sub	ax, dx
		inc	ax
		retf
seg066		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg067		segment	byte public 'CODE' use16
		assume cs:seg067
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_14020	proc far		; CODE XREF: sub_75D8+4EP seg006:0090P ...

var_8E		= dword	ptr -8Eh
var_89		= byte ptr -89h
var_88		= dword	ptr -88h
var_84		= word ptr -84h
var_82		= word ptr -82h
arg_0		= word ptr  0Ah
arg_2		= dword	ptr  0Ch
arg_6		= word ptr  10h

		push	si
		push	di
		push	bp
		mov	bp, sp
		sub	sp, 8Eh
		mov	ax, [bp+arg_6]
		inc	ax

loc_1402D:
		cmp	ax, 2
		jnb	short loc_14037
		xor	ax, ax
		jmp	loc_1416C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_14037:				; CODE XREF: sub_14020+10j
		mov	bx, [bp+arg_0]
		shl	bx, 1
		test	word ptr [bx+3B44h], 8000h
		jz	short loc_1405B
		push	[bp+arg_6]
		push	word ptr [bp+arg_2+2]
		push	word ptr [bp+arg_2]
		push	[bp+arg_0]
		call	sub_14172
		add	sp, 8
		jmp	loc_1416C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1405B:				; CODE XREF: sub_14020+22j
		mov	bx, [bp+arg_0]
		shl	bx, 1
		and	word ptr [bx+3B44h], 0FDFFh
		les	bx, [bp+arg_2]
		mov	word ptr [bp+var_88+2],	es
		mov	word ptr [bp+var_88], bx
		mov	si, [bp+arg_6]
		mov	bx, ss
		mov	es, bx
		lea	bx, [bp+var_82]
		mov	word ptr [bp+var_8E+2],	es
		mov	word ptr [bp+var_8E], bx

loc_14084:				; CODE XREF: sub_14020:loc_1411Fj
		or	si, si
		jnz	short loc_1408B
		jmp	loc_14122
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1408B:				; CODE XREF: sub_14020+66j
		dec	si
		les	bx, [bp+var_88]
		inc	word ptr [bp+var_88]
		mov	al, es:[bx]
		mov	[bp+var_89], al
		cmp	al, 0Ah
		jnz	short loc_140AC
		les	bx, [bp+var_8E]
		mov	byte ptr es:[bx], 0Dh
		inc	word ptr [bp+var_8E]

loc_140AC:				; CODE XREF: sub_14020+7Ej
		mov	al, [bp+var_89]
		les	bx, [bp+var_8E]
		mov	es:[bx], al
		inc	word ptr [bp+var_8E]
		mov	ax, word ptr [bp+var_8E]
		mov	cx, ss
		lea	bx, [bp+var_82]
		sub	ax, bx
		cmp	ax, 80h	; ''
		jl	short loc_1411F
		mov	ax, word ptr [bp+var_8E]
		mov	cx, ss
		lea	bx, [bp+var_82]
		sub	ax, bx
		mov	di, ax
		push	di
		push	ss
		lea	ax, [bp+var_82]
		push	ax
		push	[bp+arg_0]
		call	sub_14172
		add	sp, 8
		mov	[bp+var_84], ax
		cmp	ax, di
		jz	short loc_1410F
		cmp	[bp+var_84], 0
		jnb	short loc_14102
		mov	ax, 0FFFFh
		jmp	short loc_1416C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_1410F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_14102:				; CODE XREF: sub_14020+D9j
		mov	ax, [bp+arg_6]
		sub	ax, si
		add	ax, [bp+var_84]
		sub	ax, di
		jmp	short loc_1416C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1410F:				; CODE XREF: sub_14020+D2j
					; sub_14020+E0j
		mov	bx, ss
		mov	es, bx
		lea	bx, [bp+var_82]
		mov	word ptr [bp+var_8E+2],	es
		mov	word ptr [bp+var_8E], bx

loc_1411F:				; CODE XREF: sub_14020+AAj
		jmp	loc_14084
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_14122:				; CODE XREF: sub_14020+68j
		mov	ax, word ptr [bp+var_8E]
		mov	cx, ss
		lea	bx, [bp+var_82]
		sub	ax, bx
		mov	di, ax
		mov	ax, di
		or	ax, ax
		jbe	short loc_14169
		push	di
		push	ss
		lea	ax, [bp+var_82]
		push	ax
		push	[bp+arg_0]
		call	sub_14172
		add	sp, 8
		mov	[bp+var_84], ax
		cmp	ax, di
		jz	short loc_14169
		cmp	[bp+var_84], 0
		jnb	short loc_1415E
		mov	ax, 0FFFFh
		jmp	short loc_1416C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_14169
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_1415E:				; CODE XREF: sub_14020+135j
		mov	ax, [bp+arg_6]
		add	ax, [bp+var_84]
		sub	ax, di
		jmp	short loc_1416C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_14169:				; CODE XREF: sub_14020+114j
					; sub_14020+12Ej ...
		mov	ax, [bp+arg_6]

loc_1416C:				; CODE XREF: sub_14020+14j
					; sub_14020+38j ...
		mov	sp, bp

loc_1416E:
		pop	bp

loc_1416F:
		pop	di

loc_14170:
		pop	si
		retf
sub_14020	endp

seg067		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
seg068		segment	byte public 'CODE' use16
		assume cs:seg068
		;org 2
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_14172	proc far		; CODE XREF: sub_14020+30P
					; sub_14020+C4P ...

arg_0		= word ptr  6
arg_2		= dword	ptr  8
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		mov	bx, [bp+arg_0]
		shl	bx, 1

loc_1417A:
		test	word ptr [bx+3B44h], 800h
		jz	short loc_14194
		mov	ax, 2
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+arg_0]
		call	sub_12B32
		mov	sp, bp

loc_14194:				; CODE XREF: sub_14172+Ej
		push	ds
		mov	ah, 40h	; '@'
		mov	bx, [bp+arg_0]
		mov	cx, [bp+arg_6]
		lds	dx, [bp+arg_2]
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		pop	ds
		jb	short loc_141B4
		push	ax
		mov	bx, [bp+arg_0]
		shl	bx, 1
		or	word ptr [bx+3B44h], 1000h
		pop	ax
		jmp	short loc_141BA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_141B4:				; CODE XREF: sub_14172+31j
		push	ax
		call	sub_12AF3

loc_141BA:				; CODE XREF: sub_14172+40j
		pop	bp
		retf
sub_14172	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 8
seg068		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure data
dseg		segment	para public 'DATA' use16
		assume cs:dseg
		db    0
		db    0
		db    0
		db    0
		db  54h	; T
		db  75h	; u
		db  72h	; r
		db  62h	; b
		db  6Fh	; o
		db  2Dh	; -
		db  43h	; C
		db  20h
		db  2Dh	; -
		db  20h
unk_141CE	db  43h	; C
		db  6Fh	; o
		db  70h	; p
		db  79h	; y
		db  72h	; r
		db  69h	; i
		db  67h	; g
		db  68h	; h
		db  74h	; t
		db  20h
		db  28h	; (
		db  63h	; c
		db  29h	; )
		db  20h
		db  31h	; 1
		db  39h	; 9
		db  38h	; 8
		db  37h	; 7
		db  20h
		db  42h	; B
		db  6Fh	; o
		db  72h	; r
		db  6Ch	; l
		db  61h	; a
		db  6Eh	; n
		db  64h	; d
		db  20h
		db  49h	; I
		db  6Eh	; n
		db  74h	; t
		db  6Ch	; l
		db  2Eh	; .
		db    0
		db  44h	; D
		db  69h	; i
		db  76h	; v
		db  69h	; i
		db  64h	; d
		db  65h	; e
		db  20h
		db  65h	; e
		db  72h	; r
		db  72h	; r
		db  6Fh	; o
		db  72h	; r
		db  0Dh
		db  0Ah
unk_141FD	db  41h	; A		; DATA XREF: start+15Eo
		db  62h	; b
		db  6Eh	; n
		db  6Fh	; o
		db  72h	; r
		db  6Dh	; m
		db  61h	; a
		db  6Ch	; l
		db  20h
		db  70h	; p
		db  72h	; r
		db  6Fh	; o
		db  67h	; g
		db  72h	; r
		db  61h	; a
		db  6Dh	; m
		db  20h
		db  74h	; t
		db  65h	; e
		db  72h	; r
		db  6Dh	; m
		db  69h	; i
		db  6Eh	; n
		db  61h	; a
		db  74h	; t
		db  69h	; i
		db  6Fh	; o
		db  6Eh	; n
		db  0Dh
		db  0Ah
dword_1421B	dd 0			; DATA XREF: sub_122+6w sub_13E+4r ...
word_1421F	dw 0			; DATA XREF: start+F2r	sub_45B+C3w
word_14221	dw 0			; DATA XREF: start+EEr	sub_45B+D6w
word_14223	dw 0			; DATA XREF: start+EAr	sub_45B+DAw
word_14225	dw 0			; DATA XREF: start+E6r	sub_559+16w
word_14227	dw 0			; DATA XREF: start+E2r	sub_559+19w
dword_14229	dd 0			; DATA XREF: start+2Fr	start:loc_69w ...
word_1422D	dw 0			; DATA XREF: start+79w	sub_559+7r
word_1422F	dw 0			; DATA XREF: start+1Aw	start+AFr ...
word_14231	dw 0			; DATA XREF: start+17w
word_14233	dw 0			; DATA XREF: sub_11D34:loc_11D64w
					; sub_12AF3+2Ew
word_14235	dw 0			; DATA XREF: start+26w	start+4Dw ...
word_14237	dw 0			; DATA XREF: sub_123AC+Dr
					; sub_123F3+28r
word_14239	dw 0			; DATA XREF: start+A7w	sub_123AC+9r ...
dword_1423B	dd 0			; DATA XREF: sub_12319+26w
					; sub_12319+6Cw ...
word_1423F	dw 0			; DATA XREF: sub_12319+86w
					; sub_123AC+22r ...
word_14241	dw 0			; DATA XREF: start+22w	sub_12319+34r ...
		align 2
byte_14244	db 1			; DATA XREF: sub_70F7+27r
					; sub_72AE:loc_7424r ...
aUnregistered	db 'UNREGISTERED',0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  66h	; f
		db    0
		db 0AEh	; Ў
		db    0
		db    1
		db    0
		db    5
		db    0
		db    9
		db    0
		db  52h	; R
		db    0
		db 0A4h	; Є
		db    0
		db    1
		db    0
		db    5
		db    0
		db    9
		db    0
		db  3Dh	; =
		db    0
		db  98h	; 
		db    0
		db    0
		db    0
		db    5
		db    0
		db    9
		db    0
		db  8Fh	; 
		db    0
		db 0AEh	; Ў
		db    0
		db    1
		db    0
		db    5
		db    0
		db    9
		db    0
		db 0C0h	; Р
		db    0
		db 0AAh	; Њ
		db    0
		db    0
		db    0
		db    5
		db    0
		db    9
		db    0
		db 0B7h	; З
		db    0
		db  9Eh	; 
		db    0
		db    0
		db    0
		db    5
		db    0
		db    9
		db    0
		db 0C6h	; Ц
		db    0
		db  94h	; 
		db    0
		db    1
		db    0
		db    5
		db    0
		db    9
		db    0
		db    6
		db    0
		db  8Eh	; 
		db    0
		db    0
		db    0
		db    5
		db    0
		db    6
		db    0
		db 0D4h	; д
		db    0
		db 0B0h	; А
		db    0
		db    1
		db    0
		db    6
		db    0
		db    9
		db    0
		db  4Ah	; J
		db    0
		db  8Fh	; 
		db    0
		db    0
		db    0
		db    5
		db    0
		db    9
		db    0
		db  77h	; w
		db    0
		db  87h	; 
		db    0
		db    0
		db    0
		db    5
		db    0
		db    9
unk_142DB	db    0
		db  8Fh	; 
		db    0
		db  9Bh	; 
		db    0
		db    0
		db    0
		db    5
		db    0
		db    9
		db    0
		db  6Bh	; k
		db    0
		db  5Fh	; _
		db    0
		db    1
		db    0
		db    5
		db    0
		db    9
		db    0
		db  8Ah	; 
		db    0
		db  94h	; 
		db    0
		db    1
		db    0
		db    5
		db    0
		db    9
		db    0
		db  1Dh
		db    0
		db  7Ah	; z
		db    0
		db    1
		db    0
		db    5
		db    0
		db    9
		db    0
		db  61h	; a
		db    0
		db  8Dh	; 
		db    0
		db    1
		db    0
		db    5
		db    0
		db    9
		db    0
		db  0Fh
		db    0
		db  66h	; f
		db  64h	; d
		db  65h	; e
		db  6Dh	; m
		db  6Fh	; o
		db  5Fh	; _
		db  31h	; 1
		db  36h	; 6
		db  2Eh	; .
		db  63h	; c
		db  61h	; a
		db  31h	; 1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_14326	dw 0			; DATA XREF: sub_DE8:loc_22E7r
					; sub_DE8+15B7r
		db    0
		db    0
		db    3
		db    0
		db    7
		db    0
		db    8
		db    0
		db  0Ch
		db    0
		db 0C8h	; Ш
		db    0
		db  2Ch	; ,
		db    1
		db  5Eh	; ^
		db    1
		db  45h	; E
		db    1
		db 0C8h	; Ш
		db    0
		db  5Eh	; ^
		db    1
		db 0D6h	; ж
		db    1
		db  9Dh	; 
		db    3
		db  90h	; 
		db    1
		db  2Ch	; ,
		db    1
		db 0F4h	; є
		db    1
		db  45h	; E
		db    1
		db 0C8h	; Ш
		db    0
		db  5Eh	; ^
		db    1
		db 0C2h	; Т
		db    1
		db  26h	; &
		db    2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  52h	; R
		db    3
		db  52h	; R
		db    3
		db  52h	; R
		db    3
		db 0BDh	; Н
		db    6
		db 0BDh	; Н
		db    6
		db 0BDh	; Н
		db    6
		db 0C0h	; Р
		db  0Dh
		db 0C0h	; Р
		db  0Dh
		db 0C0h	; Р
		db  0Dh
		db  25h	; %
unk_1436B	db  12h
		db  25h	; %
		db  12h
		db  25h	; %
		db  12h
		db  0Dh
		db  16h
word_14372	dw 0			; DATA XREF: sub_F8A8+27w sub_FA30+15w ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_14394	dw 0			; DATA XREF: sub_3DEF+26Ew
					; sub_3DEF+280w ...
word_14396	dw 0			; DATA XREF: sub_F8A8+35w sub_FA30+23w ...
word_14398	dw 0			; DATA XREF: sub_F8A8+2Fw sub_FA30+1Dw ...
word_1439A	dw 0			; DATA XREF: sub_F8A8+3Dw sub_FA30+2Bw ...
word_1439C	dw 0			; DATA XREF: sub_F8A8+43w sub_FA30+31w ...
word_1439E	dw 0			; DATA XREF: sub_F8A8+49w sub_FA30+37w ...
word_143A0	dw 0			; DATA XREF: sub_F8A8+4Fw sub_FA30+3Dw ...
word_143A2	dw 0			; DATA XREF: sub_F8A8+55w sub_FA30+43w ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
unk_143AB	db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1440C	dw 0			; DATA XREF: sub_F8A8+6Fw sub_FA30+5Dw ...
		dd aWelcomeToClyde	; "Welcome to Clyde's Adventure!"
		dd aBadIdea_		; "Bad idea."
		dd aToTheEastYouMu	; "To the east you must	leap,~If the crown"...
		dd aNiceJump_		; "Nice	jump."
		dd aMagicLurksInAC	; "Magic lurks in a corner below."
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aThatReallyHurt	; "That	really hurts."
		dd aDonTGiveUpTheA	; "Don't give up!~The answer is near."
		dd aAnInvisibleTel	; "An invisible	teleport~is buried below y"...
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aThereIsMagicNe	; "There is magic near.~Jump for joy!~Succ"...
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aDanger_KeepOut	; "Danger.~Keep	out."
		dd aThereIsAWayOut	; "There is a way~out of this trap."
		dd aItSTimeToHopTi	; "It's time to hop~till you drop."
		dd aBeneathYourFee	; "Beneath your	feet,~the key to riches."
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aBridgeOfDispai	; "Bridge of Dispair.~Remember this."
		dd aMagicLurksOnTh	; "Magic lurks on~the Bridge of	Dispair."
		dd aAnInvisibleT_0	; "An INVISIBLE	TELEPORT is~buried somewhe"...
		dd aConserveEnergy	; "Conserve energy."
		dd aForAGoodTimeRe	; "For a good time register~and	get Chapte"...
		dd aMagicTriggersA	; "Magic triggers are near."
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aNoOneHasEverCo	; "No one has ever conquered this~castle o"...
		dd aHaveANiceDay	; "Have	a nice day!"
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
off_144FA	dd aWelcomeToClyde+1Dh
		dd aThisCastleHasM	; "This	castle has~many	hidden triggers."
		dd aFaith		; "Faith!"
		dd aAlwaysExamineT	; "Always examine the tops~of teleports	fo"...
		dd aMagicOnIce		; "Magic on ice!"
		dd aLookForMagic	; "Look	for magic!"
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aInvisibleTelep	; "Invisible teleport to the west."
		dd aUpAndAway		; "Up and away!"
		dd aRememberThoseF	; "Remember those four~gems up there."
		dd aWowAreYourFeet	; "Wow,	are your feet cold!"
		dd aHopWhenYouGetT	; "Hop when you	get there."
		dd aCanYouDigIt?	; "Can you dig it?"
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
off_1454A	dd aWelcomeToClyde+1Dh
		dd aWelcomeToTheDa	; "Welcome to the Dark Side."
		dd aSureIsDarkInHe	; "Sure	is dark	in here."
		dd aOdd_		; "Odd."
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aSneakyHuh?		; "Sneaky, huh?"
		dd aUpUpAndAwayYou	; "Up! Up and away~you must go!"
		dd aBoo			; "Boo!"
		dd aCongratulation	; "Congratulations!"
		dd aDeadEnd_		; "Dead	End."
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aBeware_YouMayF	; "Beware. You may fall~right into the pit"...
		dd aGoNoFurther_	; "Go no further."
		dd aDonTWaitRegist	; "Don't wait!~Register Clyde's Adventure "...
		dd aDonTLeaveWitho	; "Don't leave without those~gems above yo"...
		dd aHop_		; "Hop."
		dd aYouAreNotTrapp	; "You are not trapped."
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWipeYourFeet_	; "Wipe	your feet."
		dd aThisPlaceIsDan	; "This	place is dangerous!"
		dd aTeleportToTheR	; "Teleport to the~ride	of your	life!~Grab"...
		dd aYouNeedToFindE	; "You need to find~energy! It is near."
		dd aLedgeToTheEast	; "Ledge to the	east."
		dd aOnlyFive		; "Only	five!"
		dd aRelaxAndTakeFi	; "Relax and take five."
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aGuessYouWonTCo	; "Guess you won't come here again."
		dd aMagicIsNear_	; "Magic is near."
		dd aConserveEner_0	; "Conserve energy!~There is magic to the "...
		dd aChapterTwoOfCl	; "Chapter Two of Clyde's Adventure~is pac"...
		dd aGoOnAndTakeAFr	; "Go on and take a free slide."
		dd aJumpEast		; "Jump	East!"
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aFifth_		; "Fifth."
		dd aAvoidPainfulCl	; "Avoid painful Clyde's Adventure~withdra"...
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWelcomeToClyde+1Dh
		dd aWrongWay_		; "Wrong way."
		dd aNowWhat?		; "Now what?"
		dd aYouMustHaveFai	; "You must have faith."
		dd aMagicIsNear_Bo	; "Magic is near.~Both good and	evil."
		dd aTheTreasureIsA	; "The treasure	is above you.~Don't leave "...
		dd aHiddenTeleport	; "Hidden teleport."
		dd aNeverGiveUp		; "Never give up!"
		dd aDonTForgetThat	; "Don't forget that gem up there."
		dd aHiddenTeleport	; "Hidden teleport."
		dd aWelcomeToClyde+1Dh
		dd aHiddenTeleport	; "Hidden teleport."
		dd aNeverGiveUp		; "Never give up!"
		dd aDonTWasteThisE	; "Don't waste~this energy!"
		dd aDeadEnd_		; "Dead	End."
		dd aYouNeedToBeFas	; "You need to be~fast for this	one."
		dd aPrepareToJump_	; "Prepare to jump."
		dd aUnlessYouMakeA	; "Unless you make a mistake."
		dd aNothingCanStop	; "Nothing can stop you	now!"
		dd aIsnTThisFun?	; "Isn't this fun?"
		dd aWelcomeToClyde+1Dh
		db  16h
		db    0
		db 0AFh	; Џ
		db    0
		db  52h	; R
		db    0
		db  99h	; 
		db    0
		db  5Bh	; [
		db    0
		db  9Dh	; 
		db    0
		db  8Ch	; 
		db    0
		db 0B1h	; Б
		db    0
		db  62h	; b
		db    0
		db 0AEh	; Ў
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  54h	; T
		db    0
		db 0A4h	; Є
		db    0
		db  15h
		db    0
		db  7Dh	; }
		db    0
		db  16h
		db    0
		db  8Ah	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  26h	; &
		db    0
		db 0B1h	; Б
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db 0B0h	; А
		db    0
		db  19h
		db    0
		db 0A6h	; І
		db    0
		db    9
		db    0
		db  91h	; 
		db    0
		db  4Fh	; O
		db    0
		db 0A6h	; І
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  2Dh	; -
		db    0
		db 0AEh	; Ў
		db    0
		db  49h	; I
		db    0
		db 0B1h	; Б
		db    0
		db  17h
		db    0
		db 0A6h	; І
		db    0
		db  47h	; G
		db    0
		db 0B1h	; Б
		db    0
		db  4Bh	; K
		db    0
		db 0B1h	; Б
		db    0
		db  78h	; x
		db    0
		db 0ACh	; Ќ
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db 0B1h	; Б
		db    0
		db  5Ch	; \
		db    0
		db  94h	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  43h	; C
		db    0
		db 0B1h	; Б
		db    0
		db  58h	; X
		db    0
		db 0AEh	; Ў
		db    0
		db  15h
		db    0
		db 0B1h	; Б
		db    0
		db  7Bh	; {
		db    0
		db 0ACh	; Ќ
		db    0
		db  0Ch
		db    0
		db  98h	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  36h	; 6
		db    0
		db 0B1h	; Б
		db    0
		db 0ABh	; Ћ
		db    0
		db 0B1h	; Б
		db    0
		db  34h	; 4
		db    0
		db  9Ch	; 
		db    0
		db 0E1h	; с
		db    0
		db  96h	; 
		db    0
		db  28h	; (
		db    0
		db  8Eh	; 
		db    0
		db    8
		db    0
		db  95h	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  24h	; $
		db    0
		db 0AEh	; Ў
		db    0
		db  19h
		db    0
		db  9Ch	; 
		db    0
		db  14h
		db    0
		db  8Ah	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  1Ah
		db    0
		db 0B1h	; Б
		db    0
		db  62h	; b
		db    0
		db 0B0h	; А
		db    0
		db 0E3h	; у
		db    0
		db 0AEh	; Ў
		db    0
		db  21h	; !
		db    0
		db 0A0h	;  
		db    0
		db  88h	; 
		db    0
		db  8Bh	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  1Ah
		db    0
		db 0ACh	; Ќ
		db    0
		db  5Bh	; [
		db    0
		db 0ABh	; Ћ
		db    0
		db  69h	; i
		db    0
		db 0ABh	; Ћ
		db    0
		db 0CFh	; Я
		db    0
		db 0B0h	; А
		db    0
		db 0DBh	; л
		db    0
		db 0A7h	; Ї
		db    0
		db  23h	; #
		db    0
		db  95h	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  15h
		db    0
		db 0B1h	; Б
		db    0
		db  7Dh	; }
		db    0
		db 0A9h	; Љ
		db    0
		db  72h	; r
		db    0
		db 0A9h	; Љ
		db    0
		db  64h	; d
		db    0
		db 0A9h	; Љ
		db    0
		db  25h	; %
		db    0
		db  97h	; 
		db    0
		db  31h	; 1
		db    0
		db  8Dh	; 
		db    0
		db  48h	; H
		db    0
		db  8Dh	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  6Bh	; k
		db    0
		db 0B1h	; Б
		db    0
		db  65h	; e
		db    0
		db 0A8h	; Ј
		db    0
		db  25h	; %
		db    0
		db 0A7h	; Ї
		db    0
		db  94h	; 
		db    0
		db  9Ch	; 
		db    0
		db  3Ah	; :
		db    0
		db  96h	; 
		db    0
		db 0C8h	; Ш
		db    0
		db  63h	; c
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  5Ch	; \
		db    0
		db 0AEh	; Ў
		db    0
		db  1Eh
		db    0
		db  97h	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  26h	; &
		db    0
		db 0ACh	; Ќ
		db    0
		db  2Eh	; .
		db    0
		db 0B1h	; Б
		db    0
		db  36h	; 6
		db    0
		db 0AFh	; Џ
		db    0
		db  18h
		db    0
		db  93h	; 
		db    0
		db  1Bh
		db    0
		db  82h	; 
		db    0
		db  51h	; Q
		db    0
		db  7Eh	; ~
		db    0
		db  51h	; Q
		db    0
		db  7Ah	; z
		db    0
		db  8Dh	; 
		db    0
		db  74h	; t
		db    0
		db  8Eh	; 
		db    0
		db  71h	; q
		db    0
		db    0
		db    0
		db    0
		db    0
		db  52h	; R
		db    0
		db 0AEh	; Ў
		db    0
		db 0CCh	; Ь
		db    0
		db 0A9h	; Љ
		db    0
		db  2Ah	; *
		db    0
		db  8Ch	; 
		db    0
		db  24h	; $
		db    0
		db  83h	; 
		db    0
		db  7Bh	; {
		db    0
		db  76h	; v
		db    0
		db  84h	; 
		db    0
		db  72h	; r
		db    0
		db  8Dh	; 
		db    0
		db  72h	; r
		db    0
		db  96h	; 
		db    0
		db  72h	; r
		db    0
		db 0A8h	; Ј
		db    0
		db  6Dh	; m
		db    0
		db    0
		db    0
		db    0
		db    0
		db  83h	; 
		db  89h	; 
		db  86h	; 
		db  8Ch	; 
		db 0A6h	; І
		db 0AEh	; Ў
		db 0B6h	; Ж
		db 0BEh	; О
		db  83h	; 
		db  86h	; 
		db  8Ch	; 
		db 0ABh	; Ћ
		db 0B3h	; Г
		db 0BBh	; Л
		db 0C3h	; У
		db 0CBh	; Ы
		db  4Dh	; M
		db  5Ch	; \
		db  78h	; x
		db  82h	; 
		db 0FFh
		db 0FFh
		db  4Dh	; M
		db  5Ch	; \
		db  78h	; x
		db  82h	; 
		db 0FFh
		db 0FFh
		db    9
		db 0E9h	; щ
		db  27h	; '
		db    3
dword_1492E	dd 0A0000000h		; DATA XREF: sub_439E+16r sub_4540+19r ...
		db    1
		db    0
		db    1
		db    0
		db    7
		db    0
		db  32h	; 2
		db    0
word_1493A	dw 0			; DATA XREF: sub_4B81+E74r
					; sub_4B81:loc_5A27w ...
word_1493C	dw 13h			; DATA XREF: sub_4B81+CB3r
					; sub_4B81+CEDr ...
byte_1493E	db 0			; DATA XREF: sub_DE8+DC2w sub_DE8+DF9r ...
		align 2
byte_14940	db 0			; DATA XREF: sub_DE8:loc_2041w
					; sub_DE8:loc_20F8w ...
byte_14941	db 0			; DATA XREF: sub_DE8+1041w
					; sub_DE8+1372w ...
word_14942	dw 50h			; DATA XREF: sub_DE8+3Fw sub_DE8+43Dr	...
		db  5Dh	; ]
		db  61h	; a
		db  69h	; i
		db  6Dh	; m
		db  6Eh	; n
		db  72h	; r
		db  73h	; s
		db  77h	; w
		db 0A1h	; Ё
		db 0A5h	; Ѕ
		db 0A9h	; Љ
		db 0ADh	; ­
		db 0B1h	; Б
		db 0B5h	; Е
		db 0B9h	; Й
		db 0BDh	; Н
		db  6Eh	; n
		db  72h	; r
		db  73h	; s
		db  77h	; w
		db  5Dh	; ]
		db  61h	; a
		db 0A6h	; І
		db 0AAh	; Њ
		db 0AEh	; Ў
		db 0B2h	; В
		db 0B6h	; Ж
		db 0BAh	; К
		db 0BEh	; О
		db 0C2h	; Т
		db 0C6h	; Ц
		db 0CAh	; Ъ
word_14964	dw 0			; DATA XREF: sub_62E4+25r sub_62E4+77w
word_14966	dw 0			; DATA XREF: sub_62E4+21r sub_62E4+7Dw
word_14968	dw 28h			; DATA XREF: sub_DE8+BCr sub_7F60+62Bw ...
word_1496A	dw 78h			; DATA XREF: sub_DE8+D3r sub_7F60+63Cw ...
word_1496C	dw 28h			; DATA XREF: sub_DE8+EAr sub_7F60+64Ew ...
word_1496E	dw 0			; DATA XREF: sub_DE8:loc_EEBr
					; sub_7F60+5E5w ...
		db  2Ah	; *
		db  36h	; 6
		db  1Dh
		db  38h	; 8
		db  3Ah	; :
		db  39h	; 9
		db  1Ch
		db  52h	; R
		db  53h	; S
		db  47h	; G
		db  4Fh	; O
		db  49h	; I
		db  51h	; Q
		db  48h	; H
		db  50h	; P
		db  4Bh	; K
		db  4Dh	; M
		db  4Ch	; L
		dd aLeftShift		; "Left	shift"
		dd aRightShift		; "Right shift"
		dd aCtrl		; "Ctrl"
		dd aAlt			; "Alt"
		dd aCaps		; "Caps"
		dd aSpace		; "Space"
		dd aEnter		; "Enter"
		dd aInsert		; "Insert"
		dd aDelete		; "Delete"
		dd aHome		; "Home"
		dd aEnd			; "End"
		dd aPageUp		; "Page	up"
		dd aPageDown		; "Page	down"
		dd aUpArrow		; "Up arrow"
		dd aDownArrow		; "Down	arrow"
		dd aLeftArrow		; "Left	arrow"
		dd aRightArrow		; "Right arrow"
		dd aCursorKey5		; "Cursor key 5"
byte_149CA	db 0Fh			; DATA XREF: seg003:loc_672Dr
					; seg003:loc_6828r ...
byte_149CB	db 10h			; DATA XREF: seg003:loc_6718r
					; seg003:loc_680Ar ...
byte_149CC	db 3			; DATA XREF: seg003:loc_6757r
					; seg003:loc_6864r ...
byte_149CD	db 2			; DATA XREF: seg003:loc_6742r
					; seg003:loc_6846r ...
byte_149CE	db 0Dh			; DATA XREF: seg003:0123r
					; seg003:loc_67E7r ...
byte_149CF	db 0Bh			; DATA XREF: seg003:loc_66B1r
					; seg003:loc_676Cr ...
byte_149D0	db 0Ch			; DATA XREF: seg003:loc_66C6r
					; seg003:loc_678Fr ...
byte_149D1	db 0			; DATA XREF: sub_DE8+C4w
					; sub_DE8:loc_EB3w ...
byte_149D2	db 0			; DATA XREF: sub_DE8+DBw
					; sub_DE8:loc_ECAw ...
byte_149D3	db 0			; DATA XREF: sub_DE8+113w
					; sub_DE8:loc_F02w ...
byte_149D4	db 0			; DATA XREF: sub_D27:loc_D35r
					; sub_DE8+150w	...
byte_149D5	db 0			; DATA XREF: sub_DE8:loc_1C52r
					; sub_23BE:loc_3097r ...
byte_149D6	db 0			; DATA XREF: sub_DE8+F2w
					; sub_DE8:loc_EE1w ...
byte_149D7	db 0			; DATA XREF: sub_DE8:loc_1B97r
					; sub_65EC+22w	...
byte_149D8	db 0			; DATA XREF: sub_DE8+DB6r sub_DE8+DBDw ...
byte_149D9	db 0			; DATA XREF: sub_DE8:loc_1BCEr
					; sub_65EC+2Cw	...
byte_149DA	db 0			; DATA XREF: sub_DE8+DEDr sub_DE8+DF4w ...
byte_149DB	db 0			; DATA XREF: sub_DE8+FEw
					; sub_DE8:loc_17E3r ...
byte_149DC	db 0			; DATA XREF: sub_DE8:loc_1C0Cr
					; sub_65EC:loc_65FAw ...
byte_149DD	db 0			; DATA XREF: sub_DE8:loc_1C2Fr
					; sub_65EC+18w	...
byte_149DE	db 0			; DATA XREF: sub_DE8+E2Br sub_DE8+E32w ...
byte_149DF	db 0			; DATA XREF: sub_DE8+E4Er sub_DE8+E55w ...
byte_149E0	db 0			; DATA XREF: sub_DE8+11Fw sub_DE8+142w ...
byte_149E1	db 0			; DATA XREF: sub_DE8:loc_10FAr
					; sub_DE8+AABw	...
byte_149E2	db 0			; DATA XREF: sub_DE8+75w sub_DE8+341r	...
		align 2
word_149E4	dw 0			; DATA XREF: sub_DE8+80w sub_DE8+3D0w	...
		db 0F0h	; №
		db 0FFh
		db 0F8h	; ј
		db 0FFh
		db 0F8h	; ј
		db 0FFh
		db 0F8h	; ј
		db 0FFh
		db 0FCh	; ќ
		db 0FFh
		db 0FCh	; ќ
		db 0FFh
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    4
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db  10h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    2
		db    0
		db    3
		db    0
		db    4
		db    0
		db    4
		db    0
		db    3
		db    0
		db    2
		db    0
		db    1
		db    0
		db    5
		db    0
		db    6
		db    0
		db    7
		db    0
		db    0
		db    1
		db  64h	; d
		db    0
		db 0C8h	; Ш
		db    0
		db  64h	; d
		db    0
		db    1
		db    1
		db  32h	; 2
		db    0
		db 0C8h	; Ш
		db    0
		db 0C8h	; Ш
		db    0
		db    1
		db    1
		db  10h
		db  27h	; '
		db 0A0h	;  
		db  0Fh
		db 0A0h	;  
		db  0Fh
		db    1
		db    1
		db 0F4h	; є
		db    1
		db  64h	; d
		db    0
		db  64h	; d
		db    0
		db    1
		db    1
		db  32h	; 2
		db    0
		db 0D0h	; а
		db    7
		db 0D0h	; а
		db    7
		db    2
		db    1
		db 0B0h	; А
		db    4
		db  20h
		db    3
		db 0B0h	; А
		db    4
		db    1
		db    1
		db  7Ch	; |
		db  15h
		db  1Ch
		db  25h	; %
		db  94h	; 
		db  11h
		db    2
		db    1
		db 0D0h	; а
		db    7
		db 0F4h	; є
		db    1
		db 0D0h	; а
		db    7
		db    2
		db    1
		db 0F4h	; є
		db    1
		db  32h	; 2
		db    0
		db 0F4h	; є
		db    1
		db    2
		db    1
		db  50h	; P
		db  14h
		db 0F0h	; №
		db  0Ah
		db  50h	; P
		db  14h
word_14A6C	dw 0FFFFh		; DATA XREF: sub_59D:loc_5ABr
					; sub_59D+26w ...
aWelcomeToClyde	db 'Welcome to Clyde',27h,'s Adventure!',0 ; DATA XREF: dseg:024Eo
aBadIdea_	db 'Bad idea.',0        ; DATA XREF: dseg:0252o
aToTheEastYouMu	db 'To the east you must leap,~If the crown do you seek.',0
					; DATA XREF: dseg:0256o
aNiceJump_	db 'Nice jump.',0       ; DATA XREF: dseg:025Ao
aMagicLurksInAC	db 'Magic lurks in a corner below.',0 ; DATA XREF: dseg:025Eo
aThatReallyHurt	db 'That really hurts.',0 ; DATA XREF: dseg:0276o
aDonTGiveUpTheA	db 'Don',27h,'t give up!~The answer is near.',0 ; DATA XREF: dseg:027Ao
aAnInvisibleTel	db 'An invisible teleport~is buried below you.',0 ; DATA XREF: dseg:027Eo
aThereIsMagicNe	db 'There is magic near.~Jump for joy!~Success shall be yours.',0
					; DATA XREF: dseg:029Eo
aDanger_KeepOut	db 'Danger.~Keep out.',0 ; DATA XREF: dseg:02C6o
aThereIsAWayOut	db 'There is a way~out of this trap.',0 ; DATA XREF: dseg:02CAo
aItSTimeToHopTi	db 'It',27h,'s time to hop~till you drop.',0 ; DATA XREF: dseg:02CEo
aBeneathYourFee	db 'Beneath your feet,~the key to riches.',0 ; DATA XREF: dseg:02D2o
aBridgeOfDispai	db 'Bridge of Dispair.~Remember this.',0 ; DATA XREF: dseg:02EEo
aMagicLurksOnTh	db 'Magic lurks on~the Bridge of Dispair.',0 ; DATA XREF: dseg:02F2o
aAnInvisibleT_0	db 'An INVISIBLE TELEPORT is~buried somewhere in this castle.~Find it'
					; DATA XREF: dseg:02F6o
		db ' by pressing the~Action key.',0
aConserveEnergy	db 'Conserve energy.',0 ; DATA XREF: dseg:02FAo
aForAGoodTimeRe	db 'For a good time register~and get Chapter Two!',0 ; DATA XREF: dseg:02FEo
aMagicTriggersA	db 'Magic triggers are near.',0 ; DATA XREF: dseg:0302o
aNoOneHasEverCo	db 'No one has ever conquered this~castle on their first attempt.~Wil'
					; DATA XREF: dseg:0316o
		db 'l you be the first?',0
aHaveANiceDay	db 'Have a nice day!',0 ; DATA XREF: dseg:031Ao
aThisCastleHasM	db 'This castle has~many hidden triggers.',0 ; DATA XREF: dseg:033Eo
aFaith		db 'Faith!',0           ; DATA XREF: dseg:0342o
aAlwaysExamineT	db 'Always examine the tops~of teleports for dust.',0
					; DATA XREF: dseg:0346o
aMagicOnIce	db 'Magic on ice!',0    ; DATA XREF: dseg:034Ao
aLookForMagic	db 'Look for magic!',0  ; DATA XREF: dseg:034Eo
aInvisibleTelep	db 'Invisible teleport to the west.',0 ; DATA XREF: dseg:0366o
aUpAndAway	db 'Up and away!',0     ; DATA XREF: dseg:036Ao
aRememberThoseF	db 'Remember those four~gems up there.',0 ; DATA XREF: dseg:036Eo
aWowAreYourFeet	db 'Wow, are your feet cold!',0 ; DATA XREF: dseg:0372o
aHopWhenYouGetT	db 'Hop when you get there.',0 ; DATA XREF: dseg:0376o
aCanYouDigIt?	db 'Can you dig it?',0  ; DATA XREF: dseg:037Ao
aWelcomeToTheDa	db 'Welcome to the Dark Side.',0 ; DATA XREF: dseg:038Eo
aSureIsDarkInHe	db 'Sure is dark in here.',0 ; DATA XREF: dseg:0392o
aOdd_		db 'Odd.',0             ; DATA XREF: dseg:0396o
aSneakyHuh?	db 'Sneaky, huh?',0     ; DATA XREF: dseg:03B6o
aUpUpAndAwayYou	db 'Up! Up and away~you must go!',0 ; DATA XREF: dseg:03BAo
aBoo		db 'Boo!',0             ; DATA XREF: dseg:03BEo
aCongratulation	db 'Congratulations!',0 ; DATA XREF: dseg:03C2o
aDeadEnd_	db 'Dead End.',0        ; DATA XREF: dseg:03C6o dseg:04B2o
aBeware_YouMayF	db 'Beware. You may fall~right into the pit.',0 ; DATA XREF: dseg:03DEo
aGoNoFurther_	db 'Go no further.',0   ; DATA XREF: dseg:03E2o
aDonTWaitRegist	db 'Don',27h,'t wait!~Register Clyde',27h,'s Adventure today!',0
					; DATA XREF: dseg:03E6o
aDonTLeaveWitho	db 'Don',27h,'t leave without those~gems above you.',0
					; DATA XREF: dseg:03EAo
aHop_		db 'Hop.',0             ; DATA XREF: dseg:03EEo
aYouAreNotTrapp	db 'You are not trapped.',0 ; DATA XREF: dseg:03F2o
aWipeYourFeet_	db 'Wipe your feet.',0  ; DATA XREF: dseg:0406o
aThisPlaceIsDan	db 'This place is dangerous!',0 ; DATA XREF: dseg:040Ao
aTeleportToTheR	db 'Teleport to the~ride of your life!~Grab ten eastern gems~then jum'
					; DATA XREF: dseg:040Eo
		db 'p for joy!',0
aYouNeedToFindE	db 'You need to find~energy! It is near.',0 ; DATA XREF: dseg:0412o
aLedgeToTheEast	db 'Ledge to the east.',0 ; DATA XREF: dseg:0416o
aOnlyFive	db 'Only five!',0       ; DATA XREF: dseg:041Ao
aRelaxAndTakeFi	db 'Relax and take five.',0 ; DATA XREF: dseg:041Eo
aGuessYouWonTCo	db 'Guess you won',27h,'t come here again.',0 ; DATA XREF: dseg:042Eo
aMagicIsNear_	db 'Magic is near.',0   ; DATA XREF: dseg:0432o
aConserveEner_0	db 'Conserve energy!~There is magic to the west.',0 ; DATA XREF: dseg:0436o
aChapterTwoOfCl	db 'Chapter Two of Clyde',27h,'s Adventure~is packed with even more chal'
					; DATA XREF: dseg:043Ao
		db 'lenges!',0
aGoOnAndTakeAFr	db 'Go on and take a free slide.',0 ; DATA XREF: dseg:043Eo
aJumpEast	db 'Jump East!',0       ; DATA XREF: dseg:0442o
aFifth_		db 'Fifth.',0           ; DATA XREF: dseg:0456o
aAvoidPainfulCl	db 'Avoid painful Clyde',27h,'s Adventure~withdrawl symptoms. Register t'
					; DATA XREF: dseg:045Ao
		db 'oday~and get Chapter Two!',0
aWrongWay_	db 'Wrong way.',0       ; DATA XREF: dseg:047Eo
aNowWhat?	db 'Now what?',0        ; DATA XREF: dseg:0482o
aYouMustHaveFai	db 'You must have faith.',0 ; DATA XREF: dseg:0486o
aMagicIsNear_Bo	db 'Magic is near.~Both good and evil.',0 ; DATA XREF: dseg:048Ao
aTheTreasureIsA	db 'The treasure is above you.~Don',27h,'t leave without it.',0
					; DATA XREF: dseg:048Eo
aHiddenTeleport	db 'Hidden teleport.',0 ; DATA XREF: dseg:0492o dseg:049Eo ...
aNeverGiveUp	db 'Never give up!',0   ; DATA XREF: dseg:0496o dseg:04AAo
aDonTForgetThat	db 'Don',27h,'t forget that gem up there.',0 ; DATA XREF: dseg:049Ao
aDonTWasteThisE	db 'Don',27h,'t waste~this energy!',0 ; DATA XREF: dseg:04AEo
aYouNeedToBeFas	db 'You need to be~fast for this one.',0 ; DATA XREF: dseg:04B6o
aPrepareToJump_	db 'Prepare to jump.',0 ; DATA XREF: dseg:04BAo
aUnlessYouMakeA	db 'Unless you make a mistake.',0 ; DATA XREF: dseg:04BEo
aNothingCanStop	db 'Nothing can stop you now!',0 ; DATA XREF: dseg:04C2o
aIsnTThisFun?	db 'Isn',27h,'t this fun?',0 ; DATA XREF: dseg:04C6o
aLeftShift	db 'Left shift',0       ; DATA XREF: dseg:07C2o
aRightShift	db 'Right shift',0      ; DATA XREF: dseg:07C6o
aCtrl		db 'Ctrl',0             ; DATA XREF: dseg:07CAo
aAlt		db 'Alt',0              ; DATA XREF: dseg:07CEo
aCaps		db 'Caps',0             ; DATA XREF: dseg:07D2o
aSpace		db 'Space',0            ; DATA XREF: dseg:07D6o
aEnter		db 'Enter',0            ; DATA XREF: dseg:07DAo
aInsert		db 'Insert',0           ; DATA XREF: dseg:07DEo
aDelete		db 'Delete',0           ; DATA XREF: dseg:07E2o
aHome		db 'Home',0             ; DATA XREF: dseg:07E6o
aEnd		db 'End',0              ; DATA XREF: dseg:07EAo
aPageUp		db 'Page up',0          ; DATA XREF: dseg:07EEo
aPageDown	db 'Page down',0        ; DATA XREF: dseg:07F2o
aUpArrow	db 'Up arrow',0         ; DATA XREF: dseg:07F6o
aDownArrow	db 'Down arrow',0       ; DATA XREF: dseg:07FAo
aLeftArrow	db 'Left arrow',0       ; DATA XREF: dseg:07FEo
aRightArrow	db 'Right arrow',0      ; DATA XREF: dseg:0802o
aCursorKey5	db 'Cursor key 5',0     ; DATA XREF: dseg:0806o
aVolume_2_ca1	db 'volume_2.ca1',0
aCannotOpenVolu	db 'Cannot open VOLUME_2.CA1',0
aOutOfMemory01	db 'Out of memory (01)',0
aVolume_5_ca1	db 'volume_5.ca1',0
aCanTAllocateMe	db 'Can',27h,'t allocate memory for picbuf',0
aCanTAllocate_0	db 'Can',27h,'t allocate memory for compbuf',0
aDecompressionE	db 'Decompression error!',0
aCounter32000	db 'counter >= 32000',0
aCastle		db 'Castle ',0
aAttempts	db 'Attempts: ',0
aTime		db '    Time: ',0
aMinutes	db ' minutes',0
aTotalTime	db 'Total Time: ',0
aHours		db ' hours ',0
aHour		db ' hour ',0
aMinute		db ' minute',0
aOutOfMemory_Bl	db 'Out of memory. (bload)',0
aCanTOpenFile_B	db 'Can',27h,'t open file. (bload)',0
aMapoffsetTooLa	db 'mapoffset too large',0
aS		db '%s',0
aRandomRange0Er	db 'random range==0 error',0
aMoonlite_exe	db 'MOONLITE.EXE',0
aOrder_frm	db 'ORDER.FRM',0
aUsernameHasBee	db 'Username has been altered. Please restore original program.',0Ah,0
aClydeSAdventur	db 'Clyde',27h,'s Adventure is off to a rocky start.',0Ah
		db 0Ah,0
aNotEnoughMemor	db 'Not enough memory.',0Ah
		db 0Ah
		db 'Free        : %ldK',0Ah
		db 'Required    : 300K',0Ah,0
aVolume_	db 'VOLUME_',0
a_ca1		db '.CA1',0
aMissingFileS	db 'Missing file: %s',0Ah,0
aMissingFileMoo	db 'Missing file: MOONLITE.EXE',0Ah,0
aMissingFileOrd	db 'Missing file: ORDER.FRM',0Ah,0
aMoonlite_exeHa	db 'MOONLITE.EXE has been altered.',0Ah
		db 'Please restore original file.',0Ah,0
aOrder_frmHasBe	db 'ORDER.FRM has been altered.',0Ah
		db 'Please restore original file.',0Ah,0
aYouMustIncreas	db 0Ah
		db 'You must increase the amount of available memory. Remove any',0Ah,0
aMemoryResident	db 'memory resident programs (TSRs) you may have loaded and try again'
		db '.',0Ah,0
aPleaseSupplyTh	db 0Ah
		db 'Please supply the missing file(s) and try again.',0Ah,0
aVolume_6_ca1	db 'volume_6.ca1',0
aVolume_4_ca1	db 'volume_4.ca1',0
aCanTOpenVolume	db 'Can',27h,'t open volume_4.ca1 file',0
aCanTAllocate_1	db 'Can',27h,'t allocate memory for compbuf',0
aDecompressio_0	db 'Decompression error!',0
aVolume_3_ca1	db 'volume_3.ca1',0
aCanTAllocate_2	db 'Can',27h,'t allocate memory for picbuf',0
aVolume_5_ca1_0	db 'volume_5.ca1',0
aCanTOpenVolu_0	db 'Can',27h,'t open volume_5.ca1 file',0
a0123456789	db ' 0123456789',0
aFatalErrorOutO	db '>>> Fatal Error <<<',0Ah
		db 0Ah
		db 'Out of memory.',0Ah,0
aPressEscToAbor	db 'Press ESC to abort',0
aYouDidnTMakeIt	db ' You didn',27h,'t make it.',0
aGiveItOneMoreT	db 'Give it one more try!',0
aYouMustCollect	db 'You must collect the treasure',0
aBeforeLeavingT	db ' before leaving the castle.',0
aYouMustColle_0	db 'You must collect all magic gems',0
aBeforeLeavin_0	db 'before leaving the castle.',0
aCongratulati_0	db '       Congratulations!',0
aYouHaveConquer	db 'You have conquered the castle!',0
aPositionTheJoy	db 'Position the joystick to the upper',0
aLeftCornerAndP	db ' left corner and press a button.',0
aPositionTheJ_0	db 'Position the joystick to the lower',0
aRightCornerAnd	db ' right corner and press a button.',0
aPressTheButton	db '  Press the button for jumping.',0
aTheOtherButton	db 'The other button will cast magic.',0
aChooseACastle	db 'Choose a castle',0
aRestoreTheOldG	db 'Restore the old game',0
aSaveThisGame	db 'Save this game',0
aGameOptions	db 'Game options',0
aLifeStory	db 'Life story',0
aPlayingInstruc	db 'Playing instructions',0
aDemonstration	db 'Demonstration',0
aQuitYourAdvent	db 'Quit your adventure',0
		db ' ',0
aPressTheFirstL	db 'Press the first letter to select',0
aAbandonThisCas	db 'Abandon this castle',0
aRestartThisCas	db 'Restart this castle',0
aSoundOff	db 'Sound off',0
aSoundOn	db 'Sound on',0
aMusicOff	db 'Music off',0
aMusicOn	db 'Music on',0
aDefineKeys	db 'Define keys',0
aJoystickOff	db 'Joystick off',0
aJoystickOn	db 'Joystick on',0
aCalibrateJoyst	db 'Calibrate joystick',0
aPressEscToAb_0	db '       Press ESC to abort',0
aUseUpDownPageU	db 'Use Up,Down,Page Up,Page Down keys',0
aPressCrToSelec	db 'Press CR to select, ESC to abort',0
aMagicGemsFound	db 'Magic gems found:',0
aMagicGems	db 'Magic gems:',0
aRequiredFound	db 'Required    Found',0
aCastle_0	db 'Castle ',0
aOf		db ' of ',0
		db '>',0
aYouNeedMoreMag	db '   You need more magic',0
aPressAnyKeyToC	db 'Press any key to continue',0
aUseUpOrDownArr	db '   Use Up or Down arrow keys',0
aUseArrowKeysTo	db 'Use arrow keys to select key',0
aUseArrowKeys_0	db '  Use arrow keys to select key',0
aKeyboardDefini	db 'Keyboard definitions:',0
aMoveLeft	db 'Move left   :',0
aMoveRight	db 'Move right  :',0
aJump		db 'Jump        :',0
aWand		db 'Wand        :',0
aAction		db 'Action      :',0
aScrollUp	db 'Scroll up   :',0
aScrollDown	db 'Scroll down :',0
aMoveLeft_0	db 'Move left',0
aMoveRight_0	db 'Move right',0
aJump_0		db 'Jump',0
aMagic		db 'Magic',0
aAction_0	db 'Action',0
aScrollUp_0	db 'Scroll up',0
aScrollDown_0	db 'Scroll down',0
aKey		db ' key:',0
aCanTAllocate_3	db 'Can',27h,'t allocate memory for picbuf',0
aCanTAllocate_4	db 'Can',27h,'t allocate memory for compbuf',0
aVolume_6_ca1_0	db 'volume_6.ca1',0
aCanTDecompress	db 'Can',27h,'t decompress!',0
aPlayingInstr_0	db 'PLAYING INSTRUCTIONS',0
aClydeIsAHighly	db 'Clyde is a highly mobile fellow. You',0
aCanMakeClydeWa	db 'can make Clyde walk left or right.',0
aClydeCanAlsoJu	db 'Clyde can also jump over objects in',0
aHisPath_	db 'his path.',0
aPressAKey	db 'Press a key',0
aClydeIsAHigh_0	db ' Clyde is a highly magical fellow.',0
aTheWandCanBrea	db ' The wand can break through large',0
aBricksOrLightB	db ' bricks or light bombs that destroy',0
aAnySurrounding	db ' any surrounding bricks as shown.',0
aWandKey	db 'Wand key: ',0
aClydeIsAHigh_1	db 'Clyde is a highly curious fellow.',0
aUsingTheAction	db 'Using the Action key, you can make',0
aClydeReadSigns	db 'Clyde read signs, flip switches and',0
aTeleportToInte	db 'teleport to interesting places.',0
aActionKey	db 'Action key: ',0
aClydeSGoalInEa	db ' Clyde',27h,'s goal in each castle is to',0
aCollectAllTheM	db ' collect all the magic gems. You',0
aMustCollectPow	db ' must collect power points to',0
aMaintainYourEn	db ' maintain your energy level. When',0
aExhaustedClyde	db ' exhausted, Clyde will disappear.',0
aClydeMustAlsoL	db 'Clyde must also locate the hidden',0
aTreasureInEach	db 'treasure in each castle. Clyde must',0
aTouchTheTreasu	db 'touch the treasure to take it.',0
aWhenClydeHasLo	db 'When Clyde has located the treasure',0
aAndCollectedAl	db 'and collected all magic gems, he',0
aMustFindAWayOu	db 'must find a way out of the castle.',0
aOftenTheExitIs	db 'Often the exit is marked by a sign.',0
aHintsAndTips	db 'HINTS AND TIPS',0
aMagicTriggers	db 'Magic Triggers',0
aAsYouExploreTh	db 'As you explore the castles, you will',0
aEncounterMagic	db 'encounter Magic Triggers. These are',0
aInvisibleAreas	db 'invisible areas that can cause',0
aStrangeThingsT	db 'strange things to happen. A wall may',0
aAppearOrDisapp	db 'appear - or disappear! Beware of the',0
aWallsUntilThey	db 'walls until they come to rest as',0
aTheyAreDeadlyT	db 'they are deadly to the touch.',0
aSuperTipLookEv	db 'SUPER TIP: Look EVERYWHERE.',0
aBreakingBricks	db 'Breaking Bricks',0
aYouCanUseTheWa	db 'You can use the wand while you walk.',0
aThisAllowsClyd	db 'This allows Clyde to break an entire',0
aRowOfBricksVer	db 'row of bricks very quickly.',0
aToDoItSimplySt	db 'To do it simply start walking and',0
aHoldDownTheWan	db 'hold down the Wand key at the same',0
aTime_		db 'time.',0
aAnyBricksThatY	db 'Any bricks that you break will',0
aBecomeSolidAga	db 'become solid again after a short',0
aTimeSoSpeedIsI	db 'time so speed is important. If a',0
aBrickReturnsWh	db 'brick returns while Clyde occupies',0
aItsSpaceClydeW	db 'its space, Clyde will disappear.',0
aLightingBombs	db 'Lighting Bombs',0
aUseTheWandKeyT	db 'Use the wand key to light bombs.',0
aClydeMustNotTo	db 'Clyde must not touch the bomb when',0
aItExplodesOrHe	db 'it explodes or he will disappear.',0
aTheExplosionWi	db 'The explosion will destroy any',0
aSurroundingSma	db 'surrounding small bricks. These',0
aSmallBricksDoN	db 'small bricks do not return.',0
aEnergy		db 'Energy',0
aTheFollowingLi	db 'The following list describes Clyde',27h,'s',0
aEnergyLosses_C	db 'energy losses. Conserving energy is',0
aVeryImportantI	db 'very important in this game.',0
aFallingLongDis	db 'Falling long distance .. 10 points',0
aJumping_______	db 'Jumping ................. 1 point',0
aWalkingAFewSte	db 'Walking a few steps ..... 1 point',0
aCanTDecompre_0	db 'Can',27h,'t decompress!',0
aScrollingUpOrD	db 'Scrolling Up or Down',0
aDuringPlayYouM	db 'During play you may want to look at',0
aAreasOffTheScr	db 'areas off the screen. You can look',0
aEitherUpOrDown	db 'either up or down using these keys:',0
aScrollUpKey	db 'Scroll up key   : ',0
aScrollDownKey	db 'Scroll down key : ',0
aPlayingSpeed	db 'Playing Speed',0
aYouCanAdjustTh	db 'You can adjust the playing speed for',0
aClydeSAdvent_0	db 'Clyde',27h,'s Adventure. Pressing F9 while',0
aInsideACastleW	db 'inside a castle will slow down the',0
aGame_TheEffect	db 'game. The effect is cumulative.',0
aPressingF9Agai	db 'Pressing F9 again will slow it down',0
aFurther_PressF	db 'further. Press F10 to cancel the',0
aPreviousF9Slow	db 'previous F9 slow down.',0
aSavingAndResto	db 'Saving and Restoring Games',0
aYouCanSaveYour	db 'You can save your progress to a disk',0
aFileAndRestore	db 'file and restore it at a later time.',0
aGamesCannotBeS	db 'Games cannot be saved from within a',0
aCastle_WhenYou	db 'castle. When you save a game, the',0
aFollowingValue	db 'following values are preserved.',0
aAmountOfMagicG	db 'Amount of Magic Gems collected.',0
aSoundJoystickA	db 'Sound, joystick and speed settings.',0
aNoteGameIsSave	db 'Note: game is saved when you quit.',0
aVolume_1_ca1	db 'volume_1.ca1',0
		align 2
byte_167AC	db 1			; DATA XREF: sub_E849:loc_EA74r
					; sub_E849+276w
aCanTAllocate_5	db 'Can',27h,'t allocate memory for picbuf',0
aCanTAllocate_6	db 'Can',27h,'t allocate memory for compbuf',0
aVolume_6_ca1_1	db 'volume_6.ca1',0
aS_0		db 's',0
a_pic		db '.pic',0
aCanTCompress	db 'Can',27h,'t compress!',0
aPdemo_		db 'pdemo_',0
aAhh_voc	db 'ahh.voc',0
aFall_voc	db 'fall.voc',0
aQuit_voc	db 'quit.voc',0
aYeehaa_voc	db 'yeehaa.voc',0
aCanTDecompre_1	db 'Can',27h,'t decompress!',0
aCongratulati_1	db 'CONGRATULATIONS!',0
aYouHaveRescued	db 'You have rescued the lost treasure',0
aOfTahookabooFr	db 'of Tahookaboo from all sixteen dark',0
aAndDeadlyCastl	db 'and deadly castles.',0
aWeDonTHaveToTe	db 'We don',27h,'t have to tell you that you',0
aAreNowAHeroFea	db 'are now a hero! Fearless and bold!',0
aLetSSeeHowWell	db 'Let',27h,'s see how well you did.',0
aPressAKey_0	db 'Press a key',0
aGreetingsHero	db 'GREETINGS HERO!',0
aFurtherTreasur	db 'Further treasure awaits the finder',0
aOfThisMessage_	db 'of this message. In a kingdom far',0
aAwayAKingDidVa	db 'away a king did vanish. With him',0
aTheGreatestTre	db 'the greatest treasure the world has',0
aEverKnown_	db 'ever known.',0
aYouHaveDoneWel	db 'You have done well as history has',0
aRevealed_YetAl	db 'revealed. Yet all accomplished will',0
aSeemAsNothingF	db 'seem as nothing for your next',0
aAdventureLurks	db 'adventure lurks within castles of',0
aSuchTreacherou	db 'such treacherous doom, no mortal',0
aCanEscape_	db 'can escape.',0
aThankYouForPla	db 'Thank you for playing Chapter One',0
aOfClydeSAdvent	db 'of Clyde',27h,'s Adventure.',0
aInterestedInMo	db 'Interested in more adventure?',0
aInformationAbo	db 'Information about ordering Chapter',0
aTwoCanBeFoundA	db 'Two can be found at the end of the',0
aGame_		db 'game.',0
aSoLong_	db 'So long.',0
aLifeStory_0	db 'LIFE STORY',0
aYouAreClydeFea	db 'You are Clyde, fearless rescuer of',0
aLostTreasure_L	db 'lost treasure. Legends tell of the',0
aTreasuresHidde	db 'treasures hidden within the castle',0
aWallsOfTahooka	db 'walls of Tahookaboo. Armed with a',0
aMagicWandYouBo	db 'magic wand, you boldly embark on a',0
aDangerousMissi	db 'dangerous mission to rescue the',0
aGreatLostTreas	db 'great lost treasure of Tahookaboo!',0
aUnregistered_0	db 'UNREGISTERED',0
aRegisteredTo	db 'Registered to:',0
aCopyright1992M	db 'Copyright 1992 Moonlite Software',0
aEnteringCastle	db 'Entering Castle ',0
aGoodLuck	db 'Good luck!',0
aGems		db 'Gems    /',0
aEnergy_0	db 'Energy',0
aFind		db 'Find:',0
aPressF1	db 'Press F1',0
aForMenu	db 'for menu',0
aVolume_1_ca1_0	db 'volume_1.ca1',0
aPressAnyKeyT_0	db 'Press any key to continue',0
aGameHasBeenSav	db 'Game has been saved',0
aGameHasBeenRes	db 'Game has been restored',0
aMoonliteSoftwa	db 'Moonlite Software - Clyde',27h,'s Adventure Version 3.0',0Ah,0
aClydeSAdvent_1	db 0Ah
		db 'Clyde',27h,'s Adventure is a game in two parts. Chapter One is Share'
		db 'ware and may',0Ah,0
aBeCopiedAndPas	db 'be copied and passed along to everyone. Chapter Two of Clyde',27h,'s'
		db ' Adventure can',0Ah,0
aOnlyBeObtained	db 'only be obtained from Moonlite Software through registration.',0Ah
		db 0Ah,0
aChapterTwoIncl	db 'Chapter Two includes:',0Ah
		db 0Ah,0
aGetTheHintsTip	db '   - Get the Hints & Tips Sheet! You also get a secret',0Ah,0
aCodeToGetUnlim	db '     code to get unlimited energy!',0Ah,0
a16NewAndDeadly	db '   - 16 new and deadly castles for you to explore!',0Ah,0
aAllNewGraphics	db '   - All new graphics! More animation!',0Ah,0
aSuperLaunchers	db '   - Super Launchers! Leap across entire screens!',0Ah,0
aWarpZonesWalkI	db '   - Warp Zones! Walk into one and you might get lost!',0Ah,0
aCastlesBecomeM	db '   - Castles become more challenging! Amazing puzzles to solve!',0Ah
		db 0Ah,0
aDonTMissOutOnT	db 'Don',27h,'t miss out on the fun. Run "MOONLITE" right now for more i'
		db 'nformation!',0Ah,0
aThisChapterOfC	db 0Ah
		db 'This chapter of Clyde',27h,'s Adventure is registered for your perso'
		db 'nal use.',0Ah,0
aThisVersionIsN	db 'This version is NOT SHAREWARE. Please DO NOT DISTRIBUTE this chap'
		db 'ter.',0Ah
		db 0Ah,0
aThanksForPlayi	db '               Thanks for playing! See you next time!',0Ah,0
aVolume_6_ca1_2	db 'volume_6.ca1',0
aOutOfMemoryVoc	db 'Out of memory VOC',0
		align 2
word_170BE	dw 220h			; DATA XREF: sub_10176:loc_10186w
					; sub_1047C+2r	...
word_170C0	dw 0			; DATA XREF: sub_10176+16w
					; sub_1050B+2Cw ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_170D3	db 0			; DATA XREF: sub_106C8+2Er
					; sub_106C8+40w ...
word_170D4	dw 0			; DATA XREF: sub_106C8:loc_106DAr
					; sub_106C8+32r ...
word_170D6	dw 0			; DATA XREF: sub_106C8+16w
					; sub_106C8+35r ...
byte_170D8	db 0			; DATA XREF: sub_106C8+3r sub_106C8+Aw ...
word_170D9	dw 0			; DATA XREF: seg009:024Br
					; sub_106C8+1Dw ...
word_170DB	dw 0			; DATA XREF: sub_106C8+21w
					; sub_106C8:loc_106F0w	...
word_170DD	dw 0			; DATA XREF: sub_106C8+Er
					; sub_107E2+7Cw
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    1
		db    0
		db    1
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    3
		db    0
		db    3
		db    0
		db    3
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    5
		db    0
		db    0
		db    0
		db    4
		db    0
		db    8
		db    0
		db  0Ch
		db    0
		db  10h
		db    0
		db  14h
		db    0
		db    7
		db    8
		db    3
		db 0FEh	; ў
		db    3
		db    8
		db    9
		db 0FEh	; ў
		db    7
		db    8
		db    9
		db 0FEh	; ў
		db    4
		db    3
		db    2
		db 0FEh	; ў
		db  0Ah
		db  0Bh
		db    2
		db 0FEh	; ў
		db    7
		db    3
		db    2
		db    8
		db    4
		db 0FEh	; ў
		db    0
		db    0
		db  11h
		db    1
		db 0EEh	; ю
		db    1
		db 0E7h	; ч
		db    2
		db 0F8h	; ј
		db    3
		db 0E9h	; щ
		db    4
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  43h	; C
		db  0Ch
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  43h	; C
		db  0Ch
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    4
		db    1
		db    0
		db  3Ch	; <
		db  0Ch
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db  12h
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  43h	; C
		db  0Ch
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  43h	; C
		db  0Ch
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  45h	; E
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    4
		db    1
		db    0
		db  3Ch	; <
		db  0Ch
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Ch	; <
		db  21h	; !
		db    0
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db  0Ch
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db  0Ch
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  42h	; B
		db    4
		db    1
		db    0
		db  40h	; @
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db  0Ch
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db  0Ch
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  42h	; B
		db    2
		db    1
		db    0
		db  42h	; B
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db  1Eh
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db  0Ch
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  42h	; B
		db    2
		db    1
		db    0
		db  42h	; B
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db  1Eh
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db  1Bh
		db    0
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  39h	; 9
		db    8
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  39h	; 9
		db    8
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  39h	; 9
		db    8
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  39h	; 9
		db    8
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  39h	; 9
		db    8
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  39h	; 9
		db    8
		db    1
		db    0
		db  39h	; 9
		db  10h
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Ch	; <
		db  0Eh
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  39h	; 9
		db    8
		db    1
		db    0
		db  39h	; 9
		db  10h
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Ch	; <
		db  0Eh
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  39h	; 9
		db    7
		db    0
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  48h	; H
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  43h	; C
		db    8
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  48h	; H
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  43h	; C
		db    8
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  48h	; H
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    8
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  48h	; H
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  43h	; C
		db    8
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  48h	; H
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  43h	; C
		db    8
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  48h	; H
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  43h	; C
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    8
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  48h	; H
		db    2
		db    1
		db    0
		db  43h	; C
		db  0Ch
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  48h	; H
		db    2
		db    1
		db    0
		db  43h	; C
		db  0Ch
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    8
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  48h	; H
		db    2
		db    1
		db    0
		db  43h	; C
		db  0Ch
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  48h	; H
		db    2
		db    1
		db    0
		db  43h	; C
		db  0Ch
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  3Ch	; <
		db  17h
		db    0
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  41h	; A
		db    4
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  43h	; C
		db  0Ah
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  41h	; A
		db    4
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Eh	; >
		db  0Eh
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  41h	; A
		db    4
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  43h	; C
		db  0Ah
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  41h	; A
		db    4
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Ch	; <
		db  0Eh
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  41h	; A
		db    4
		db    1
		db    0
		db  40h	; @
		db    4
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  40h	; @
		db    4
		db    1
		db    0
		db  3Eh	; >
		db  0Ah
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  41h	; A
		db    4
		db    1
		db    0
		db  40h	; @
		db    4
		db    1
		db    0
		db  3Eh	; >
		db    4
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  43h	; C
		db  0Eh
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  41h	; A
		db    4
		db    1
		db    0
		db  40h	; @
		db    4
		db    1
		db    0
		db  43h	; C
		db    4
		db    1
		db    0
		db  41h	; A
		db    2
		db    1
		db    0
		db  40h	; @
		db    4
		db    1
		db    0
		db  3Eh	; >
		db  0Ah
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  41h	; A
		db    4
		db    1
		db    0
		db  40h	; @
		db    4
		db    1
		db    0
		db  3Eh	; >
		db    4
		db    1
		db    0
		db  40h	; @
		db    2
		db    1
		db    0
		db  3Ch	; <
		db  0Dh
		db    0
		db    1
		db    0
		db  37h	; 7
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    4
		db    1
		db    0
		db  3Eh	; >
		db  0Ah
		db    1
		db    0
		db  37h	; 7
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    4
		db    1
		db    0
		db  3Eh	; >
		db  0Ah
		db    1
		db    0
		db  37h	; 7
		db    2
		db    1
		db    0
		db  39h	; 9
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    4
		db    1
		db    0
		db  3Ch	; <
		db    4
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    4
		db    1
		db    0
		db  39h	; 9
		db    8
		db    1
		db    0
		db  37h	; 7
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    4
		db    1
		db    0
		db  3Eh	; >
		db  0Ah
		db    1
		db    0
		db  37h	; 7
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    4
		db    1
		db    0
		db  3Eh	; >
		db  0Ah
		db    1
		db    0
		db  37h	; 7
		db    2
		db    1
		db    0
		db  39h	; 9
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    4
		db    1
		db    0
		db  3Ch	; <
		db    4
		db    1
		db    0
		db  3Eh	; >
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    4
		db    1
		db    0
		db  37h	; 7
		db  18h
		db    1
		db    0
		db  37h	; 7
		db    2
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    4
		db    1
		db    0
		db  3Ch	; <
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    4
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db  0Ah
		db    1
		db    0
		db  37h	; 7
		db    2
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    4
		db    1
		db    0
		db  3Ch	; <
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    4
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  39h	; 9
		db  0Ah
		db    1
		db    0
		db  37h	; 7
		db    2
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    4
		db    1
		db    0
		db  3Ch	; <
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    4
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db  0Ah
		db    1
		db    0
		db  37h	; 7
		db    2
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  3Bh	; ;
		db    2
		db    1
		db    0
		db  3Ch	; <
		db    2
		db    1
		db    0
		db  3Eh	; >
		db    4
		db    1
		db    0
		db  3Ch	; <
		db    4
		db    1
		db    0
		db  3Bh	; ;
		db    4
		db    1
		db    0
		db  39h	; 9
		db    2
		db    1
		db    0
		db  37h	; 7
		db    9
		db    0
		db    6
		db  18h
		db    0
		db    0
		db    7
		db  0Ch
		db    0
		db    0
		db    6
		db  18h
		db    0
		db    0
		db    7
		db  0Ch
		db    0
		db    0
		db    6
		db  18h
		db    0
		db    0
		db    7
		db  0Ch
		db    0
		db    0
		db    6
		db  18h
		db    0
		db    0
		db    7
		db  0Ch
		db    0
		db    0
		db    6
		db  18h
		db    0
		db    0
		db    7
		db  0Ch
		db    0
		db    0
		db    6
		db  18h
		db    0
		db    0
		db    7
		db  0Ch
		db    0
		db    0
		db  10h
		db    8
		db    4
		db    2
		db    1
		db    0
		db    0
		db    0
		db  0Fh
		db    0
		db    0
		db    0
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    6
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  0Fh
		db    0
		db    0
		db    0
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    6
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    7
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  0Dh
		db    0
		db    1
		db    0
		db    0
		db    0
		db    1
		db    0
		db    2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    7
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    3
		db    0
		db    0
		db    0
		db    7
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    2
		db    0
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    7
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    6
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    9
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    5
		db    0
		db    0
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    7
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    5
		db    0
		db    0
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    6
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    2
		db    0
		db    6
		db    0
		db  20h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db  0Ch
		db    0
		db    1
		db    0
		db    0
		db    0
		db    1
		db    0
		db    2
		db    0
		db    6
		db    0
		db  20h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    3
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    1
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    4
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  0Ah
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  0Ah
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db  0Dh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db    0
		db    0
		db    0
		db  0Dh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    3
		db    0
		db    0
		db    0
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db    0
		db    0
		db    0
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db    0
		db  0Dh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  0Fh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    6
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db    0
		db  0Dh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  0Fh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    6
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    1
		db    1
		db    3
		db  0Fh
		db    5
		db    0
		db    1
		db    1
		db  0Fh
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    1
		db    1
		db  0Fh
		db    7
		db    0
		db    1
		db    1
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db  0Ah
		db    4
		db    0
		db    8
		db  0Ch
		db  0Bh
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db  0Dh
		db    4
		db    0
		db    6
		db  0Fh
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db  0Ch
		db    0
		db  0Fh
		db  0Bh
		db    0
		db    8
		db    5
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db  0Fh
		db  0Bh
		db    0
		db    7
		db    5
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db  0Fh
		db  0Bh
		db    0
		db    5
		db    5
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db  0Fh
		db  0Bh
		db    0
		db    7
		db    5
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    3
		db    1
		db    4
		db    2
		db    5
		db    6
		db    9
		db    7
		db  0Ah
		db    8
		db  0Bh
		db  0Ch
		db  0Fh
		db  0Dh
		db  10h
		db  0Eh
		db  11h
byte_17A74	db 0Ch			; DATA XREF: sub_10B80+8Er
byte_17A75	db 0Fh			; DATA XREF: sub_10B80+A5r
		db  10h
		db    0
		db  0Eh
		db    0
		db  11h
		db    0
		db  0Dh
		db    0
		db    0
		db    1
		db    2
		db    3
		db    4
		db    5
		db    8
		db    9
		db  0Ah
		db  0Bh
		db  0Ch
		db  0Dh
		db  10h
		db  11h
		db  12h
		db  13h
		db  14h
		db  15h
		db    0
		db    0
		db    0
		db    1
		db    1
		db    1
		db    0
		db    0
		db    0
		db    1
		db    1
		db    1
		db    0
		db    0
		db    0
		db    1
		db    1
		db    1
		db    0
		db    1
		db    2
		db    0
		db    1
		db    2
		db    3
		db    4
		db    5
		db    3
		db    4
		db    5
		db    6
		db    7
		db    8
		db    6
		db    7
		db    8
word_17AB4	dw 0FFFFh		; DATA XREF: sub_110A2+31r
					; sub_110A2+FBw
word_17AB6	dw 0FFFFh		; DATA XREF: sub_110A2+2Dr
					; sub_110A2+F7w
word_17AB8	dw 0			; DATA XREF: seg012:0043r seg012:0055r ...
word_17ABA	dw 0			; DATA XREF: sub_1DF+9Dw
					; maybePrintString:loc_11EF1r ...
word_17ABC	dw 0			; DATA XREF: sub_1DF+A5w
					; maybePrintString:loc_11F06r ...
byte_17ABE	db 0			; DATA XREF: sub_1BE+1Cw
					; sub_11E29:loc_11E2Cr	...
byte_17ABF	db 0			; DATA XREF: sub_1BE+18w seg018:0001r
byte_17AC0	db 0			; DATA XREF: sub_1DF:loc_1EFw
					; sub_1DF+1Br ...
byte_17AC1	db 0			; DATA XREF: sub_1DF+4Fw sub_13408+Ar
byte_17AC2	db 0			; DATA XREF: sub_1DF:loc_212w
					; sub_1DF+A0r ...
byte_17AC3	db 0			; DATA XREF: sub_1DF:loc_22Bw
					; maybePrintString:loc_11F10r ...
byte_17AC4	db 0			; DATA XREF: sub_1DF:loc_25Cw
					; printChar2+7r
word_17AC5	dw 0			; DATA XREF: sub_1DF+92w printChar1+Fr
word_17AC7	dw 0			; DATA XREF: sub_1DF:loc_26Ew
					; sub_132F9+17r ...
word_17AC9	dw 1			; DATA XREF: maybePrintString+9Fr
					; sub_130FE:loc_1310Fr	...
aCompaq		db 'COMPAQ',0
		db  1Fh
		db  1Ch
		db  1Fh
		db  1Eh
		db  1Fh
		db  1Eh
		db  1Fh
		db  1Fh
		db  1Eh
		db  1Fh
		db  1Eh
		db  1Fh
word_17ADE	dw 4650h		; DATA XREF: sub_12231+10r
					; sub_136C2:loc_136CEr	...
word_17AE0	dw 0			; DATA XREF: sub_12231+14r
					; sub_136C2+8r	...
word_17AE2	dw 1			; DATA XREF: sub_1200E+F1r
					; sub_136C2+B4r ...
		dd unk_17B30
		dd unk_17B34
		dd unk_17B38
		dd unk_17B3C
		dd unk_17B40
		dd unk_17B44
		dd unk_17B48
		dd unk_17B4C
		dd unk_17B50
		dd unk_17B54
		dd unk_17B58
		dd unk_17B5C
		dd unk_17B60
		dd unk_17B64
		dd unk_17B68
		dd unk_17B6C
		dd unk_17B70
		dd unk_17B74
		dd unk_17B78
unk_17B30	db  53h	; S		; DATA XREF: dseg:3924o
		db  75h	; u
		db  6Eh	; n
		db    0
unk_17B34	db  4Dh	; M		; DATA XREF: dseg:3928o
		db  6Fh	; o
		db  6Eh	; n
		db    0
unk_17B38	db  54h	; T		; DATA XREF: dseg:392Co
		db  75h	; u
		db  65h	; e
		db    0
unk_17B3C	db  57h	; W		; DATA XREF: dseg:3930o
		db  65h	; e
		db  64h	; d
		db    0
unk_17B40	db  54h	; T		; DATA XREF: dseg:3934o
		db  68h	; h
		db  75h	; u
		db    0
unk_17B44	db  46h	; F		; DATA XREF: dseg:3938o
		db  72h	; r
		db  69h	; i
		db    0
unk_17B48	db  53h	; S		; DATA XREF: dseg:393Co
		db  61h	; a
		db  74h	; t
		db    0
unk_17B4C	db  4Ah	; J		; DATA XREF: dseg:3940o
		db  61h	; a
		db  6Eh	; n
		db    0
unk_17B50	db  46h	; F		; DATA XREF: dseg:3944o
		db  65h	; e
		db  62h	; b
		db    0
unk_17B54	db  4Dh	; M		; DATA XREF: dseg:3948o
		db  61h	; a
		db  72h	; r
		db    0
unk_17B58	db  41h	; A		; DATA XREF: dseg:394Co
		db  70h	; p
		db  72h	; r
		db    0
unk_17B5C	db  4Dh	; M		; DATA XREF: dseg:3950o
		db  61h	; a
		db  79h	; y
		db    0
unk_17B60	db  4Ah	; J		; DATA XREF: dseg:3954o
		db  75h	; u
		db  6Eh	; n
		db    0
unk_17B64	db  4Ah	; J		; DATA XREF: dseg:3958o
		db  75h	; u
		db  6Ch	; l
		db    0
unk_17B68	db  41h	; A		; DATA XREF: dseg:395Co
		db  75h	; u
		db  67h	; g
		db    0
unk_17B6C	db  53h	; S		; DATA XREF: dseg:3960o
		db  65h	; e
		db  70h	; p
		db    0
unk_17B70	db  4Fh	; O		; DATA XREF: dseg:3964o
		db  63h	; c
		db  74h	; t
		db    0
unk_17B74	db  4Eh	; N		; DATA XREF: dseg:3968o
		db  6Fh	; o
		db  76h	; v
		db    0
unk_17B78	db  44h	; D		; DATA XREF: dseg:396Co
		db  65h	; e
		db  63h	; c
		db    0
		db  25h	; %
		db  73h	; s
		db  20h
		db  25h	; %
		db  73h	; s
		db  20h
		db  25h	; %
		db  30h	; 0
		db  32h	; 2
		db  64h	; d
		db  20h
		db  25h	; %
		db  30h	; 0
		db  32h	; 2
		db  64h	; d
		db  3Ah	; :
		db  25h	; %
		db  30h	; 0
		db  32h	; 2
		db  64h	; d
		db  3Ah	; :
		db  25h	; %
		db  30h	; 0
		db  32h	; 2
		db  64h	; d
		db  20h
		db  25h	; %
		db  34h	; 4
		db  64h	; d
		db  0Ah
		db    0
		db    0
		db    0
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  21h	; !
		db  21h	; !
		db  21h	; !
		db  21h	; !
		db  21h	; !
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db    1
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  14h
		db  14h
		db  14h
		db  14h
		db  14h
		db  14h
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  18h
		db  18h
		db  18h
		db  18h
		db  18h
		db  18h
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db  20h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  70h	; p
		db  72h	; r
		db  69h	; i
		db  6Eh	; n
		db  74h	; t
		db  66h	; f
		db  20h
		db  3Ah	; :
		db  20h
		db  66h	; f
		db  6Ch	; l
		db  6Fh	; o
		db  61h	; a
		db  74h	; t
		db  69h	; i
		db  6Eh	; n
		db  67h	; g
		db  20h
		db  70h	; p
		db  6Fh	; o
		db  69h	; i
		db  6Eh	; n
		db  74h	; t
		db  20h
		db  66h	; f
		db  6Fh	; o
		db  72h	; r
		db  6Dh	; m
		db  61h	; a
		db  74h	; t
		db  73h	; s
		db  20h
		db  6Eh	; n
		db  6Fh	; o
		db  74h	; t
		db  20h
		db  6Ch	; l
		db  69h	; i
		db  6Eh	; n
		db  6Bh	; k
		db  65h	; e
		db  64h	; d
		db  0Dh
		db  0Ah
		db  73h	; s
		db  63h	; c
		db  61h	; a
		db  6Eh	; n
		db  66h	; f
		db  20h
		db  3Ah	; :
		db  20h
		db  66h	; f
		db  6Ch	; l
		db  6Fh	; o
		db  61h	; a
		db  74h	; t
		db  69h	; i
		db  6Eh	; n
		db  67h	; g
		db  20h
		db  70h	; p
		db  6Fh	; o
		db  69h	; i
		db  6Eh	; n
		db  74h	; t
		db  20h
		db  66h	; f
		db  6Fh	; o
		db  72h	; r
		db  6Dh	; m
		db  61h	; a
		db  74h	; t
		db  73h	; s
		db  20h
		db  6Eh	; n
		db  6Fh	; o
		db  74h	; t
		db  20h
		db  6Ch	; l
		db  69h	; i
		db  6Eh	; n
		db  6Bh	; k
		db  65h	; e
		db  64h	; d
		db  0Dh
		db  0Ah
		db    0
off_17CF6	dd nullsub_1		; DATA XREF: sub_122E6:loc_12302r
off_17CFA	dd nullsub_1		; DATA XREF: sub_122E6+20r
off_17CFE	dd nullsub_1		; DATA XREF: sub_122E6:loc_1230Ar
word_17D02	dw 0			; DATA XREF: sub_12319+19r
					; sub_12319+62w
		db    1
		db  20h
		db    2
		db  20h
		db    2
		db  20h
		db    4
		db 0A0h	;  
		db    2
		db 0A0h	;  
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
unk_17D2C	db    0			; DATA XREF: dseg:3B70o
		db    0
		db    0
		db    0
		dd unk_17D2C
word_17D34	dw 3B6Ch		; DATA XREF: sub_12481+28r
					; sub_12481+231w ...
seg_17D36	dw seg dseg		; DATA XREF: sub_12481:loc_126AEw
					; sub_126BA+E1w ...
word_17D38	dw 0			; DATA XREF: sub_12E18+10r
word_17D3A	dw 0FFFFh		; DATA XREF: sub_12E18:loc_12E39r
byte_17D3C	db 0			; DATA XREF: sub_12827+3w seg025:002Cr ...
		align 2
word_17D3E	dw 0			; DATA XREF: sub_12AF3:loc_12B06w
					; sub_12AF3:loc_12B19w
		db    0
		db  13h
		db    2
		db    2
		db    4
		db    5
		db    6
		db    8
		db    8
		db    8
		db  14h
		db  15h
		db    5
		db  13h
		db 0FFh
		db  16h
		db    5
		db  11h
		db    2
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db    5
		db    5
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db  0Fh
		db 0FFh
		db 0FFh
		db    2
		db 0FFh
		db  0Fh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db  13h
		db 0FFh
		db 0FFh
		db    2
		db    2
		db    5
		db  0Fh
		db    2
		db 0FFh
		db 0FFh
		db 0FFh
		db  13h
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db  13h
		db 0FFh
		db    0
word_17D9A	dw 1			; DATA XREF: sub_12FC0:loc_12FCCw
					; sub_12FD1+4r	...
word_17D9C	dw 0			; DATA XREF: sub_12FC0+8w sub_12FD1r ...
word_17D9E	dw 1000h		; DATA XREF: start+86r	start+93w ...
		db  1Fh
		db  1Ch
		db  1Fh
		db  1Eh
		db  1Fh
		db  1Eh
		db  1Fh
		db  1Fh
		db  1Eh
		db  1Fh
		db  1Eh
		db  1Fh
		db  28h	; (
		db  6Eh	; n
		db  75h	; u
		db  6Ch	; l
		db  6Ch	; l
		db  29h	; )
		db    0
		db  30h	; 0
		db  31h	; 1
		db  32h	; 2
		db  33h	; 3
		db  34h	; 4
		db  35h	; 5
		db  36h	; 6
		db  37h	; 7
		db  38h	; 8
		db  39h	; 9
		db  41h	; A
		db  42h	; B
		db  43h	; C
		db  44h	; D
		db  45h	; E
		db  46h	; F
		db    0
		db  13h
		db  13h
		db    1
		db  13h
		db  14h
		db  13h
		db  13h
		db  13h
		db  13h
		db    2
		db    0
		db  13h
		db    3
		db    4
		db  13h
		db    8
		db    5
		db    5
		db    5
		db    5
		db    5
		db    5
		db    5
		db    5
		db    5
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  0Eh
		db  16h
		db  0Eh
		db    7
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  15h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  0Ch
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  0Fh
		db    9
		db  0Eh
		db  0Eh
		db  0Eh
		db    7
		db    9
		db  13h
		db  13h
		db    6
		db  13h
		db  11h
		db  0Ah
		db  0Dh
		db  13h
		db  13h
		db  10h
		db  13h
		db  0Bh
		db  13h
		db  13h
		db  0Ch
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db    0
off_17E24	dw offset sub_14A	; DATA XREF: start+7Er
off_17E26	dw offset sub_14A	; DATA XREF: sub_101+Br
off_17E28	dw offset sub_1BE	; DATA XREF: start+DEr
		dd loc_28F
		dd loc_298
		dd loc_298
		dd loc_298
byte_17E3A	db 0			; DATA XREF: sub_DE8+10Ar
					; sub_DE8:loc_F2Fr ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1803C	dw 0			; DATA XREF: sub_66A+437w sub_66A+453r
word_1803E	dw 0			; DATA XREF: sub_66A+433w sub_66A+44Fr
word_18040	dw 0			; DATA XREF: sub_DE8:loc_14B8r
					; sub_DE8+6D7r	...
word_18042	dw 0			; DATA XREF: sub_7F60+49Bw
					; sub_7F60:loc_857Ar ...
byte_18044	db 0			; DATA XREF: sub_DE8:loc_E92r
					; sub_DE8+EE6r	...
		align 2
word_18046	dw 0			; DATA XREF: sub_66A+475w sub_66A+491r
word_18048	dw 0			; DATA XREF: sub_66A+471w sub_66A+48Dr
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1813C	dw 0			; DATA XREF: sub_66A+4B3w sub_66A+4CFr
word_1813E	dw 0			; DATA XREF: sub_66A+4AFw sub_66A+4CBr
byte_18140	db 0			; DATA XREF: sub_DE8:loc_1038w
					; sub_DE8:loc_103Fw ...
byte_18141	db 0			; DATA XREF: sub_DE8+1FAr sub_DE8+765r ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_18234	dw 0			; DATA XREF: sub_DE8+B9r
					; sub_DE8:loc_EB8r ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_18316	dw 0			; DATA XREF: sub_3DEF+152w
					; sub_3DEF+458w ...
word_18318	dw 0			; DATA XREF: sub_7F60+356w
					; sub_7F60+61Dr ...
word_1831A	dw 0			; DATA XREF: sub_DE8+B80w
					; sub_DE8+14C7r ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
dword_18394	dd 0			; DATA XREF: sub_DE8:loc_19C9r
					; sub_DE8+D9Cr	...
dword_18398	dd 0			; DATA XREF: sub_DE8+897r
					; sub_23BE+7DEr ...
dword_1839C	dd 0			; DATA XREF: sub_DE8+FD6r
					; sub_DE8+1036r ...
word_183A0	dw 0			; DATA XREF: sub_DE8+460w sub_DE8+64Fr ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_1841A	db 0			; DATA XREF: sub_DE8+1E8w
					; sub_DE8:loc_1054r ...
byte_1841B	db 0			; DATA XREF: sub_DE8+19Cr sub_DE8+1BAr ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_18644	dw 0			; DATA XREF: sub_7F60+35Cw
					; sub_7F60+643r ...
word_18646	dw 0			; DATA XREF: sub_DE8+B86w
					; sub_DE8+14CDr ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1865C	dw 0			; DATA XREF: sub_7F60+4A1w
					; sub_7F60+640r
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_1872E	db 0			; DATA XREF: sub_DE8+217r sub_DE8+22Dw ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_196F8	db 0			; DATA XREF: sub_4676+FBw
					; sub_4676+109w ...
		align 2
word_196FA	dw 0			; DATA XREF: sub_BAEF+A68r
					; sub_BAEF+C44r ...
word_196FC	dw 0			; DATA XREF: sub_BAEF+A64r
					; sub_BAEF+C40r ...
word_196FE	dw 0			; DATA XREF: sub_BAEF+A0r
word_19700	dw 0			; DATA XREF: sub_BAEF+9Cr
word_19702	dw 0			; DATA XREF: sub_BAEF+2FEr
word_19704	dw 0			; DATA XREF: sub_BAEF+2FAr
word_19706	dw 0			; DATA XREF: sub_BAEF+4BBr
word_19708	dw 0			; DATA XREF: sub_BAEF+4B7r
word_1970A	dw 0			; DATA XREF: sub_BAEF+7E4r
word_1970C	dw 0			; DATA XREF: sub_BAEF+7E0r
word_1970E	dw 0			; DATA XREF: sub_BAEF+678r
word_19710	dw 0			; DATA XREF: sub_BAEF+674r
word_19712	dw 0			; DATA XREF: sub_BAEF+918r
word_19714	dw 0			; DATA XREF: sub_BAEF+914r
word_19716	dw 0			; DATA XREF: sub_E849+FDr
word_19718	dw 0			; DATA XREF: sub_E849+F9r
word_1971A	dw 0			; DATA XREF: sub_E849+2A9r
word_1971C	dw 0			; DATA XREF: sub_E849+2A5r
word_1971E	dw 0			; DATA XREF: sub_E849+340r
word_19720	dw 0			; DATA XREF: sub_E849+33Cr
word_19722	dw 0			; DATA XREF: sub_E849+3F4r
word_19724	dw 0			; DATA XREF: sub_E849+3F0r
word_19726	dw 0			; DATA XREF: sub_E849+48Br
word_19728	dw 0			; DATA XREF: sub_E849+487r
word_1972A	dw 0			; DATA XREF: sub_E849+B6r
word_1972C	dw 0			; DATA XREF: sub_E849+B2r
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_19742	dw 0			; DATA XREF: seg006:032Ew
					; sub_10176+5Br
word_19744	dw 0			; DATA XREF: seg006:032Aw
					; sub_10176+57r
word_19746	dw 0			; DATA XREF: seg006:03BBw
					; sub_10176+AEr
word_19748	dw 0			; DATA XREF: seg006:03B7w
					; sub_10176+AAr
word_1974A	dw 0			; DATA XREF: seg006:0448w
					; sub_10176:loc_1027Br
word_1974C	dw 0			; DATA XREF: seg006:0444w
					; sub_10176+101r
word_1974E	dw 0			; DATA XREF: seg006:04D5w
					; sub_10176+158r
word_19750	dw 0			; DATA XREF: seg006:04D1w
					; sub_10176+154r
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1976A	dw 0			; DATA XREF: sub_BAEF+A75r
					; sub_BAEF+A92r ...
word_1976C	dw 0			; DATA XREF: sub_BAEF+ADr sub_BAEF+CAr
word_1976E	dw 0			; DATA XREF: sub_BAEF+30Br
					; sub_BAEF+328r
word_19770	dw 0			; DATA XREF: sub_BAEF+4C8r
					; sub_BAEF+4E5r
word_19772	dw 0			; DATA XREF: sub_BAEF+7F1r
					; sub_BAEF+80Er
word_19774	dw 0			; DATA XREF: sub_BAEF+685r
					; sub_BAEF+6A2r
word_19776	dw 0			; DATA XREF: sub_BAEF+925r
					; sub_BAEF+942r
word_19778	dw 0			; DATA XREF: sub_E849+10Ar
					; sub_E849+127r
word_1977A	dw 0			; DATA XREF: sub_E849+2B6r
					; sub_E849+2D3r
word_1977C	dw 0			; DATA XREF: sub_E849+34Dr
					; sub_E849+36Ar
word_1977E	dw 0			; DATA XREF: sub_E849+401r
					; sub_E849+41Er
word_19780	dw 0			; DATA XREF: sub_E849+498r
					; sub_E849+4B5r
word_19782	dw 0			; DATA XREF: sub_E849+C3r sub_E849+E0r
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1978E	dw 0			; DATA XREF: seg006:0331w
					; sub_10176+68r ...
word_19790	dw 0			; DATA XREF: seg006:03BEw
					; sub_10176+BBr
word_19792	dw 0			; DATA XREF: seg006:044Bw
					; sub_10176+112r
word_19794	dw 0			; DATA XREF: seg006:04D8w
					; sub_10176+165r
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_197A2	dw 0			; DATA XREF: sub_DE8+2Er sub_DE8+175r	...
word_197A4	dw 0			; DATA XREF: sub_DE8+AB0w
					; sub_DE8+143Br ...
word_197A6	dw 0			; DATA XREF: sub_DE8+63w sub_DE8+422r	...
word_197A8	dw 0			; DATA XREF: sub_66A+52Fw sub_66A+54Br
word_197AA	dw 0			; DATA XREF: sub_66A+52Bw sub_66A+547r
word_197AC	dw 0			; DATA XREF: sub_DE8+B7Aw
					; sub_DE8+14C1r ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_197D6	dw 0			; DATA XREF: sub_66A+4F1w sub_66A+50Dr
word_197D8	dw 0			; DATA XREF: sub_66A+4EDw sub_66A+509r
word_197DA	dw 0			; DATA XREF: sub_66A+3BBw sub_66A+3D7r ...
word_197DC	dw 0			; DATA XREF: sub_66A+3B7w sub_66A+3D3r ...
dword_197DE	dd 0			; DATA XREF: sub_7CBF+21w sub_D264+2Ar ...
word_197E2	dw 0			; DATA XREF: sub_DE8:loc_ECFr
					; sub_7D5D:loc_7E84w ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_19E82	dw 0			; DATA XREF: sub_DE8+AC5w sub_DE8+B8Fr ...
word_19E84	dw 0			; DATA XREF: sub_DE8+1D8w
					; sub_DE8:loc_FC4r ...
word_19E86	dw 0			; DATA XREF: sub_D27+15r sub_D27+38r ...
word_19E88	dw 0			; DATA XREF: sub_DE8+23w sub_23BE+A1r	...
word_19E8A	dw 0			; DATA XREF: sub_DE8+1Dw sub_23BE+9Br	...
byte_19E8C	db 0			; DATA XREF: sub_DE8+EC1r
					; sub_DE8:loc_1CB7w ...
		align 2
word_19E8E	dw 0			; DATA XREF: sub_66A+3F9w sub_66A+415r
word_19E90	dw 0			; DATA XREF: sub_66A+3F5w sub_66A+411r
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_19F0A	db 0			; DATA XREF: seg003:00AFw seg003:00BFw ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_19FFC	dw 0			; DATA XREF: sub_DE8+B8Cw
					; sub_DE8+14D3r ...
byte_19FFE	db 0			; DATA XREF: sub_DE8:loc_F77r
					; sub_DE8+1A9r	...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1A080	dw 0			; DATA XREF: sub_DE8+ABFw sub_DE8+BA1r ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_1A104	db 0			; DATA XREF: sub_DE8:loc_F0Cr
					; sub_DE8:loc_F15r ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1A13A	dw 0			; DATA XREF: sub_DE8+69w sub_DE8+41Cr	...
word_1A13C	dw 0			; DATA XREF: sub_DE8+7Aw
					; sub_DE8:loc_1137r ...
byte_1A13E	db 0			; DATA XREF: sub_DE8+573r
					; sub_DE8:loc_137Br ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_1A1B8	db 0			; DATA XREF: sub_DE8+210r
					; sub_DE8+1046w ...
		align 2
word_1A1BA	dw 0			; DATA XREF: sub_4B81+45w
					; sub_4B81+580r ...
dword_1A1BC	dd 0			; DATA XREF: sub_DE8:loc_22F1r
					; sub_DE8+151Br ...
dword_1A1C0	dd 0			; DATA XREF: sub_439E+20w sub_462B+1Fr ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1A514	dw 0			; DATA XREF: sub_DE8+ACBw sub_DE8+B95r ...
word_1A516	dw 0			; DATA XREF: sub_DE8+329w
					; sub_23BE+303w ...
word_1A518	dw 0			; DATA XREF: sub_DE8+339w
					; sub_23BE+313w ...
word_1A51A	dw 0			; DATA XREF: sub_DE8+F93w
					; sub_23BE+D52w ...
byte_1A51C	db 0			; DATA XREF: sub_DE8+1358r
					; sub_DE8+135Fw ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1A596	dw 0			; DATA XREF: sub_D27+23r sub_D27+46r ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1A5A4	dw 0			; DATA XREF: sub_DE8+AB9w sub_DE8+B9Br ...
word_1A5A6	dw 0			; DATA XREF: sub_D27+5Fr sub_D27+B2r ...
word_1A5A8	dw 0			; DATA XREF: sub_D27+58r sub_D27+ABr ...
word_1A5AA	dw 0			; DATA XREF: sub_DE8:loc_1104r
					; sub_DE8+AC2r	...
word_1A5AC	dw 0			; DATA XREF: sub_DE8+335r sub_DE8+443r ...
word_1A5AE	dw 0			; DATA XREF: sub_DE8:loc_18EFr
					; sub_DE8+B15r	...
word_1A5B0	dw 0			; DATA XREF: sub_DE8+449r
					; sub_DE8:loc_193Br ...
word_1A5B2	dw 0			; DATA XREF: couldBeLoadCastle:loc_7764r
word_1A5B4	dw 0			; DATA XREF: couldBeLoadCastle:loc_7789r
word_1A5B6	dw 0			; DATA XREF: couldBeLoadCastle:loc_77AEr
byte_1A5B8	db 0			; DATA XREF: couldBeLoadCastle+229r
					; couldBeLoadCastle:loc_7998r ...
		align 2
word_1A5BA	dw 0			; DATA XREF: sub_DE8+1CBr sub_DE8+1D2w ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1A5F2	dw 0			; DATA XREF: sub_DE8+6Fw sub_DE8+40Bw	...
word_1A5F4	dw 0			; DATA XREF: sub_66A+593r
word_1A5F6	dw 0			; DATA XREF: sub_66A+58Fr
		align 10h
word_1A600	dw 0			; DATA XREF: sub_66A:loc_C58r
					; sub_66A+614r
		db    0
		db    0
		db    0
		db    0
byte_1A606	db 0			; DATA XREF: sub_66A+603r
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1A622	dw 0			; DATA XREF: sub_DE8+39w sub_DE8+150Dr ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_1A7C8	db 0			; DATA XREF: sub_DE8+1F3r
					; sub_23BE+230r ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_1A7FA	db 0			; DATA XREF: sub_DE8+8A7r
					; sub_23BE+7EEr ...
byte_1A7FB	db 0			; DATA XREF: sub_DE8+8B3r
					; sub_23BE+7FAr ...
byte_1A7FC	db 0			; DATA XREF: sub_4B81+1CBr
					; sub_4B81+1F7r ...
byte_1A7FD	db 0			; DATA XREF: sub_4B81+1D4r
					; sub_4B81+200r ...
byte_1A7FE	db 0			; DATA XREF: sub_A8D6:loc_A960r
					; sub_A981:loc_AA07r
byte_1A7FF	db 0			; DATA XREF: sub_4B81+186r
byte_1A800	db 0			; DATA XREF: sub_AA28+57r sub_AA28+9Dr ...
byte_1A801	db 0			; DATA XREF: sub_AA28+60r sub_AA28+A6r ...
byte_1A802	db 0			; DATA XREF: sub_ACDC+57r sub_ACDC+9Dr ...
byte_1A803	db 0			; DATA XREF: sub_ACDC+60r sub_ACDC+A6r ...
byte_1A804	db 0			; DATA XREF: sub_9F9A:loc_A06Er
					; sub_A08D:loc_A165r
byte_1A805	db 0			; DATA XREF: sub_9F9A+DDr sub_A08D+E1r
		align 4
word_1A808	dw 0			; DATA XREF: sub_68C6+22w sub_6901+13r
word_1A80A	dw 0			; DATA XREF: sub_68C6+1Ew sub_6901+Fr
word_1A80C	dw 0			; DATA XREF: sub_10176+6Bw
					; sub_10176:loc_10208r	...
word_1A80E	dw 0			; DATA XREF: sub_10176+7Ew
					; sub_10176+9Ar ...
word_1A810	dw 0			; DATA XREF: sub_10176+7Aw
					; sub_10176+96r ...
word_1A812	dw 0			; DATA XREF: sub_10176+BEw
					; sub_10176:loc_1025Fr	...
word_1A814	dw 0			; DATA XREF: sub_10176+D5w
					; sub_10176+F1r ...
word_1A816	dw 0			; DATA XREF: sub_10176+D1w
					; sub_10176+EDr ...
word_1A818	dw 0			; DATA XREF: sub_10176+168w
					; sub_10176:loc_10305r	...
word_1A81A	dw 0			; DATA XREF: sub_10176+128w
					; sub_10176+144r ...
word_1A81C	dw 0			; DATA XREF: sub_10176+124w
					; sub_10176+140r ...
word_1A81E	dw 0			; DATA XREF: sub_10176+17Bw
					; sub_10176+197r ...
word_1A820	dw 0			; DATA XREF: sub_10176+177w
					; sub_10176+193r ...
word_1A822	dw 0			; DATA XREF: sub_10176+115w
					; sub_10176:loc_102B2r	...
word_1A824	dw 0			; DATA XREF: sub_110A2+54r
					; sub_110A2+94w ...
word_1A826	dw 0			; DATA XREF: sub_110A2+42r
					; sub_110A2+EEw
word_1A828	dw 0			; DATA XREF: sub_110A2+3Er
					; sub_110A2+EAw
byte_1A82A	db 0			; DATA XREF: sub_10B50+1Dw
					; sub_113EB:loc_113F9r
		align 2
word_1A82C	dw 0			; DATA XREF: sub_10ACE:loc_10AEAw
					; sub_10ACE+3Dr ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1A940	dw 0			; DATA XREF: seg011:0FABr seg011:0FC3r ...
word_1A942	dw 0			; DATA XREF: seg011:0FB5r seg011:0FCDr ...
		db    0
		db    0
byte_1A946	db 0			; DATA XREF: seg011:1076w
					; sub_11BBC+57w
		db    0
		db    0
		db    0
word_1A94A	dw 0			; DATA XREF: sub_10B1D:loc_10B3Fw
word_1A94C	dw 0			; DATA XREF: sub_10B1D+2Dw
					; sub_110A2+1Cr
byte_1A94E	db 0			; DATA XREF: sub_11BBC+52w
byte_1A94F	db 0			; DATA XREF: sub_10A5A+5Fw
					; sub_10D10+81w ...
		db    0
		db    0
word_1A952	dw 0			; DATA XREF: seg011:loc_119F9r
					; seg011:10C3w	...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1ABAC	dw 0			; DATA XREF: seg011:loc_11A37w
					; seg011:106Br	...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1AC84	dw 0			; DATA XREF: sub_10999:loc_1099Cr
					; sub_109D5+12w ...
byte_1AC86	db 0			; DATA XREF: sub_10B50+11w
					; sub_115B7:loc_115C6r
byte_1AC87	db 0			; DATA XREF: sub_10A5A+5Cw
					; sub_10B80+3Er ...
word_1AC88	dw 0			; DATA XREF: sub_11BBC+9Fw
					; sub_11C80+13r
word_1AC8A	dw 0			; DATA XREF: sub_11BBC+9Bw
					; sub_11C80+Fr
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_1ACCF	db 0			; DATA XREF: sub_10B50+17w
					; sub_115B7:loc_115D4r
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1AD62	dw 0			; DATA XREF: sub_1AF+2w sub_1AF+8r
unk_1AD64	db    0			; DATA XREF: sub_12264+60o
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1AD7E	dw 0			; DATA XREF: sub_1200E+19w
					; sub_1200E+1B3o ...
word_1AD80	dw 0			; DATA XREF: sub_1200E+46w
word_1AD82	dw 0			; DATA XREF: sub_1200E+13Ew
word_1AD84	dw 0			; DATA XREF: sub_1200E+1ADw
					; sub_1200E+1FDw
word_1AD86	dw 0			; DATA XREF: sub_1200E+1A7w
					; sub_1200E:loc_121C8w	...
word_1AD88	dw 0			; DATA XREF: sub_1200E+80w
					; sub_1200E:loc_120B6r	...
word_1AD8A	dw 0			; DATA XREF: sub_1200E+16Fw
word_1AD8C	dw 0			; DATA XREF: sub_1200E+15Cw
word_1AD8E	dw 0			; DATA XREF: sub_1200E+11Ew
					; sub_1200E:loc_12134w
dseg		ends

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Uninitialized
seg070		segment	byte stack 'STACK' use16
		assume cs:seg070
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
byte_1AD90	db 80h dup(0)
seg070		ends


		end start
